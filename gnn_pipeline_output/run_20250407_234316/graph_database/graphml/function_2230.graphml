<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"><key id="d6" for="edge" attr.name="type" attr.type="string"/>
<key id="d5" for="node" attr.name="condition" attr.type="string"/>
<key id="d4" for="node" attr.name="type" attr.type="string"/>
<key id="d3" for="graph" attr.name="severity" attr.type="string"/>
<key id="d2" for="graph" attr.name="cvss" attr.type="string"/>
<key id="d1" for="graph" attr.name="cve" attr.type="string"/>
<key id="d0" for="graph" attr.name="pointer_arithmetic" attr.type="boolean"/>
<graph edgedefault="directed"><data key="d0">True</data>
<data key="d1">CVE-2019-17534</data>
<data key="d2">6.8</data>
<data key="d3">MEDIUM</data>
<node id="vips_foreign_load_gif_scan_image">
  <data key="d4">FunctionDefinition</data>
</node>
<node id="i">
  <data key="d4">Variable</data>
</node>
<node id="vips_error">
  <data key="d4">FunctionCall</data>
</node>
<node id="vips_foreign_load_gif_error">
  <data key="d4">FunctionCall</data>
</node>
<node id="VIPS_OBJECT_GET_CLASS">
  <data key="d4">FunctionCall</data>
</node>
<node id="if_0">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> DGifGetImageDesc( gif-&gt;file </data>
</node>
<node id="if_1">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> file-&gt;Image.Left &lt; 0 ||
		file-&gt;Image.Width &lt; 1 ||
		file-&gt;Image.Width &gt; 10000 ||
		file-&gt;Image.Left + file-&gt;Image.Width &gt; file-&gt;SWidth ||
		file-&gt;Image.Top &lt; 0 ||
		file-&gt;Image.Height &lt; 1 ||
		file-&gt;Image.Height &gt; 10000 ||
		file-&gt;Image.Top + file-&gt;Image.Height &gt; file-&gt;SHeight </data>
</node>
<node id="if_2">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> !gif-&gt;has_colour &amp;&amp;
 		map </data>
</node>
<node id="if_3">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> map-&gt;Colors[i].Red != map-&gt;Colors[i].Green ||
				map-&gt;Colors[i].Green != map-&gt;Colors[i].Blue </data>
</node>
<node id="if_4">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> vips_foreign_load_gif_code_next( gif, &amp;extension </data>
</node>
<node id="for_5">
  <data key="d4">ControlStructure_for</data>
  <data key="d5"> i = 0; i &lt; map-&gt;ColorCount; i++ </data>
</node>
<node id="while_6">
  <data key="d4">ControlStructure_while</data>
  <data key="d5"> extension != NULL </data>
</node>
<edge source="vips_foreign_load_gif_scan_image" target="i">
  <data key="d6">declares</data>
</edge>
<edge source="vips_foreign_load_gif_scan_image" target="vips_error">
  <data key="d6">calls</data>
</edge>
<edge source="vips_foreign_load_gif_scan_image" target="vips_foreign_load_gif_error">
  <data key="d6">calls</data>
</edge>
<edge source="vips_foreign_load_gif_scan_image" target="VIPS_OBJECT_GET_CLASS">
  <data key="d6">calls</data>
</edge>
<edge source="vips_foreign_load_gif_scan_image" target="if_0">
  <data key="d6">contains</data>
</edge>
<edge source="vips_foreign_load_gif_scan_image" target="if_1">
  <data key="d6">contains</data>
</edge>
<edge source="vips_foreign_load_gif_scan_image" target="if_2">
  <data key="d6">contains</data>
</edge>
<edge source="vips_foreign_load_gif_scan_image" target="if_3">
  <data key="d6">contains</data>
</edge>
<edge source="vips_foreign_load_gif_scan_image" target="if_4">
  <data key="d6">contains</data>
</edge>
<edge source="vips_foreign_load_gif_scan_image" target="for_5">
  <data key="d6">contains</data>
</edge>
<edge source="vips_foreign_load_gif_scan_image" target="while_6">
  <data key="d6">contains</data>
</edge>
<edge source="i" target="if_0">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_1">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_2">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_3">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_4">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="for_5">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="while_6">
  <data key="d6">used_in_condition</data>
</edge>
</graph></graphml>