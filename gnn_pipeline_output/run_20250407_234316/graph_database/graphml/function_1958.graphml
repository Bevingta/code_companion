<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"><key id="d5" for="edge" attr.name="type" attr.type="string"/>
<key id="d4" for="node" attr.name="condition" attr.type="string"/>
<key id="d3" for="node" attr.name="type" attr.type="string"/>
<key id="d2" for="graph" attr.name="severity" attr.type="string"/>
<key id="d1" for="graph" attr.name="cvss" attr.type="string"/>
<key id="d0" for="graph" attr.name="cve" attr.type="string"/>
<graph edgedefault="directed"><data key="d0">CVE-2016-2450</data>
<data key="d1">9.3</data>
<data key="d2">HIGH</data>
<node id="onQueueFilled">
  <data key="d3">FunctionDefinition</data>
</node>
<node id="frameDuration">
  <data key="d3">Variable</data>
</node>
<node id="res">
  <data key="d3">Variable</data>
</node>
<node id="source">
  <data key="d3">Variable</data>
</node>
<node id="codec_return">
  <data key="d3">Variable</data>
</node>
<node id="encoded_packet_iterator">
  <data key="d3">Variable</data>
</node>
<node id="raw_frame">
  <data key="d3">Variable</data>
</node>
<node id="flags">
  <data key="d3">Variable</data>
</node>
<node id="ConvertYUV420SemiPlanarToYUV420Planar">
  <data key="d3">FunctionCall</data>
</node>
<node id="notifyEmptyBufferDone">
  <data key="d3">FunctionCall</data>
</node>
<node id="vpx_img_wrap">
  <data key="d3">FunctionCall</data>
</node>
<node id="vpx_codec_enc_config_set">
  <data key="d3">FunctionCall</data>
</node>
<node id="vpx_codec_encode">
  <data key="d3">FunctionCall</data>
</node>
<node id="notify">
  <data key="d3">FunctionCall</data>
</node>
<node id="notifyFillBufferDone">
  <data key="d3">FunctionCall</data>
</node>
<node id="begin">
  <data key="d3">FunctionCall</data>
</node>
<node id="getPortQueue">
  <data key="d3">FunctionCall</data>
</node>
<node id="extractGraphicBuffer">
  <data key="d3">FunctionCall</data>
</node>
<node id="erase">
  <data key="d3">FunctionCall</data>
</node>
<node id="ALOGE">
  <data key="d3">FunctionCall</data>
</node>
<node id="getEncodeFlags">
  <data key="d3">FunctionCall</data>
</node>
<node id="memcpy">
  <data key="d3">FunctionCall</data>
</node>
<node id="if_0">
  <data key="d3">ControlStructure_if</data>
  <data key="d4">mCodecContext == NULL</data>
</node>
<node id="if_1">
  <data key="d3">ControlStructure_if</data>
  <data key="d4">OK != initEncoder(</data>
</node>
<node id="if_2">
  <data key="d3">ControlStructure_if</data>
  <data key="d4">(inputBufferHeader-&gt;nFlags &amp; OMX_BUFFERFLAG_EOS</data>
</node>
<node id="if_3">
  <data key="d3">ControlStructure_if</data>
  <data key="d4">mInputDataIsMeta</data>
</node>
<node id="if_4">
  <data key="d3">ControlStructure_if</data>
  <data key="d4">source == NULL</data>
</node>
<node id="if_5">
  <data key="d3">ControlStructure_if</data>
  <data key="d4">mColorFormat == OMX_COLOR_FormatYUV420SemiPlanar</data>
</node>
<node id="if_6">
  <data key="d3">ControlStructure_if</data>
  <data key="d4">mTemporalPatternLength &gt; 0</data>
</node>
<node id="if_7">
  <data key="d3">ControlStructure_if</data>
  <data key="d4">mKeyFrameRequested</data>
</node>
<node id="if_8">
  <data key="d3">ControlStructure_if</data>
  <data key="d4">mBitrateUpdated</data>
</node>
<node id="if_9">
  <data key="d3">ControlStructure_if</data>
  <data key="d4">res != VPX_CODEC_OK</data>
</node>
<node id="if_10">
  <data key="d3">ControlStructure_if</data>
  <data key="d4">inputBufferHeader-&gt;nTimeStamp &gt; mLastTimestamp</data>
</node>
<node id="if_11">
  <data key="d3">ControlStructure_if</data>
  <data key="d4">codec_return != VPX_CODEC_OK</data>
</node>
<node id="if_12">
  <data key="d3">ControlStructure_if</data>
  <data key="d4">encoded_packet-&gt;kind == VPX_CODEC_CX_FRAME_PKT</data>
</node>
<node id="if_13">
  <data key="d3">ControlStructure_if</data>
  <data key="d4">encoded_packet-&gt;data.frame.flags &amp; VPX_FRAME_IS_KEY</data>
</node>
<node id="if_14">
  <data key="d3">ControlStructure_if</data>
  <data key="d4">inputBufferHeader-&gt;nFlags &amp; OMX_BUFFERFLAG_EOS</data>
</node>
<node id="while_15">
  <data key="d3">ControlStructure_while</data>
  <data key="d4">!inputBufferInfoQueue.empty(</data>
</node>
<node id="while_16">
  <data key="d3">ControlStructure_while</data>
  <data key="d4">(encoded_packet = vpx_codec_get_cx_data(
                        mCodecContext, &amp;encoded_packet_iterator</data>
</node>
<edge source="onQueueFilled" target="frameDuration">
  <data key="d5">declares</data>
</edge>
<edge source="onQueueFilled" target="res">
  <data key="d5">declares</data>
</edge>
<edge source="onQueueFilled" target="source">
  <data key="d5">declares</data>
</edge>
<edge source="onQueueFilled" target="codec_return">
  <data key="d5">declares</data>
</edge>
<edge source="onQueueFilled" target="encoded_packet_iterator">
  <data key="d5">declares</data>
</edge>
<edge source="onQueueFilled" target="raw_frame">
  <data key="d5">declares</data>
</edge>
<edge source="onQueueFilled" target="flags">
  <data key="d5">declares</data>
</edge>
<edge source="onQueueFilled" target="ConvertYUV420SemiPlanarToYUV420Planar">
  <data key="d5">calls</data>
</edge>
<edge source="onQueueFilled" target="notifyEmptyBufferDone">
  <data key="d5">calls</data>
</edge>
<edge source="onQueueFilled" target="vpx_img_wrap">
  <data key="d5">calls</data>
</edge>
<edge source="onQueueFilled" target="vpx_codec_enc_config_set">
  <data key="d5">calls</data>
</edge>
<edge source="onQueueFilled" target="vpx_codec_encode">
  <data key="d5">calls</data>
</edge>
<edge source="onQueueFilled" target="notify">
  <data key="d5">calls</data>
</edge>
<edge source="onQueueFilled" target="notifyFillBufferDone">
  <data key="d5">calls</data>
</edge>
<edge source="onQueueFilled" target="begin">
  <data key="d5">calls</data>
</edge>
<edge source="onQueueFilled" target="getPortQueue">
  <data key="d5">calls</data>
</edge>
<edge source="onQueueFilled" target="extractGraphicBuffer">
  <data key="d5">calls</data>
</edge>
<edge source="onQueueFilled" target="erase">
  <data key="d5">calls</data>
</edge>
<edge source="onQueueFilled" target="ALOGE">
  <data key="d5">calls</data>
</edge>
<edge source="onQueueFilled" target="getEncodeFlags">
  <data key="d5">calls</data>
</edge>
<edge source="onQueueFilled" target="memcpy">
  <data key="d5">calls</data>
</edge>
<edge source="onQueueFilled" target="if_0">
  <data key="d5">contains</data>
</edge>
<edge source="onQueueFilled" target="if_1">
  <data key="d5">contains</data>
</edge>
<edge source="onQueueFilled" target="if_2">
  <data key="d5">contains</data>
</edge>
<edge source="onQueueFilled" target="if_3">
  <data key="d5">contains</data>
</edge>
<edge source="onQueueFilled" target="if_4">
  <data key="d5">contains</data>
</edge>
<edge source="onQueueFilled" target="if_5">
  <data key="d5">contains</data>
</edge>
<edge source="onQueueFilled" target="if_6">
  <data key="d5">contains</data>
</edge>
<edge source="onQueueFilled" target="if_7">
  <data key="d5">contains</data>
</edge>
<edge source="onQueueFilled" target="if_8">
  <data key="d5">contains</data>
</edge>
<edge source="onQueueFilled" target="if_9">
  <data key="d5">contains</data>
</edge>
<edge source="onQueueFilled" target="if_10">
  <data key="d5">contains</data>
</edge>
<edge source="onQueueFilled" target="if_11">
  <data key="d5">contains</data>
</edge>
<edge source="onQueueFilled" target="if_12">
  <data key="d5">contains</data>
</edge>
<edge source="onQueueFilled" target="if_13">
  <data key="d5">contains</data>
</edge>
<edge source="onQueueFilled" target="if_14">
  <data key="d5">contains</data>
</edge>
<edge source="onQueueFilled" target="while_15">
  <data key="d5">contains</data>
</edge>
<edge source="onQueueFilled" target="while_16">
  <data key="d5">contains</data>
</edge>
<edge source="frameDuration" target="vpx_codec_encode">
  <data key="d5">used_as_parameter</data>
</edge>
<edge source="frameDuration" target="if_10">
  <data key="d5">used_in_body</data>
</edge>
<edge source="frameDuration" target="while_15">
  <data key="d5">used_in_body</data>
</edge>
<edge source="res" target="if_9">
  <data key="d5">used_in_body</data>
</edge>
<edge source="res" target="ALOGE">
  <data key="d5">used_as_parameter</data>
</edge>
<edge source="res" target="if_8">
  <data key="d5">used_in_body</data>
</edge>
<edge source="res" target="while_15">
  <data key="d5">used_in_body</data>
</edge>
<edge source="source" target="if_4">
  <data key="d5">used_in_condition</data>
</edge>
<edge source="source" target="ConvertYUV420SemiPlanarToYUV420Planar">
  <data key="d5">used_as_parameter</data>
</edge>
<edge source="source" target="extractGraphicBuffer">
  <data key="d5">used_as_parameter</data>
</edge>
<edge source="source" target="if_3">
  <data key="d5">used_in_body</data>
</edge>
<edge source="source" target="if_5">
  <data key="d5">used_in_body</data>
</edge>
<edge source="source" target="while_15">
  <data key="d5">used_in_body</data>
</edge>
<edge source="codec_return" target="if_11">
  <data key="d5">used_in_condition</data>
</edge>
<edge source="codec_return" target="while_15">
  <data key="d5">used_in_body</data>
</edge>
<edge source="encoded_packet_iterator" target="while_16">
  <data key="d5">used_in_condition</data>
</edge>
<edge source="encoded_packet_iterator" target="while_15">
  <data key="d5">used_in_body</data>
</edge>
<edge source="raw_frame" target="vpx_img_wrap">
  <data key="d5">used_as_parameter</data>
</edge>
<edge source="raw_frame" target="vpx_codec_encode">
  <data key="d5">used_as_parameter</data>
</edge>
<edge source="raw_frame" target="while_15">
  <data key="d5">used_in_body</data>
</edge>
<edge source="flags" target="if_13">
  <data key="d5">used_in_condition</data>
</edge>
<edge source="flags" target="vpx_codec_encode">
  <data key="d5">used_as_parameter</data>
</edge>
<edge source="flags" target="if_6">
  <data key="d5">used_in_body</data>
</edge>
<edge source="flags" target="if_7">
  <data key="d5">used_in_body</data>
</edge>
<edge source="flags" target="if_12">
  <data key="d5">used_in_body</data>
</edge>
<edge source="flags" target="while_15">
  <data key="d5">used_in_body</data>
</edge>
<edge source="flags" target="while_16">
  <data key="d5">used_in_body</data>
</edge>
</graph></graphml>