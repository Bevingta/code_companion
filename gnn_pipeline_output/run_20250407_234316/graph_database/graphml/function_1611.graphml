<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"><key id="d6" for="edge" attr.name="type" attr.type="string"/>
<key id="d5" for="node" attr.name="condition" attr.type="string"/>
<key id="d4" for="node" attr.name="type" attr.type="string"/>
<key id="d3" for="graph" attr.name="severity" attr.type="string"/>
<key id="d2" for="graph" attr.name="cvss" attr.type="string"/>
<key id="d1" for="graph" attr.name="cve" attr.type="string"/>
<key id="d0" for="graph" attr.name="potential_buffer_overflow" attr.type="boolean"/>
<graph edgedefault="directed"><data key="d0">True</data>
<data key="d1">CVE-2017-13028</data>
<data key="d2">7.5</data>
<data key="d3">HIGH</data>
<node id="bootp_print">
  <data key="d4">FunctionDefinition</data>
</node>
<node id="length">
  <data key="d4">Variable</data>
</node>
<node id="ul">
  <data key="d4">Variable</data>
</node>
<node id="vm_cmu">
  <data key="d4">Variable</data>
</node>
<node id="cp">
  <data key="d4">Variable</data>
</node>
<node id="bp">
  <data key="d4">Variable</data>
</node>
<node id="vm_rfc1048">
  <data key="d4">Variable</data>
</node>
<node id="EXTRACT_32BITS">
  <data key="d4">FunctionCall</data>
</node>
<node id="ND_TCHECK">
  <data key="d4">FunctionCall</data>
</node>
<node id="ND_PRINT">
  <data key="d4">FunctionCall</data>
</node>
<node id="address">
  <data key="d4">FunctionCall</data>
</node>
<node id="ND_TCHECK2">
  <data key="d4">FunctionCall</data>
</node>
<node id="1">
  <data key="d4">FunctionCall</data>
</node>
<node id="if_0">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">bp-&gt;bp_htype == 1 &amp;&amp; bp-&gt;bp_hlen == 6 &amp;&amp; bp-&gt;bp_op == BOOTPREQUEST</data>
</node>
<node id="if_1">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!ndo-&gt;ndo_vflag</data>
</node>
<node id="if_2">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">bp-&gt;bp_htype != 1</data>
</node>
<node id="if_3">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">bp-&gt;bp_htype != 1 || bp-&gt;bp_hlen != 6</data>
</node>
<node id="if_4">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">bp-&gt;bp_hops</data>
</node>
<node id="if_5">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">EXTRACT_32BITS(&amp;bp-&gt;bp_xid</data>
</node>
<node id="if_6">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">EXTRACT_16BITS(&amp;bp-&gt;bp_secs</data>
</node>
<node id="if_7">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">ndo-&gt;ndo_vflag &gt; 1</data>
</node>
<node id="if_8">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">EXTRACT_32BITS(&amp;bp-&gt;bp_ciaddr.s_addr</data>
</node>
<node id="if_9">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">EXTRACT_32BITS(&amp;bp-&gt;bp_yiaddr.s_addr</data>
</node>
<node id="if_10">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">EXTRACT_32BITS(&amp;bp-&gt;bp_siaddr.s_addr</data>
</node>
<node id="if_11">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">EXTRACT_32BITS(&amp;bp-&gt;bp_giaddr.s_addr</data>
</node>
<node id="if_12">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">bp-&gt;bp_htype == 1 &amp;&amp; bp-&gt;bp_hlen == 6</data>
</node>
<node id="if_13">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">*bp-&gt;bp_sname</data>
</node>
<node id="if_14">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">fn_printztn(ndo, bp-&gt;bp_sname, (u_int</data>
</node>
<node id="if_15">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">*bp-&gt;bp_file</data>
</node>
<node id="if_16">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">fn_printztn(ndo, bp-&gt;bp_file, (u_int</data>
</node>
<node id="if_17">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">memcmp((const char *</data>
</node>
<node id="if_18">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">memcmp((const char *</data>
</node>
<node id="if_19">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">ul != 0</data>
</node>
<edge source="bootp_print" target="length">
  <data key="d6">declares</data>
</edge>
<edge source="bootp_print" target="ul">
  <data key="d6">declares</data>
</edge>
<edge source="bootp_print" target="vm_cmu">
  <data key="d6">declares</data>
</edge>
<edge source="bootp_print" target="cp">
  <data key="d6">declares</data>
</edge>
<edge source="bootp_print" target="bp">
  <data key="d6">declares</data>
</edge>
<edge source="bootp_print" target="vm_rfc1048">
  <data key="d6">declares</data>
</edge>
<edge source="bootp_print" target="EXTRACT_32BITS">
  <data key="d6">calls</data>
</edge>
<edge source="bootp_print" target="ND_TCHECK">
  <data key="d6">calls</data>
</edge>
<edge source="bootp_print" target="ND_PRINT">
  <data key="d6">calls</data>
</edge>
<edge source="bootp_print" target="address">
  <data key="d6">calls</data>
</edge>
<edge source="bootp_print" target="ND_TCHECK2">
  <data key="d6">calls</data>
</edge>
<edge source="bootp_print" target="1">
  <data key="d6">calls</data>
</edge>
<edge source="bootp_print" target="if_0">
  <data key="d6">contains</data>
</edge>
<edge source="bootp_print" target="if_1">
  <data key="d6">contains</data>
</edge>
<edge source="bootp_print" target="if_2">
  <data key="d6">contains</data>
</edge>
<edge source="bootp_print" target="if_3">
  <data key="d6">contains</data>
</edge>
<edge source="bootp_print" target="if_4">
  <data key="d6">contains</data>
</edge>
<edge source="bootp_print" target="if_5">
  <data key="d6">contains</data>
</edge>
<edge source="bootp_print" target="if_6">
  <data key="d6">contains</data>
</edge>
<edge source="bootp_print" target="if_7">
  <data key="d6">contains</data>
</edge>
<edge source="bootp_print" target="if_8">
  <data key="d6">contains</data>
</edge>
<edge source="bootp_print" target="if_9">
  <data key="d6">contains</data>
</edge>
<edge source="bootp_print" target="if_10">
  <data key="d6">contains</data>
</edge>
<edge source="bootp_print" target="if_11">
  <data key="d6">contains</data>
</edge>
<edge source="bootp_print" target="if_12">
  <data key="d6">contains</data>
</edge>
<edge source="bootp_print" target="if_13">
  <data key="d6">contains</data>
</edge>
<edge source="bootp_print" target="if_14">
  <data key="d6">contains</data>
</edge>
<edge source="bootp_print" target="if_15">
  <data key="d6">contains</data>
</edge>
<edge source="bootp_print" target="if_16">
  <data key="d6">contains</data>
</edge>
<edge source="bootp_print" target="if_17">
  <data key="d6">contains</data>
</edge>
<edge source="bootp_print" target="if_18">
  <data key="d6">contains</data>
</edge>
<edge source="bootp_print" target="if_19">
  <data key="d6">contains</data>
</edge>
<edge source="length" target="ND_PRINT">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="length" target="bootp_print">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="ul" target="if_19">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="ul" target="ND_PRINT">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="ul" target="if_17">
  <data key="d6">used_in_body</data>
</edge>
<edge source="ul" target="if_18">
  <data key="d6">used_in_body</data>
</edge>
<edge source="cp" target="bootp_print">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="bp" target="if_0">
  <data key="d6">used_in_body</data>
</edge>
<edge source="bp" target="if_2">
  <data key="d6">used_in_body</data>
</edge>
<edge source="bp" target="if_3">
  <data key="d6">used_in_body</data>
</edge>
<edge source="bp" target="if_4">
  <data key="d6">used_in_body</data>
</edge>
<edge source="bp" target="if_5">
  <data key="d6">used_in_body</data>
</edge>
<edge source="bp" target="if_6">
  <data key="d6">used_in_body</data>
</edge>
<edge source="bp" target="if_8">
  <data key="d6">used_in_body</data>
</edge>
<edge source="bp" target="if_9">
  <data key="d6">used_in_body</data>
</edge>
<edge source="bp" target="if_10">
  <data key="d6">used_in_body</data>
</edge>
<edge source="bp" target="if_11">
  <data key="d6">used_in_body</data>
</edge>
<edge source="bp" target="if_12">
  <data key="d6">used_in_body</data>
</edge>
<edge source="bp" target="if_13">
  <data key="d6">used_in_body</data>
</edge>
<edge source="bp" target="if_14">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="bp" target="if_15">
  <data key="d6">used_in_body</data>
</edge>
<edge source="bp" target="if_16">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="bp" target="EXTRACT_32BITS">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="bp" target="ND_TCHECK">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="bp" target="ND_PRINT">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="bp" target="ND_TCHECK2">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="bp" target="if_1">
  <data key="d6">used_in_body</data>
</edge>
<edge source="bp" target="if_7">
  <data key="d6">used_in_body</data>
</edge>
<edge source="bp" target="if_17">
  <data key="d6">used_in_body</data>
</edge>
<edge source="bp" target="if_18">
  <data key="d6">used_in_body</data>
</edge>
</graph></graphml>