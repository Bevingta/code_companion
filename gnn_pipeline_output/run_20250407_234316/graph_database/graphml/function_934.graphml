<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"><key id="d6" for="edge" attr.name="type" attr.type="string"/>
<key id="d5" for="node" attr.name="condition" attr.type="string"/>
<key id="d4" for="node" attr.name="type" attr.type="string"/>
<key id="d3" for="graph" attr.name="severity" attr.type="string"/>
<key id="d2" for="graph" attr.name="cvss" attr.type="string"/>
<key id="d1" for="graph" attr.name="cve" attr.type="string"/>
<key id="d0" for="graph" attr.name="pointer_arithmetic" attr.type="boolean"/>
<graph edgedefault="directed"><data key="d0">True</data>
<data key="d1">CVE-2017-12668</data>
<data key="d2">6.8</data>
<data key="d3">MEDIUM</data>
<node id="WritePCXImage">
  <data key="d4">FunctionDefinition</data>
</node>
<node id="q">
  <data key="d4">Variable</data>
</node>
<node id="message">
  <data key="d4">Variable</data>
</node>
<node id="y">
  <data key="d4">Variable</data>
</node>
<node id="length">
  <data key="d4">Variable</data>
</node>
<node id="GetVirtualMemoryBlob">
  <data key="d4">FunctionCall</data>
</node>
<node id="RelinquishMagickMemory">
  <data key="d4">FunctionCall</data>
</node>
<node id="CloseBlob">
  <data key="d4">FunctionCall</data>
</node>
<node id="AcquireQuantumMemory">
  <data key="d4">FunctionCall</data>
</node>
<node id="GetPixelIndex">
  <data key="d4">FunctionCall</data>
</node>
<node id="DestroyString">
  <data key="d4">FunctionCall</data>
</node>
<node id="assert">
  <data key="d4">FunctionCall</data>
</node>
<node id="memset">
  <data key="d4">FunctionCall</data>
</node>
<node id="WriteBlobLSBShort">
  <data key="d4">FunctionCall</data>
</node>
<node id="RelinquishVirtualMemory">
  <data key="d4">FunctionCall</data>
</node>
<node id="GetVirtualPixels">
  <data key="d4">FunctionCall</data>
</node>
<node id="ThrowMagickException">
  <data key="d4">FunctionCall</data>
</node>
<node id="SetImageProgress">
  <data key="d4">FunctionCall</data>
</node>
<node id="WriteBlobByte">
  <data key="d4">FunctionCall</data>
</node>
<node id="GetExceptionMessage">
  <data key="d4">FunctionCall</data>
</node>
<node id="AcquireVirtualMemory">
  <data key="d4">FunctionCall</data>
</node>
<node id="ScaleQuantumToChar">
  <data key="d4">FunctionCall</data>
</node>
<node id="TransformImageColorspace">
  <data key="d4">FunctionCall</data>
</node>
<node id="OpenBlob">
  <data key="d4">FunctionCall</data>
</node>
<node id="GetVirtualIndexQueue">
  <data key="d4">FunctionCall</data>
</node>
<node id="WriteBlob">
  <data key="d4">FunctionCall</data>
</node>
<node id="WriteBlobLSBLong">
  <data key="d4">FunctionCall</data>
</node>
<node id="SyncNextImageInList">
  <data key="d4">FunctionCall</data>
</node>
<node id="SeekBlob">
  <data key="d4">FunctionCall</data>
</node>
<node id="if_0">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">image-&gt;debug != MagickFalse</data>
</node>
<node id="if_1">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">status == MagickFalse</data>
</node>
<node id="if_2">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">(LocaleCompare(image_info-&gt;magick,"DCX"</data>
</node>
<node id="if_3">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">page_table == (MagickOffsetType *</data>
</node>
<node id="if_4">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">page_table != (MagickOffsetType *</data>
</node>
<node id="if_5">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">(image-&gt;storage_class == PseudoClass</data>
</node>
<node id="if_6">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">(image-&gt;storage_class == DirectClass</data>
</node>
<node id="if_7">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">image-&gt;matte != MagickFalse</data>
</node>
<node id="if_8">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">pcx_colormap == (unsigned char *</data>
</node>
<node id="if_9">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">(image-&gt;storage_class == PseudoClass</data>
</node>
<node id="if_10">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">pixel_info == (MemoryInfo *</data>
</node>
<node id="if_11">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">(image-&gt;storage_class == DirectClass</data>
</node>
<node id="if_12">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">p == (const PixelPacket *</data>
</node>
<node id="if_13">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">PCXWritePixels(&amp;pcx_info,pixels,image</data>
</node>
<node id="if_14">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">image-&gt;previous == (Image *</data>
</node>
<node id="if_15">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">status == MagickFalse</data>
</node>
<node id="if_16">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">pcx_info.bits_per_pixel &gt; 1</data>
</node>
<node id="if_17">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">p == (const PixelPacket *</data>
</node>
<node id="if_18">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">PCXWritePixels(&amp;pcx_info,pixels,image</data>
</node>
<node id="if_19">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">image-&gt;previous == (Image *</data>
</node>
<node id="if_20">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">status == MagickFalse</data>
</node>
<node id="if_21">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">p == (const PixelPacket *</data>
</node>
<node id="if_22">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">GetPixelLuma(image,p</data>
</node>
<node id="if_23">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">bit == 8</data>
</node>
<node id="if_24">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">bit != 0</data>
</node>
<node id="if_25">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">PCXWritePixels(&amp;pcx_info,pixels,image</data>
</node>
<node id="if_26">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">image-&gt;previous == (Image *</data>
</node>
<node id="if_27">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">status == MagickFalse</data>
</node>
<node id="if_28">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">page_table == (MagickOffsetType *</data>
</node>
<node id="if_29">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">scene &gt;= 1023</data>
</node>
<node id="if_30">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">GetNextImageInList(image</data>
</node>
<node id="if_31">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">status == MagickFalse</data>
</node>
<node id="if_32">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">page_table != (MagickOffsetType *</data>
</node>
<node id="if_33">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">offset &lt; 0</data>
</node>
<node id="if_34">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">status == MagickFalse</data>
</node>
<node id="for_35">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">scene=0; scene &lt; 1024; scene++</data>
</node>
<node id="for_36">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">i=0; i &lt; (ssize_t</data>
</node>
<node id="for_37">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">i=0; i &lt; 58; i++</data>
</node>
<node id="for_38">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">y=0; y &lt; (ssize_t</data>
</node>
<node id="for_39">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">i=0; i &lt; pcx_info.planes; i++</data>
</node>
<node id="for_40">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">x=0; x &lt; (ssize_t</data>
</node>
<node id="for_41">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">x=0; x &lt; (ssize_t</data>
</node>
<node id="for_42">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">x=0; x &lt; (ssize_t</data>
</node>
<node id="for_43">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">x=(ssize_t</data>
</node>
<node id="for_44">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">y=0; y &lt; (ssize_t</data>
</node>
<node id="for_45">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">x=0; x &lt; (ssize_t</data>
</node>
<node id="for_46">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">y=0; y &lt; (ssize_t</data>
</node>
<node id="for_47">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">x=0; x &lt; (ssize_t</data>
</node>
<node id="for_48">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">i=0; i &lt;= (ssize_t</data>
</node>
<node id="while_49">
  <data key="d4">ControlStructure_while</data>
  <data key="d5">image_info-&gt;adjoin != MagickFalse</data>
</node>
<node id="switch_50">
  <data key="d4">ControlStructure_switch</data>
  <data key="d5">image-&gt;units</data>
</node>
<node id="switch_51">
  <data key="d4">ControlStructure_switch</data>
  <data key="d5">(int</data>
</node>
<edge source="WritePCXImage" target="q">
  <data key="d6">declares</data>
</edge>
<edge source="WritePCXImage" target="message">
  <data key="d6">declares</data>
</edge>
<edge source="WritePCXImage" target="y">
  <data key="d6">declares</data>
</edge>
<edge source="WritePCXImage" target="length">
  <data key="d6">declares</data>
</edge>
<edge source="WritePCXImage" target="GetVirtualMemoryBlob">
  <data key="d6">calls</data>
</edge>
<edge source="WritePCXImage" target="RelinquishMagickMemory">
  <data key="d6">calls</data>
</edge>
<edge source="WritePCXImage" target="CloseBlob">
  <data key="d6">calls</data>
</edge>
<edge source="WritePCXImage" target="AcquireQuantumMemory">
  <data key="d6">calls</data>
</edge>
<edge source="WritePCXImage" target="GetPixelIndex">
  <data key="d6">calls</data>
</edge>
<edge source="WritePCXImage" target="DestroyString">
  <data key="d6">calls</data>
</edge>
<edge source="WritePCXImage" target="assert">
  <data key="d6">calls</data>
</edge>
<edge source="WritePCXImage" target="memset">
  <data key="d6">calls</data>
</edge>
<edge source="WritePCXImage" target="WriteBlobLSBShort">
  <data key="d6">calls</data>
</edge>
<edge source="WritePCXImage" target="RelinquishVirtualMemory">
  <data key="d6">calls</data>
</edge>
<edge source="WritePCXImage" target="GetVirtualPixels">
  <data key="d6">calls</data>
</edge>
<edge source="WritePCXImage" target="ThrowMagickException">
  <data key="d6">calls</data>
</edge>
<edge source="WritePCXImage" target="SetImageProgress">
  <data key="d6">calls</data>
</edge>
<edge source="WritePCXImage" target="WriteBlobByte">
  <data key="d6">calls</data>
</edge>
<edge source="WritePCXImage" target="GetExceptionMessage">
  <data key="d6">calls</data>
</edge>
<edge source="WritePCXImage" target="AcquireVirtualMemory">
  <data key="d6">calls</data>
</edge>
<edge source="WritePCXImage" target="ScaleQuantumToChar">
  <data key="d6">calls</data>
</edge>
<edge source="WritePCXImage" target="TransformImageColorspace">
  <data key="d6">calls</data>
</edge>
<edge source="WritePCXImage" target="OpenBlob">
  <data key="d6">calls</data>
</edge>
<edge source="WritePCXImage" target="GetVirtualIndexQueue">
  <data key="d6">calls</data>
</edge>
<edge source="WritePCXImage" target="WriteBlob">
  <data key="d6">calls</data>
</edge>
<edge source="WritePCXImage" target="WriteBlobLSBLong">
  <data key="d6">calls</data>
</edge>
<edge source="WritePCXImage" target="SyncNextImageInList">
  <data key="d6">calls</data>
</edge>
<edge source="WritePCXImage" target="SeekBlob">
  <data key="d6">calls</data>
</edge>
<edge source="WritePCXImage" target="if_0">
  <data key="d6">contains</data>
</edge>
<edge source="WritePCXImage" target="if_1">
  <data key="d6">contains</data>
</edge>
<edge source="WritePCXImage" target="if_2">
  <data key="d6">contains</data>
</edge>
<edge source="WritePCXImage" target="if_3">
  <data key="d6">contains</data>
</edge>
<edge source="WritePCXImage" target="if_4">
  <data key="d6">contains</data>
</edge>
<edge source="WritePCXImage" target="if_5">
  <data key="d6">contains</data>
</edge>
<edge source="WritePCXImage" target="if_6">
  <data key="d6">contains</data>
</edge>
<edge source="WritePCXImage" target="if_7">
  <data key="d6">contains</data>
</edge>
<edge source="WritePCXImage" target="if_8">
  <data key="d6">contains</data>
</edge>
<edge source="WritePCXImage" target="if_9">
  <data key="d6">contains</data>
</edge>
<edge source="WritePCXImage" target="if_10">
  <data key="d6">contains</data>
</edge>
<edge source="WritePCXImage" target="if_11">
  <data key="d6">contains</data>
</edge>
<edge source="WritePCXImage" target="if_12">
  <data key="d6">contains</data>
</edge>
<edge source="WritePCXImage" target="if_13">
  <data key="d6">contains</data>
</edge>
<edge source="WritePCXImage" target="if_14">
  <data key="d6">contains</data>
</edge>
<edge source="WritePCXImage" target="if_15">
  <data key="d6">contains</data>
</edge>
<edge source="WritePCXImage" target="if_16">
  <data key="d6">contains</data>
</edge>
<edge source="WritePCXImage" target="if_17">
  <data key="d6">contains</data>
</edge>
<edge source="WritePCXImage" target="if_18">
  <data key="d6">contains</data>
</edge>
<edge source="WritePCXImage" target="if_19">
  <data key="d6">contains</data>
</edge>
<edge source="WritePCXImage" target="if_20">
  <data key="d6">contains</data>
</edge>
<edge source="WritePCXImage" target="if_21">
  <data key="d6">contains</data>
</edge>
<edge source="WritePCXImage" target="if_22">
  <data key="d6">contains</data>
</edge>
<edge source="WritePCXImage" target="if_23">
  <data key="d6">contains</data>
</edge>
<edge source="WritePCXImage" target="if_24">
  <data key="d6">contains</data>
</edge>
<edge source="WritePCXImage" target="if_25">
  <data key="d6">contains</data>
</edge>
<edge source="WritePCXImage" target="if_26">
  <data key="d6">contains</data>
</edge>
<edge source="WritePCXImage" target="if_27">
  <data key="d6">contains</data>
</edge>
<edge source="WritePCXImage" target="if_28">
  <data key="d6">contains</data>
</edge>
<edge source="WritePCXImage" target="if_29">
  <data key="d6">contains</data>
</edge>
<edge source="WritePCXImage" target="if_30">
  <data key="d6">contains</data>
</edge>
<edge source="WritePCXImage" target="if_31">
  <data key="d6">contains</data>
</edge>
<edge source="WritePCXImage" target="if_32">
  <data key="d6">contains</data>
</edge>
<edge source="WritePCXImage" target="if_33">
  <data key="d6">contains</data>
</edge>
<edge source="WritePCXImage" target="if_34">
  <data key="d6">contains</data>
</edge>
<edge source="WritePCXImage" target="for_35">
  <data key="d6">contains</data>
</edge>
<edge source="WritePCXImage" target="for_36">
  <data key="d6">contains</data>
</edge>
<edge source="WritePCXImage" target="for_37">
  <data key="d6">contains</data>
</edge>
<edge source="WritePCXImage" target="for_38">
  <data key="d6">contains</data>
</edge>
<edge source="WritePCXImage" target="for_39">
  <data key="d6">contains</data>
</edge>
<edge source="WritePCXImage" target="for_40">
  <data key="d6">contains</data>
</edge>
<edge source="WritePCXImage" target="for_41">
  <data key="d6">contains</data>
</edge>
<edge source="WritePCXImage" target="for_42">
  <data key="d6">contains</data>
</edge>
<edge source="WritePCXImage" target="for_43">
  <data key="d6">contains</data>
</edge>
<edge source="WritePCXImage" target="for_44">
  <data key="d6">contains</data>
</edge>
<edge source="WritePCXImage" target="for_45">
  <data key="d6">contains</data>
</edge>
<edge source="WritePCXImage" target="for_46">
  <data key="d6">contains</data>
</edge>
<edge source="WritePCXImage" target="for_47">
  <data key="d6">contains</data>
</edge>
<edge source="WritePCXImage" target="for_48">
  <data key="d6">contains</data>
</edge>
<edge source="WritePCXImage" target="while_49">
  <data key="d6">contains</data>
</edge>
<edge source="WritePCXImage" target="switch_50">
  <data key="d6">contains</data>
</edge>
<edge source="WritePCXImage" target="switch_51">
  <data key="d6">contains</data>
</edge>
<edge source="message" target="DestroyString">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="message" target="if_33">
  <data key="d6">used_in_body</data>
</edge>
<edge source="message" target="if_34">
  <data key="d6">used_in_body</data>
</edge>
<edge source="message" target="for_48">
  <data key="d6">used_in_body</data>
</edge>
<edge source="y" target="if_3">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="y" target="if_4">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="y" target="if_10">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="y" target="if_28">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="y" target="if_32">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="y" target="for_38">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="y" target="for_44">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="y" target="for_46">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="length" target="AcquireVirtualMemory">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="length" target="if_3">
  <data key="d6">used_in_body</data>
</edge>
<edge source="length" target="for_35">
  <data key="d6">used_in_body</data>
</edge>
</graph></graphml>