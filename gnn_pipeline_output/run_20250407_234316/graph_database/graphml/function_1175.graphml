<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"><key id="d7" for="edge" attr.name="type" attr.type="string"/>
<key id="d6" for="node" attr.name="condition" attr.type="string"/>
<key id="d5" for="node" attr.name="type" attr.type="string"/>
<key id="d4" for="graph" attr.name="severity" attr.type="string"/>
<key id="d3" for="graph" attr.name="cvss" attr.type="string"/>
<key id="d2" for="graph" attr.name="cve" attr.type="string"/>
<key id="d1" for="graph" attr.name="pointer_arithmetic" attr.type="boolean"/>
<key id="d0" for="graph" attr.name="potential_buffer_overflow" attr.type="boolean"/>
<graph edgedefault="directed"><data key="d0">True</data>
<data key="d1">True</data>
<data key="d2">CVE-2016-7520</data>
<data key="d3">4.3</data>
<data key="d4">MEDIUM</data>
<node id="WriteHDRImage">
  <data key="d5">FunctionDefinition</data>
</node>
<node id="length">
  <data key="d5">Variable</data>
</node>
<node id="property">
  <data key="d5">Variable</data>
</node>
<node id="gamma">
  <data key="d5">Variable</data>
</node>
<node id="exponent">
  <data key="d5">Variable</data>
</node>
<node id="header">
  <data key="d5">Variable</data>
</node>
<node id="RelinquishMagickMemory">
  <data key="d5">FunctionCall</data>
</node>
<node id="CloseBlob">
  <data key="d5">FunctionCall</data>
</node>
<node id="AcquireQuantumMemory">
  <data key="d5">FunctionCall</data>
</node>
<node id="GetImageProperty">
  <data key="d5">FunctionCall</data>
</node>
<node id="assert">
  <data key="d5">FunctionCall</data>
</node>
<node id="GetVirtualPixels">
  <data key="d5">FunctionCall</data>
</node>
<node id="SetImageProgress">
  <data key="d5">FunctionCall</data>
</node>
<node id="HDRWriteRunlengthPixels">
  <data key="d5">FunctionCall</data>
</node>
<node id="FormatLocaleString">
  <data key="d5">FunctionCall</data>
</node>
<node id="GetPixelChannels">
  <data key="d5">FunctionCall</data>
</node>
<node id="GetPixelRed">
  <data key="d5">FunctionCall</data>
</node>
<node id="ResetMagickMemory">
  <data key="d5">FunctionCall</data>
</node>
<node id="CopyMagickString">
  <data key="d5">FunctionCall</data>
</node>
<node id="OpenBlob">
  <data key="d5">FunctionCall</data>
</node>
<node id="GetPixelGreen">
  <data key="d5">FunctionCall</data>
</node>
<node id="WriteBlob">
  <data key="d5">FunctionCall</data>
</node>
<node id="frexp">
  <data key="d5">FunctionCall</data>
</node>
<node id="GetPixelBlue">
  <data key="d5">FunctionCall</data>
</node>
<node id="if_0">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">image-&gt;debug != MagickFalse</data>
</node>
<node id="if_1">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">status == MagickFalse</data>
</node>
<node id="if_2">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">IsRGBColorspace(image-&gt;colorspace</data>
</node>
<node id="if_3">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">(property != (const char *</data>
</node>
<node id="if_4">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">property != (const char *</data>
</node>
<node id="if_5">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">image-&gt;gamma != 0.0</data>
</node>
<node id="if_6">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">pixels == (unsigned char *</data>
</node>
<node id="if_7">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">p == (const Quantum *</data>
</node>
<node id="if_8">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">(image-&gt;columns &gt;= 8</data>
</node>
<node id="if_9">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">count != (ssize_t</data>
</node>
<node id="if_10">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">(QuantumScale*GetPixelGreen(image,p</data>
</node>
<node id="if_11">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">(QuantumScale*GetPixelBlue(image,p</data>
</node>
<node id="if_12">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">gamma &gt; MagickEpsilon</data>
</node>
<node id="if_13">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">(image-&gt;columns &gt;= 8</data>
</node>
<node id="if_14">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">(image-&gt;columns &gt;= 8</data>
</node>
<node id="if_15">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">count != (ssize_t</data>
</node>
<node id="if_16">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">status == MagickFalse</data>
</node>
<node id="for_17">
  <data key="d5">ControlStructure_for</data>
  <data key="d6">y=0; y &lt; (ssize_t</data>
</node>
<node id="for_18">
  <data key="d5">ControlStructure_for</data>
  <data key="d6">x=0; x &lt; (ssize_t</data>
</node>
<node id="for_19">
  <data key="d5">ControlStructure_for</data>
  <data key="d6">i=0; i &lt; 4; i++</data>
</node>
<edge source="WriteHDRImage" target="length">
  <data key="d7">declares</data>
</edge>
<edge source="WriteHDRImage" target="property">
  <data key="d7">declares</data>
</edge>
<edge source="WriteHDRImage" target="gamma">
  <data key="d7">declares</data>
</edge>
<edge source="WriteHDRImage" target="exponent">
  <data key="d7">declares</data>
</edge>
<edge source="WriteHDRImage" target="header">
  <data key="d7">declares</data>
</edge>
<edge source="WriteHDRImage" target="RelinquishMagickMemory">
  <data key="d7">calls</data>
</edge>
<edge source="WriteHDRImage" target="CloseBlob">
  <data key="d7">calls</data>
</edge>
<edge source="WriteHDRImage" target="AcquireQuantumMemory">
  <data key="d7">calls</data>
</edge>
<edge source="WriteHDRImage" target="GetImageProperty">
  <data key="d7">calls</data>
</edge>
<edge source="WriteHDRImage" target="assert">
  <data key="d7">calls</data>
</edge>
<edge source="WriteHDRImage" target="GetVirtualPixels">
  <data key="d7">calls</data>
</edge>
<edge source="WriteHDRImage" target="SetImageProgress">
  <data key="d7">calls</data>
</edge>
<edge source="WriteHDRImage" target="HDRWriteRunlengthPixels">
  <data key="d7">calls</data>
</edge>
<edge source="WriteHDRImage" target="FormatLocaleString">
  <data key="d7">calls</data>
</edge>
<edge source="WriteHDRImage" target="GetPixelChannels">
  <data key="d7">calls</data>
</edge>
<edge source="WriteHDRImage" target="GetPixelRed">
  <data key="d7">calls</data>
</edge>
<edge source="WriteHDRImage" target="ResetMagickMemory">
  <data key="d7">calls</data>
</edge>
<edge source="WriteHDRImage" target="CopyMagickString">
  <data key="d7">calls</data>
</edge>
<edge source="WriteHDRImage" target="OpenBlob">
  <data key="d7">calls</data>
</edge>
<edge source="WriteHDRImage" target="GetPixelGreen">
  <data key="d7">calls</data>
</edge>
<edge source="WriteHDRImage" target="WriteBlob">
  <data key="d7">calls</data>
</edge>
<edge source="WriteHDRImage" target="frexp">
  <data key="d7">calls</data>
</edge>
<edge source="WriteHDRImage" target="GetPixelBlue">
  <data key="d7">calls</data>
</edge>
<edge source="WriteHDRImage" target="if_0">
  <data key="d7">contains</data>
</edge>
<edge source="WriteHDRImage" target="if_1">
  <data key="d7">contains</data>
</edge>
<edge source="WriteHDRImage" target="if_2">
  <data key="d7">contains</data>
</edge>
<edge source="WriteHDRImage" target="if_3">
  <data key="d7">contains</data>
</edge>
<edge source="WriteHDRImage" target="if_4">
  <data key="d7">contains</data>
</edge>
<edge source="WriteHDRImage" target="if_5">
  <data key="d7">contains</data>
</edge>
<edge source="WriteHDRImage" target="if_6">
  <data key="d7">contains</data>
</edge>
<edge source="WriteHDRImage" target="if_7">
  <data key="d7">contains</data>
</edge>
<edge source="WriteHDRImage" target="if_8">
  <data key="d7">contains</data>
</edge>
<edge source="WriteHDRImage" target="if_9">
  <data key="d7">contains</data>
</edge>
<edge source="WriteHDRImage" target="if_10">
  <data key="d7">contains</data>
</edge>
<edge source="WriteHDRImage" target="if_11">
  <data key="d7">contains</data>
</edge>
<edge source="WriteHDRImage" target="if_12">
  <data key="d7">contains</data>
</edge>
<edge source="WriteHDRImage" target="if_13">
  <data key="d7">contains</data>
</edge>
<edge source="WriteHDRImage" target="if_14">
  <data key="d7">contains</data>
</edge>
<edge source="WriteHDRImage" target="if_15">
  <data key="d7">contains</data>
</edge>
<edge source="WriteHDRImage" target="if_16">
  <data key="d7">contains</data>
</edge>
<edge source="WriteHDRImage" target="for_17">
  <data key="d7">contains</data>
</edge>
<edge source="WriteHDRImage" target="for_18">
  <data key="d7">contains</data>
</edge>
<edge source="WriteHDRImage" target="for_19">
  <data key="d7">contains</data>
</edge>
<edge source="length" target="WriteBlob">
  <data key="d7">used_as_parameter</data>
</edge>
<edge source="length" target="if_6">
  <data key="d7">used_in_body</data>
</edge>
<edge source="length" target="if_14">
  <data key="d7">used_in_body</data>
</edge>
<edge source="length" target="for_17">
  <data key="d7">used_in_body</data>
</edge>
<edge source="property" target="if_3">
  <data key="d7">used_in_body</data>
</edge>
<edge source="property" target="if_4">
  <data key="d7">used_in_body</data>
</edge>
<edge source="property" target="FormatLocaleString">
  <data key="d7">used_as_parameter</data>
</edge>
<edge source="property" target="if_0">
  <data key="d7">used_in_body</data>
</edge>
<edge source="property" target="if_1">
  <data key="d7">used_in_body</data>
</edge>
<edge source="property" target="if_2">
  <data key="d7">used_in_body</data>
</edge>
<edge source="gamma" target="if_5">
  <data key="d7">used_in_body</data>
</edge>
<edge source="gamma" target="if_12">
  <data key="d7">used_in_body</data>
</edge>
<edge source="gamma" target="FormatLocaleString">
  <data key="d7">used_as_parameter</data>
</edge>
<edge source="gamma" target="frexp">
  <data key="d7">used_as_parameter</data>
</edge>
<edge source="gamma" target="if_6">
  <data key="d7">used_in_body</data>
</edge>
<edge source="gamma" target="if_9">
  <data key="d7">used_in_body</data>
</edge>
<edge source="gamma" target="if_10">
  <data key="d7">used_in_body</data>
</edge>
<edge source="gamma" target="if_11">
  <data key="d7">used_in_body</data>
</edge>
<edge source="gamma" target="for_17">
  <data key="d7">used_in_body</data>
</edge>
<edge source="gamma" target="for_18">
  <data key="d7">used_in_body</data>
</edge>
<edge source="exponent" target="frexp">
  <data key="d7">used_as_parameter</data>
</edge>
<edge source="exponent" target="if_6">
  <data key="d7">used_in_body</data>
</edge>
<edge source="exponent" target="if_9">
  <data key="d7">used_in_body</data>
</edge>
<edge source="exponent" target="if_10">
  <data key="d7">used_in_body</data>
</edge>
<edge source="exponent" target="if_11">
  <data key="d7">used_in_body</data>
</edge>
<edge source="exponent" target="if_12">
  <data key="d7">used_in_body</data>
</edge>
<edge source="exponent" target="for_17">
  <data key="d7">used_in_body</data>
</edge>
<edge source="exponent" target="for_18">
  <data key="d7">used_in_body</data>
</edge>
<edge source="header" target="FormatLocaleString">
  <data key="d7">used_as_parameter</data>
</edge>
<edge source="header" target="ResetMagickMemory">
  <data key="d7">used_as_parameter</data>
</edge>
<edge source="header" target="CopyMagickString">
  <data key="d7">used_as_parameter</data>
</edge>
<edge source="header" target="if_0">
  <data key="d7">used_in_body</data>
</edge>
<edge source="header" target="if_1">
  <data key="d7">used_in_body</data>
</edge>
<edge source="header" target="if_2">
  <data key="d7">used_in_body</data>
</edge>
<edge source="header" target="if_3">
  <data key="d7">used_in_body</data>
</edge>
<edge source="header" target="if_4">
  <data key="d7">used_in_body</data>
</edge>
<edge source="header" target="if_5">
  <data key="d7">used_in_body</data>
</edge>
</graph></graphml>