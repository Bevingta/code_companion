<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"><key id="d7" for="edge" attr.name="type" attr.type="string"/>
<key id="d6" for="node" attr.name="condition" attr.type="string"/>
<key id="d5" for="node" attr.name="type" attr.type="string"/>
<key id="d4" for="graph" attr.name="severity" attr.type="string"/>
<key id="d3" for="graph" attr.name="cvss" attr.type="string"/>
<key id="d2" for="graph" attr.name="cve" attr.type="string"/>
<key id="d1" for="graph" attr.name="pointer_arithmetic" attr.type="boolean"/>
<key id="d0" for="graph" attr.name="potential_buffer_overflow" attr.type="boolean"/>
<graph edgedefault="directed"><data key="d0">True</data>
<data key="d1">True</data>
<data key="d2">CVE-2018-8784</data>
<data key="d3">7.5</data>
<data key="d4">HIGH</data>
<node id="zgfx_decompress_segment">
  <data key="d5">FunctionDefinition</data>
</node>
<node id="segmentSize">
  <data key="d5">Variable</data>
</node>
<node id="cbSegment">
  <data key="d5">Variable</data>
</node>
<node id="inPrefix">
  <data key="d5">Variable</data>
</node>
<node id="opIndex">
  <data key="d5">Variable</data>
</node>
<node id="haveBits">
  <data key="d5">Variable</data>
</node>
<node id="zgfx_history_buffer_ring_write">
  <data key="d5">FunctionCall</data>
</node>
<node id="CopyMemory">
  <data key="d5">FunctionCall</data>
</node>
<node id="Stream_Pointer">
  <data key="d5">FunctionCall</data>
</node>
<node id="Stream_Read_UINT8">
  <data key="d5">FunctionCall</data>
</node>
<node id="zgfx_GetBits">
  <data key="d5">FunctionCall</data>
</node>
<node id="Stream_Seek">
  <data key="d5">FunctionCall</data>
</node>
<node id="header">
  <data key="d5">FunctionCall</data>
</node>
<node id="zgfx_history_buffer_ring_read">
  <data key="d5">FunctionCall</data>
</node>
<node id="if_0">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">(Stream_GetRemainingLength(stream</data>
</node>
<node id="if_1">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">!(flags &amp; PACKET_COMPRESSED</data>
</node>
<node id="if_2">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">inPrefix == ZGFX_TOKEN_TABLE[opIndex].prefixCode</data>
</node>
<node id="if_3">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">ZGFX_TOKEN_TABLE[opIndex].tokenType == 0</data>
</node>
<node id="if_4">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">++zgfx-&gt;HistoryIndex == zgfx-&gt;HistoryBufferSize</data>
</node>
<node id="if_5">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">distance != 0</data>
</node>
<node id="if_6">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">zgfx-&gt;bits == 0</data>
</node>
<node id="for_7">
  <data key="d5">ControlStructure_for</data>
  <data key="d6">opIndex = 0; ZGFX_TOKEN_TABLE[opIndex].prefixLength != 0; opIndex++</data>
</node>
<node id="while_8">
  <data key="d5">ControlStructure_while</data>
  <data key="d6">zgfx-&gt;cBitsRemaining</data>
</node>
<node id="while_9">
  <data key="d5">ControlStructure_while</data>
  <data key="d6">haveBits &lt; ZGFX_TOKEN_TABLE[opIndex].prefixLength</data>
</node>
<node id="while_10">
  <data key="d5">ControlStructure_while</data>
  <data key="d6">zgfx-&gt;bits == 1</data>
</node>
<edge source="zgfx_decompress_segment" target="segmentSize">
  <data key="d7">declares</data>
</edge>
<edge source="zgfx_decompress_segment" target="cbSegment">
  <data key="d7">declares</data>
</edge>
<edge source="zgfx_decompress_segment" target="inPrefix">
  <data key="d7">declares</data>
</edge>
<edge source="zgfx_decompress_segment" target="opIndex">
  <data key="d7">declares</data>
</edge>
<edge source="zgfx_decompress_segment" target="haveBits">
  <data key="d7">declares</data>
</edge>
<edge source="zgfx_decompress_segment" target="zgfx_history_buffer_ring_write">
  <data key="d7">calls</data>
</edge>
<edge source="zgfx_decompress_segment" target="CopyMemory">
  <data key="d7">calls</data>
</edge>
<edge source="zgfx_decompress_segment" target="Stream_Pointer">
  <data key="d7">calls</data>
</edge>
<edge source="zgfx_decompress_segment" target="Stream_Read_UINT8">
  <data key="d7">calls</data>
</edge>
<edge source="zgfx_decompress_segment" target="zgfx_GetBits">
  <data key="d7">calls</data>
</edge>
<edge source="zgfx_decompress_segment" target="Stream_Seek">
  <data key="d7">calls</data>
</edge>
<edge source="zgfx_decompress_segment" target="header">
  <data key="d7">calls</data>
</edge>
<edge source="zgfx_decompress_segment" target="zgfx_history_buffer_ring_read">
  <data key="d7">calls</data>
</edge>
<edge source="zgfx_decompress_segment" target="if_0">
  <data key="d7">contains</data>
</edge>
<edge source="zgfx_decompress_segment" target="if_1">
  <data key="d7">contains</data>
</edge>
<edge source="zgfx_decompress_segment" target="if_2">
  <data key="d7">contains</data>
</edge>
<edge source="zgfx_decompress_segment" target="if_3">
  <data key="d7">contains</data>
</edge>
<edge source="zgfx_decompress_segment" target="if_4">
  <data key="d7">contains</data>
</edge>
<edge source="zgfx_decompress_segment" target="if_5">
  <data key="d7">contains</data>
</edge>
<edge source="zgfx_decompress_segment" target="if_6">
  <data key="d7">contains</data>
</edge>
<edge source="zgfx_decompress_segment" target="for_7">
  <data key="d7">contains</data>
</edge>
<edge source="zgfx_decompress_segment" target="while_8">
  <data key="d7">contains</data>
</edge>
<edge source="zgfx_decompress_segment" target="while_9">
  <data key="d7">contains</data>
</edge>
<edge source="zgfx_decompress_segment" target="while_10">
  <data key="d7">contains</data>
</edge>
<edge source="segmentSize" target="zgfx_decompress_segment">
  <data key="d7">used_as_parameter</data>
</edge>
<edge source="cbSegment" target="zgfx_history_buffer_ring_write">
  <data key="d7">used_as_parameter</data>
</edge>
<edge source="cbSegment" target="CopyMemory">
  <data key="d7">used_as_parameter</data>
</edge>
<edge source="cbSegment" target="Stream_Seek">
  <data key="d7">used_as_parameter</data>
</edge>
<edge source="cbSegment" target="if_0">
  <data key="d7">used_in_body</data>
</edge>
<edge source="cbSegment" target="if_1">
  <data key="d7">used_in_body</data>
</edge>
<edge source="inPrefix" target="if_2">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="inPrefix" target="for_7">
  <data key="d7">used_in_body</data>
</edge>
<edge source="inPrefix" target="while_8">
  <data key="d7">used_in_body</data>
</edge>
<edge source="inPrefix" target="while_9">
  <data key="d7">used_in_body</data>
</edge>
<edge source="opIndex" target="if_2">
  <data key="d7">used_in_body</data>
</edge>
<edge source="opIndex" target="if_3">
  <data key="d7">used_in_body</data>
</edge>
<edge source="opIndex" target="for_7">
  <data key="d7">used_in_body</data>
</edge>
<edge source="opIndex" target="while_9">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="opIndex" target="zgfx_GetBits">
  <data key="d7">used_as_parameter</data>
</edge>
<edge source="opIndex" target="if_4">
  <data key="d7">used_in_body</data>
</edge>
<edge source="opIndex" target="while_8">
  <data key="d7">used_in_body</data>
</edge>
<edge source="haveBits" target="while_9">
  <data key="d7">used_in_body</data>
</edge>
<edge source="haveBits" target="for_7">
  <data key="d7">used_in_body</data>
</edge>
<edge source="haveBits" target="while_8">
  <data key="d7">used_in_body</data>
</edge>
</graph></graphml>