<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"><key id="d6" for="edge" attr.name="type" attr.type="string"/>
<key id="d5" for="node" attr.name="condition" attr.type="string"/>
<key id="d4" for="node" attr.name="type" attr.type="string"/>
<key id="d3" for="graph" attr.name="severity" attr.type="string"/>
<key id="d2" for="graph" attr.name="cvss" attr.type="string"/>
<key id="d1" for="graph" attr.name="cve" attr.type="string"/>
<key id="d0" for="graph" attr.name="pointer_arithmetic" attr.type="boolean"/>
<graph edgedefault="directed"><data key="d0">True</data>
<data key="d1">CVE-2016-4564</data>
<data key="d2">7.5</data>
<data key="d3">HIGH</data>
<node id="DrawDashPolygon">
  <data key="d4">FunctionDefinition</data>
</node>
<node id="i">
  <data key="d4">Variable</data>
</node>
<node id="number_vertices">
  <data key="d4">Variable</data>
</node>
<node id="DrawStrokePolygon">
  <data key="d4">FunctionCall</data>
</node>
<node id="DestroyDrawInfo">
  <data key="d4">FunctionCall</data>
</node>
<node id="RelinquishMagickMemory">
  <data key="d4">FunctionCall</data>
</node>
<node id="CloneDrawInfo">
  <data key="d4">FunctionCall</data>
</node>
<node id="AcquireQuantumMemory">
  <data key="d4">FunctionCall</data>
</node>
<node id="hypot">
  <data key="d4">FunctionCall</data>
</node>
<node id="ExpandAffine">
  <data key="d4">FunctionCall</data>
</node>
<node id="assert">
  <data key="d4">FunctionCall</data>
</node>
<node id="if_0">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">image-&gt;debug != MagickFalse</data>
</node>
<node id="if_1">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">dash_polygon == (PrimitiveInfo *</data>
</node>
<node id="if_2">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">draw_info-&gt;dash_pattern[n] &lt;= 0.0</data>
</node>
<node id="if_3">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">offset &gt; length</data>
</node>
<node id="if_4">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">offset &lt; length</data>
</node>
<node id="if_5">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">length == 0.0</data>
</node>
<node id="if_6">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">draw_info-&gt;dash_pattern[n] == 0.0</data>
</node>
<node id="if_7">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">(n &amp; 0x01</data>
</node>
<node id="if_8">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">(j+1</data>
</node>
<node id="if_9">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">draw_info-&gt;dash_pattern[n] == 0.0</data>
</node>
<node id="if_10">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">(n &amp; 0x01</data>
</node>
<node id="if_11">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">(total_length &lt;= maximum_length</data>
</node>
<node id="if_12">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">image-&gt;debug != MagickFalse</data>
</node>
<node id="for_13">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">i=0; primitive_info[i].primitive != UndefinedPrimitive; i++</data>
</node>
<node id="for_14">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">n=0; offset &gt; 0.0; j=0</data>
</node>
<node id="for_15">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">i=1; (i &lt; number_vertices</data>
</node>
<node id="for_16">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">total_length=0.0; (length &gt;= 0.0</data>
</node>
<edge source="DrawDashPolygon" target="i">
  <data key="d6">declares</data>
</edge>
<edge source="DrawDashPolygon" target="number_vertices">
  <data key="d6">declares</data>
</edge>
<edge source="DrawDashPolygon" target="DrawStrokePolygon">
  <data key="d6">calls</data>
</edge>
<edge source="DrawDashPolygon" target="DestroyDrawInfo">
  <data key="d6">calls</data>
</edge>
<edge source="DrawDashPolygon" target="RelinquishMagickMemory">
  <data key="d6">calls</data>
</edge>
<edge source="DrawDashPolygon" target="CloneDrawInfo">
  <data key="d6">calls</data>
</edge>
<edge source="DrawDashPolygon" target="AcquireQuantumMemory">
  <data key="d6">calls</data>
</edge>
<edge source="DrawDashPolygon" target="hypot">
  <data key="d6">calls</data>
</edge>
<edge source="DrawDashPolygon" target="ExpandAffine">
  <data key="d6">calls</data>
</edge>
<edge source="DrawDashPolygon" target="assert">
  <data key="d6">calls</data>
</edge>
<edge source="DrawDashPolygon" target="if_0">
  <data key="d6">contains</data>
</edge>
<edge source="DrawDashPolygon" target="if_1">
  <data key="d6">contains</data>
</edge>
<edge source="DrawDashPolygon" target="if_2">
  <data key="d6">contains</data>
</edge>
<edge source="DrawDashPolygon" target="if_3">
  <data key="d6">contains</data>
</edge>
<edge source="DrawDashPolygon" target="if_4">
  <data key="d6">contains</data>
</edge>
<edge source="DrawDashPolygon" target="if_5">
  <data key="d6">contains</data>
</edge>
<edge source="DrawDashPolygon" target="if_6">
  <data key="d6">contains</data>
</edge>
<edge source="DrawDashPolygon" target="if_7">
  <data key="d6">contains</data>
</edge>
<edge source="DrawDashPolygon" target="if_8">
  <data key="d6">contains</data>
</edge>
<edge source="DrawDashPolygon" target="if_9">
  <data key="d6">contains</data>
</edge>
<edge source="DrawDashPolygon" target="if_10">
  <data key="d6">contains</data>
</edge>
<edge source="DrawDashPolygon" target="if_11">
  <data key="d6">contains</data>
</edge>
<edge source="DrawDashPolygon" target="if_12">
  <data key="d6">contains</data>
</edge>
<edge source="DrawDashPolygon" target="for_13">
  <data key="d6">contains</data>
</edge>
<edge source="DrawDashPolygon" target="for_14">
  <data key="d6">contains</data>
</edge>
<edge source="DrawDashPolygon" target="for_15">
  <data key="d6">contains</data>
</edge>
<edge source="DrawDashPolygon" target="for_16">
  <data key="d6">contains</data>
</edge>
<edge source="i" target="if_0">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_1">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_2">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_6">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_9">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_11">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_12">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="for_13">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="for_15">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="number_vertices" target="for_15">
  <data key="d6">used_in_body</data>
</edge>
<edge source="number_vertices" target="if_6">
  <data key="d6">used_in_body</data>
</edge>
<edge source="number_vertices" target="for_16">
  <data key="d6">used_in_body</data>
</edge>
</graph></graphml>