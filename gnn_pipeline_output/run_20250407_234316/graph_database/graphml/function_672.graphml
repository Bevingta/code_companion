<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"><key id="d6" for="edge" attr.name="type" attr.type="string"/>
<key id="d5" for="node" attr.name="condition" attr.type="string"/>
<key id="d4" for="node" attr.name="type" attr.type="string"/>
<key id="d3" for="graph" attr.name="severity" attr.type="string"/>
<key id="d2" for="graph" attr.name="cvss" attr.type="string"/>
<key id="d1" for="graph" attr.name="cve" attr.type="string"/>
<key id="d0" for="graph" attr.name="pointer_arithmetic" attr.type="boolean"/>
<graph edgedefault="directed"><data key="d0">True</data>
<data key="d1">CVE-2016-5351</data>
<data key="d2">4.3</data>
<data key="d3">MEDIUM</data>
<node id="AirPDcapScanForKeys">
  <data key="d4">FunctionDefinition</data>
</node>
<node id="tot_len">
  <data key="d4">Variable</data>
</node>
<node id="offset">
  <data key="d4">Variable</data>
</node>
<node id="bodyLength">
  <data key="d4">Variable</data>
</node>
<node id="mac_header_len">
  <data key="d4">Variable</data>
</node>
<node id="length">
  <data key="d4">FunctionCall</data>
</node>
<node id="authentication">
  <data key="d4">FunctionCall</data>
</node>
<node id="pntoh16">
  <data key="d4">FunctionCall</data>
</node>
<node id="AIRPDCAP_DEBUG_TRACE_START">
  <data key="d4">FunctionCall</data>
</node>
<node id="0">
  <data key="d4">FunctionCall</data>
</node>
<node id="g_new">
  <data key="d4">FunctionCall</data>
</node>
<node id="Key">
  <data key="d4">FunctionCall</data>
</node>
<node id="valid">
  <data key="d4">FunctionCall</data>
</node>
<node id="g_snprintf">
  <data key="d4">FunctionCall</data>
</node>
<node id="AIRPDCAP_DEBUG_TRACE_END">
  <data key="d4">FunctionCall</data>
</node>
<node id="AIRPDCAP_DEBUG_PRINT_LINE">
  <data key="d4">FunctionCall</data>
</node>
<node id="AirPDcapGetSaPtr">
  <data key="d4">FunctionCall</data>
</node>
<node id="memcpy">
  <data key="d4">FunctionCall</data>
</node>
<node id="if_0">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">memcmp(data+offset, dot1x_header, 8</data>
</node>
<node id="if_1">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">data[offset+1]!=3</data>
</node>
<node id="if_2">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">(tot_len-offset-4</data>
</node>
<node id="if_3">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">/*pEAPKey-&gt;type!=0x1 &amp;&amp;*/ /* RC4 Key Descriptor Type (deprecated</data>
</node>
<node id="if_4">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">sa == NULL</data>
</node>
<node id="if_5">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">AirPDcapRsna4WHandshake(ctx, data, sa, offset, tot_len</data>
</node>
<node id="if_6">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">mac_header_len + GROUP_KEY_PAYLOAD_LEN_MIN &gt; tot_len</data>
</node>
<node id="if_7">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">AIRPDCAP_EAP_KEY(data[offset+1]</data>
</node>
<node id="if_8">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">sa == NULL</data>
</node>
<node id="if_9">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> (addr=AirPDcapGetStaAddress((const AIRPDCAP_MAC_FRAME_ADDR4 *</data>
</node>
<node id="if_10">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">sta_sa == NULL</data>
</node>
<node id="if_11">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">memcmp(data+offset, tdls_header, 10</data>
</node>
<node id="if_12">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">action!=1 &amp;&amp; action!=2</data>
</node>
<node id="if_13">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">status!=0</data>
</node>
<node id="if_14">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">data[offset] == 48</data>
</node>
<node id="if_15">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">data[offset] == 55</data>
</node>
<node id="if_16">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">data[offset] == 56</data>
</node>
<node id="if_17">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">data[offset] == 101</data>
</node>
<node id="if_18">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">tot_len &lt; offset + data[offset + 1] + 2</data>
</node>
<node id="if_19">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">offset_rsne == 0 || offset_fte == 0 ||
            offset_timeout == 0 || offset_link == 0</data>
</node>
<node id="if_20">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">memcmp(initiator, responder, AIRPDCAP_MAC_LEN</data>
</node>
<node id="if_21">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">sa == NULL</data>
</node>
<node id="if_22">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">sa-&gt;validKey</data>
</node>
<node id="if_23">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">memcmp(sa-&gt;wpa.nonce, data + offset_fte + 52, AIRPDCAP_WPA_NONCE_LEN</data>
</node>
<node id="if_24">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">AirPDcapTDLSDeriveKey(sa, data, offset_rsne, offset_fte, offset_timeout, offset_link, action</data>
</node>
<node id="while_25">
  <data key="d4">ControlStructure_while</data>
  <data key="d5">offset &lt; (tot_len - 2</data>
</node>
<edge source="AirPDcapScanForKeys" target="tot_len">
  <data key="d6">declares</data>
</edge>
<edge source="AirPDcapScanForKeys" target="offset">
  <data key="d6">declares</data>
</edge>
<edge source="AirPDcapScanForKeys" target="bodyLength">
  <data key="d6">declares</data>
</edge>
<edge source="AirPDcapScanForKeys" target="mac_header_len">
  <data key="d6">declares</data>
</edge>
<edge source="AirPDcapScanForKeys" target="length">
  <data key="d6">calls</data>
</edge>
<edge source="AirPDcapScanForKeys" target="authentication">
  <data key="d6">calls</data>
</edge>
<edge source="AirPDcapScanForKeys" target="pntoh16">
  <data key="d6">calls</data>
</edge>
<edge source="AirPDcapScanForKeys" target="AIRPDCAP_DEBUG_TRACE_START">
  <data key="d6">calls</data>
</edge>
<edge source="AirPDcapScanForKeys" target="0">
  <data key="d6">calls</data>
</edge>
<edge source="AirPDcapScanForKeys" target="g_new">
  <data key="d6">calls</data>
</edge>
<edge source="AirPDcapScanForKeys" target="Key">
  <data key="d6">calls</data>
</edge>
<edge source="AirPDcapScanForKeys" target="valid">
  <data key="d6">calls</data>
</edge>
<edge source="AirPDcapScanForKeys" target="g_snprintf">
  <data key="d6">calls</data>
</edge>
<edge source="AirPDcapScanForKeys" target="AIRPDCAP_DEBUG_TRACE_END">
  <data key="d6">calls</data>
</edge>
<edge source="AirPDcapScanForKeys" target="AIRPDCAP_DEBUG_PRINT_LINE">
  <data key="d6">calls</data>
</edge>
<edge source="AirPDcapScanForKeys" target="AirPDcapGetSaPtr">
  <data key="d6">calls</data>
</edge>
<edge source="AirPDcapScanForKeys" target="memcpy">
  <data key="d6">calls</data>
</edge>
<edge source="AirPDcapScanForKeys" target="if_0">
  <data key="d6">contains</data>
</edge>
<edge source="AirPDcapScanForKeys" target="if_1">
  <data key="d6">contains</data>
</edge>
<edge source="AirPDcapScanForKeys" target="if_2">
  <data key="d6">contains</data>
</edge>
<edge source="AirPDcapScanForKeys" target="if_3">
  <data key="d6">contains</data>
</edge>
<edge source="AirPDcapScanForKeys" target="if_4">
  <data key="d6">contains</data>
</edge>
<edge source="AirPDcapScanForKeys" target="if_5">
  <data key="d6">contains</data>
</edge>
<edge source="AirPDcapScanForKeys" target="if_6">
  <data key="d6">contains</data>
</edge>
<edge source="AirPDcapScanForKeys" target="if_7">
  <data key="d6">contains</data>
</edge>
<edge source="AirPDcapScanForKeys" target="if_8">
  <data key="d6">contains</data>
</edge>
<edge source="AirPDcapScanForKeys" target="if_9">
  <data key="d6">contains</data>
</edge>
<edge source="AirPDcapScanForKeys" target="if_10">
  <data key="d6">contains</data>
</edge>
<edge source="AirPDcapScanForKeys" target="if_11">
  <data key="d6">contains</data>
</edge>
<edge source="AirPDcapScanForKeys" target="if_12">
  <data key="d6">contains</data>
</edge>
<edge source="AirPDcapScanForKeys" target="if_13">
  <data key="d6">contains</data>
</edge>
<edge source="AirPDcapScanForKeys" target="if_14">
  <data key="d6">contains</data>
</edge>
<edge source="AirPDcapScanForKeys" target="if_15">
  <data key="d6">contains</data>
</edge>
<edge source="AirPDcapScanForKeys" target="if_16">
  <data key="d6">contains</data>
</edge>
<edge source="AirPDcapScanForKeys" target="if_17">
  <data key="d6">contains</data>
</edge>
<edge source="AirPDcapScanForKeys" target="if_18">
  <data key="d6">contains</data>
</edge>
<edge source="AirPDcapScanForKeys" target="if_19">
  <data key="d6">contains</data>
</edge>
<edge source="AirPDcapScanForKeys" target="if_20">
  <data key="d6">contains</data>
</edge>
<edge source="AirPDcapScanForKeys" target="if_21">
  <data key="d6">contains</data>
</edge>
<edge source="AirPDcapScanForKeys" target="if_22">
  <data key="d6">contains</data>
</edge>
<edge source="AirPDcapScanForKeys" target="if_23">
  <data key="d6">contains</data>
</edge>
<edge source="AirPDcapScanForKeys" target="if_24">
  <data key="d6">contains</data>
</edge>
<edge source="AirPDcapScanForKeys" target="while_25">
  <data key="d6">contains</data>
</edge>
<edge source="tot_len" target="if_2">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="tot_len" target="if_5">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="tot_len" target="if_6">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="tot_len" target="if_18">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="tot_len" target="while_25">
  <data key="d6">used_in_body</data>
</edge>
<edge source="tot_len" target="AirPDcapScanForKeys">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="tot_len" target="Key">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="tot_len" target="if_0">
  <data key="d6">used_in_body</data>
</edge>
<edge source="tot_len" target="if_11">
  <data key="d6">used_in_body</data>
</edge>
<edge source="offset" target="if_0">
  <data key="d6">used_in_body</data>
</edge>
<edge source="offset" target="if_1">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="offset" target="if_2">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="offset" target="if_5">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="offset" target="if_7">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="offset" target="if_11">
  <data key="d6">used_in_body</data>
</edge>
<edge source="offset" target="if_14">
  <data key="d6">used_in_body</data>
</edge>
<edge source="offset" target="if_15">
  <data key="d6">used_in_body</data>
</edge>
<edge source="offset" target="if_16">
  <data key="d6">used_in_body</data>
</edge>
<edge source="offset" target="if_17">
  <data key="d6">used_in_body</data>
</edge>
<edge source="offset" target="if_18">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="offset" target="if_19">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="offset" target="if_23">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="offset" target="if_24">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="offset" target="while_25">
  <data key="d6">used_in_body</data>
</edge>
<edge source="offset" target="pntoh16">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="offset" target="Key">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="bodyLength" target="if_0">
  <data key="d6">used_in_body</data>
</edge>
<edge source="mac_header_len" target="if_6">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="mac_header_len" target="AirPDcapScanForKeys">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="mac_header_len" target="if_0">
  <data key="d6">used_in_body</data>
</edge>
</graph></graphml>