<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"><key id="d6" for="edge" attr.name="type" attr.type="string"/>
<key id="d5" for="node" attr.name="condition" attr.type="string"/>
<key id="d4" for="node" attr.name="type" attr.type="string"/>
<key id="d3" for="graph" attr.name="severity" attr.type="string"/>
<key id="d2" for="graph" attr.name="cvss" attr.type="string"/>
<key id="d1" for="graph" attr.name="cve" attr.type="string"/>
<key id="d0" for="graph" attr.name="pointer_arithmetic" attr.type="boolean"/>
<graph edgedefault="directed"><data key="d0">True</data>
<data key="d1">CVE-2016-10054</data>
<data key="d2">6.8</data>
<data key="d3">MEDIUM</data>
<node id="WriteMAPImage">
  <data key="d4">FunctionDefinition</data>
</node>
<node id="q">
  <data key="d4">Variable</data>
</node>
<node id="y">
  <data key="d4">Variable</data>
</node>
<node id="GetVirtualIndexQueue">
  <data key="d4">FunctionCall</data>
</node>
<node id="WriteBlob">
  <data key="d4">FunctionCall</data>
</node>
<node id="GetImageQuantumDepth">
  <data key="d4">FunctionCall</data>
</node>
<node id="RelinquishMagickMemory">
  <data key="d4">FunctionCall</data>
</node>
<node id="CloseBlob">
  <data key="d4">FunctionCall</data>
</node>
<node id="AcquireQuantumMemory">
  <data key="d4">FunctionCall</data>
</node>
<node id="GetPixelIndex">
  <data key="d4">FunctionCall</data>
</node>
<node id="GetVirtualPixels">
  <data key="d4">FunctionCall</data>
</node>
<node id="TransformImageColorspace">
  <data key="d4">FunctionCall</data>
</node>
<node id="OpenBlob">
  <data key="d4">FunctionCall</data>
</node>
<node id="assert">
  <data key="d4">FunctionCall</data>
</node>
<node id="if_0">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">image-&gt;debug != MagickFalse</data>
</node>
<node id="if_1">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">status == MagickFalse</data>
</node>
<node id="if_2">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">IsPaletteImage(image,&amp;image-&gt;exception</data>
</node>
<node id="if_3">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">(pixels == (unsigned char *</data>
</node>
<node id="if_4">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">image-&gt;depth &lt;= 8</data>
</node>
<node id="if_5">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">p == (const PixelPacket *</data>
</node>
<node id="if_6">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">image-&gt;colors &gt; 256</data>
</node>
<node id="for_7">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">i=0; i &lt; (ssize_t</data>
</node>
<node id="for_8">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">i=0; i &lt; (ssize_t</data>
</node>
<node id="for_9">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">y=0; y &lt; (ssize_t</data>
</node>
<node id="for_10">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">x=0; x &lt; (ssize_t</data>
</node>
<edge source="WriteMAPImage" target="q">
  <data key="d6">declares</data>
</edge>
<edge source="WriteMAPImage" target="y">
  <data key="d6">declares</data>
</edge>
<edge source="WriteMAPImage" target="GetVirtualIndexQueue">
  <data key="d6">calls</data>
</edge>
<edge source="WriteMAPImage" target="WriteBlob">
  <data key="d6">calls</data>
</edge>
<edge source="WriteMAPImage" target="GetImageQuantumDepth">
  <data key="d6">calls</data>
</edge>
<edge source="WriteMAPImage" target="RelinquishMagickMemory">
  <data key="d6">calls</data>
</edge>
<edge source="WriteMAPImage" target="CloseBlob">
  <data key="d6">calls</data>
</edge>
<edge source="WriteMAPImage" target="AcquireQuantumMemory">
  <data key="d6">calls</data>
</edge>
<edge source="WriteMAPImage" target="GetPixelIndex">
  <data key="d6">calls</data>
</edge>
<edge source="WriteMAPImage" target="GetVirtualPixels">
  <data key="d6">calls</data>
</edge>
<edge source="WriteMAPImage" target="TransformImageColorspace">
  <data key="d6">calls</data>
</edge>
<edge source="WriteMAPImage" target="OpenBlob">
  <data key="d6">calls</data>
</edge>
<edge source="WriteMAPImage" target="assert">
  <data key="d6">calls</data>
</edge>
<edge source="WriteMAPImage" target="if_0">
  <data key="d6">contains</data>
</edge>
<edge source="WriteMAPImage" target="if_1">
  <data key="d6">contains</data>
</edge>
<edge source="WriteMAPImage" target="if_2">
  <data key="d6">contains</data>
</edge>
<edge source="WriteMAPImage" target="if_3">
  <data key="d6">contains</data>
</edge>
<edge source="WriteMAPImage" target="if_4">
  <data key="d6">contains</data>
</edge>
<edge source="WriteMAPImage" target="if_5">
  <data key="d6">contains</data>
</edge>
<edge source="WriteMAPImage" target="if_6">
  <data key="d6">contains</data>
</edge>
<edge source="WriteMAPImage" target="for_7">
  <data key="d6">contains</data>
</edge>
<edge source="WriteMAPImage" target="for_8">
  <data key="d6">contains</data>
</edge>
<edge source="WriteMAPImage" target="for_9">
  <data key="d6">contains</data>
</edge>
<edge source="WriteMAPImage" target="for_10">
  <data key="d6">contains</data>
</edge>
<edge source="y" target="for_9">
  <data key="d6">used_in_condition</data>
</edge>
</graph></graphml>