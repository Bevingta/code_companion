<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"><key id="d6" for="edge" attr.name="type" attr.type="string"/>
<key id="d5" for="node" attr.name="condition" attr.type="string"/>
<key id="d4" for="node" attr.name="type" attr.type="string"/>
<key id="d3" for="graph" attr.name="severity" attr.type="string"/>
<key id="d2" for="graph" attr.name="cvss" attr.type="string"/>
<key id="d1" for="graph" attr.name="cve" attr.type="string"/>
<key id="d0" for="graph" attr.name="pointer_arithmetic" attr.type="boolean"/>
<graph edgedefault="directed"><data key="d0">True</data>
<data key="d1">CVE-2015-9290</data>
<data key="d2">7.5</data>
<data key="d3">HIGH</data>
<node id="T1_Get_Private_Dict">
  <data key="d4">FunctionDefinition</data>
</node>
<node id="FT_ERROR">
  <data key="d4">FunctionCall</data>
</node>
<node id="FT_MEM_MOVE">
  <data key="d4">FunctionCall</data>
</node>
<node id="FT_THROW">
  <data key="d4">FunctionCall</data>
</node>
<node id="read_pfb_tag">
  <data key="d4">FunctionCall</data>
</node>
<node id="FT_BOOL">
  <data key="d4">FunctionCall</data>
</node>
<node id="t1_decrypt">
  <data key="d4">FunctionCall</data>
</node>
<node id="T1_Skip_Spaces">
  <data key="d4">FunctionCall</data>
</node>
<node id="FT_STREAM_POS">
  <data key="d4">FunctionCall</data>
</node>
<node id="to_bytes">
  <data key="d4">FunctionCall</data>
</node>
<node id="T1_Skip_PS_Token">
  <data key="d4">FunctionCall</data>
</node>
<node id="code">
  <data key="d4">FunctionCall</data>
</node>
<node id="string">
  <data key="d4">FunctionCall</data>
</node>
<node id="bytes">
  <data key="d4">FunctionCall</data>
</node>
<node id="if_0">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> parser-&gt;in_pfb </data>
</node>
<node id="if_1">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> error </data>
</node>
<node id="if_2">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> tag != 0x8002U </data>
</node>
<node id="if_3">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> FT_STREAM_SKIP( size </data>
</node>
<node id="if_4">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> parser-&gt;private_len == 0 </data>
</node>
<node id="if_5">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> FT_STREAM_SEEK( start_pos </data>
</node>
<node id="if_6">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> error || tag != 0x8002U </data>
</node>
<node id="if_7">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> FT_STREAM_READ( parser-&gt;private_dict + parser-&gt;private_len,
                             size </data>
</node>
<node id="if_8">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> c == 'e' &amp;&amp; cur + 9 &lt; limit </data>
</node>
<node id="if_9">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> cur[1] == 'e' &amp;&amp;
               cur[2] == 'x' &amp;&amp;
               cur[3] == 'e' &amp;&amp;
               cur[4] == 'c' </data>
</node>
<node id="if_10">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> cur &gt;= limit </data>
</node>
<node id="if_11">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> *cur == 'e' &amp;&amp; ft_strncmp( (char*</data>
</node>
<node id="if_12">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> parser-&gt;root.error </data>
</node>
<node id="if_13">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> cur &gt;= limit </data>
</node>
<node id="if_14">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> parser-&gt;in_memory </data>
</node>
<node id="if_15">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> FT_ALLOC( parser-&gt;private_dict, size + 1 </data>
</node>
<node id="if_16">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> cur + 3 &lt; limit                                &amp;&amp;
           ft_isxdigit( cur[0] </data>
</node>
<node id="if_17">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> parser-&gt;private_len &lt; 4 </data>
</node>
<node id="for_18">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">;;</data>
</node>
<node id="for_19">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">;;</data>
</node>
<node id="for_20">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">;;</data>
</node>
<node id="while_21">
  <data key="d4">ControlStructure_while</data>
  <data key="d5"> cur &lt; limit </data>
</node>
<node id="while_22">
  <data key="d4">ControlStructure_while</data>
  <data key="d5"> cur &lt; limit                    &amp;&amp;
              ( *cur == ' '                ||
                *cur == '\t'               ||
                (test_cr &amp;&amp; *cur == '\r' </data>
</node>
<edge source="T1_Get_Private_Dict" target="FT_ERROR">
  <data key="d6">calls</data>
</edge>
<edge source="T1_Get_Private_Dict" target="FT_MEM_MOVE">
  <data key="d6">calls</data>
</edge>
<edge source="T1_Get_Private_Dict" target="FT_THROW">
  <data key="d6">calls</data>
</edge>
<edge source="T1_Get_Private_Dict" target="read_pfb_tag">
  <data key="d6">calls</data>
</edge>
<edge source="T1_Get_Private_Dict" target="FT_BOOL">
  <data key="d6">calls</data>
</edge>
<edge source="T1_Get_Private_Dict" target="t1_decrypt">
  <data key="d6">calls</data>
</edge>
<edge source="T1_Get_Private_Dict" target="T1_Skip_Spaces">
  <data key="d6">calls</data>
</edge>
<edge source="T1_Get_Private_Dict" target="FT_STREAM_POS">
  <data key="d6">calls</data>
</edge>
<edge source="T1_Get_Private_Dict" target="to_bytes">
  <data key="d6">calls</data>
</edge>
<edge source="T1_Get_Private_Dict" target="T1_Skip_PS_Token">
  <data key="d6">calls</data>
</edge>
<edge source="T1_Get_Private_Dict" target="code">
  <data key="d6">calls</data>
</edge>
<edge source="T1_Get_Private_Dict" target="string">
  <data key="d6">calls</data>
</edge>
<edge source="T1_Get_Private_Dict" target="bytes">
  <data key="d6">calls</data>
</edge>
<edge source="T1_Get_Private_Dict" target="if_0">
  <data key="d6">contains</data>
</edge>
<edge source="T1_Get_Private_Dict" target="if_1">
  <data key="d6">contains</data>
</edge>
<edge source="T1_Get_Private_Dict" target="if_2">
  <data key="d6">contains</data>
</edge>
<edge source="T1_Get_Private_Dict" target="if_3">
  <data key="d6">contains</data>
</edge>
<edge source="T1_Get_Private_Dict" target="if_4">
  <data key="d6">contains</data>
</edge>
<edge source="T1_Get_Private_Dict" target="if_5">
  <data key="d6">contains</data>
</edge>
<edge source="T1_Get_Private_Dict" target="if_6">
  <data key="d6">contains</data>
</edge>
<edge source="T1_Get_Private_Dict" target="if_7">
  <data key="d6">contains</data>
</edge>
<edge source="T1_Get_Private_Dict" target="if_8">
  <data key="d6">contains</data>
</edge>
<edge source="T1_Get_Private_Dict" target="if_9">
  <data key="d6">contains</data>
</edge>
<edge source="T1_Get_Private_Dict" target="if_10">
  <data key="d6">contains</data>
</edge>
<edge source="T1_Get_Private_Dict" target="if_11">
  <data key="d6">contains</data>
</edge>
<edge source="T1_Get_Private_Dict" target="if_12">
  <data key="d6">contains</data>
</edge>
<edge source="T1_Get_Private_Dict" target="if_13">
  <data key="d6">contains</data>
</edge>
<edge source="T1_Get_Private_Dict" target="if_14">
  <data key="d6">contains</data>
</edge>
<edge source="T1_Get_Private_Dict" target="if_15">
  <data key="d6">contains</data>
</edge>
<edge source="T1_Get_Private_Dict" target="if_16">
  <data key="d6">contains</data>
</edge>
<edge source="T1_Get_Private_Dict" target="if_17">
  <data key="d6">contains</data>
</edge>
<edge source="T1_Get_Private_Dict" target="for_18">
  <data key="d6">contains</data>
</edge>
<edge source="T1_Get_Private_Dict" target="for_19">
  <data key="d6">contains</data>
</edge>
<edge source="T1_Get_Private_Dict" target="for_20">
  <data key="d6">contains</data>
</edge>
<edge source="T1_Get_Private_Dict" target="while_21">
  <data key="d6">contains</data>
</edge>
<edge source="T1_Get_Private_Dict" target="while_22">
  <data key="d6">contains</data>
</edge>
</graph></graphml>