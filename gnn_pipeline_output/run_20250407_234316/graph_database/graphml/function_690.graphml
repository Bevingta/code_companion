<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"><key id="d6" for="edge" attr.name="type" attr.type="string"/>
<key id="d5" for="node" attr.name="condition" attr.type="string"/>
<key id="d4" for="node" attr.name="type" attr.type="string"/>
<key id="d3" for="graph" attr.name="severity" attr.type="string"/>
<key id="d2" for="graph" attr.name="cvss" attr.type="string"/>
<key id="d1" for="graph" attr.name="cve" attr.type="string"/>
<key id="d0" for="graph" attr.name="pointer_arithmetic" attr.type="boolean"/>
<graph edgedefault="directed"><data key="d0">True</data>
<data key="d1">CVE-2016-4564</data>
<data key="d2">7.5</data>
<data key="d3">HIGH</data>
<node id="TraceStrokePolygon">
  <data key="d4">FunctionDefinition</data>
</node>
<node id="i">
  <data key="d4">Variable</data>
</node>
<node id="sin">
  <data key="d4">FunctionCall</data>
</node>
<node id="ceil">
  <data key="d4">FunctionCall</data>
</node>
<node id="atan2">
  <data key="d4">FunctionCall</data>
</node>
<node id="RelinquishMagickMemory">
  <data key="d4">FunctionCall</data>
</node>
<node id="cos">
  <data key="d4">FunctionCall</data>
</node>
<node id="sqrt">
  <data key="d4">FunctionCall</data>
</node>
<node id="ResizeQuantumMemory">
  <data key="d4">FunctionCall</data>
</node>
<node id="CopyMagickMemory">
  <data key="d4">FunctionCall</data>
</node>
<node id="AcquireQuantumMemory">
  <data key="d4">FunctionCall</data>
</node>
<node id="ExpandAffine">
  <data key="d4">FunctionCall</data>
</node>
<node id="DrawEpsilonReciprocal">
  <data key="d4">FunctionCall</data>
</node>
<node id="if_0">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">(path_p == (PointInfo *</data>
</node>
<node id="if_1">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">(draw_info-&gt;linejoin == RoundJoin</data>
</node>
<node id="if_2">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">(fabs(dx.p</data>
</node>
<node id="if_3">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">n == (ssize_t</data>
</node>
<node id="if_4">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">(draw_info-&gt;linecap == SquareCap</data>
</node>
<node id="if_5">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">(dy.p*offset.x-dx.p*offset.y</data>
</node>
<node id="if_6">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">dot_product &lt; 0.25</data>
</node>
<node id="if_7">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">dot_product &gt; 0.0</data>
</node>
<node id="if_8">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">fabs((double</data>
</node>
<node id="if_9">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">q &gt;= (ssize_t</data>
</node>
<node id="if_10">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">(path_p == (PointInfo *</data>
</node>
<node id="if_11">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">dot_product &lt;= 0.0</data>
</node>
<node id="if_12">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">dot_product &lt;= miterlimit</data>
</node>
<node id="if_13">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">dot_product &lt;= miterlimit</data>
</node>
<node id="if_14">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">dot_product &lt;= miterlimit</data>
</node>
<node id="if_15">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">theta.q &lt; theta.p</data>
</node>
<node id="if_16">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">dot_product &lt;= miterlimit</data>
</node>
<node id="if_17">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">dot_product &lt;= miterlimit</data>
</node>
<node id="if_18">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">dot_product &lt;= miterlimit</data>
</node>
<node id="if_19">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">theta.p &lt; theta.q</data>
</node>
<node id="if_20">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">stroke_polygon != (PrimitiveInfo *</data>
</node>
<node id="if_21">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">closed_path != MagickFalse</data>
</node>
<node id="if_22">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">closed_path != MagickFalse</data>
</node>
<node id="for_23">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">n=1; n &lt; (ssize_t</data>
</node>
<node id="for_24">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">i=(ssize_t</data>
</node>
<node id="for_25">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">j=1; j &lt; (ssize_t</data>
</node>
<node id="for_26">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">j=1; j &lt; (ssize_t</data>
</node>
<node id="for_27">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">i=0; i &lt; (ssize_t</data>
</node>
<node id="for_28">
  <data key="d4">ControlStructure_for</data>
  <data key="d5"> ; i &lt; (ssize_t</data>
</node>
<node id="switch_29">
  <data key="d4">ControlStructure_switch</data>
  <data key="d5">draw_info-&gt;linejoin</data>
</node>
<node id="switch_30">
  <data key="d4">ControlStructure_switch</data>
  <data key="d5">draw_info-&gt;linejoin</data>
</node>
<edge source="TraceStrokePolygon" target="i">
  <data key="d6">declares</data>
</edge>
<edge source="TraceStrokePolygon" target="sin">
  <data key="d6">calls</data>
</edge>
<edge source="TraceStrokePolygon" target="ceil">
  <data key="d6">calls</data>
</edge>
<edge source="TraceStrokePolygon" target="atan2">
  <data key="d6">calls</data>
</edge>
<edge source="TraceStrokePolygon" target="RelinquishMagickMemory">
  <data key="d6">calls</data>
</edge>
<edge source="TraceStrokePolygon" target="cos">
  <data key="d6">calls</data>
</edge>
<edge source="TraceStrokePolygon" target="sqrt">
  <data key="d6">calls</data>
</edge>
<edge source="TraceStrokePolygon" target="ResizeQuantumMemory">
  <data key="d6">calls</data>
</edge>
<edge source="TraceStrokePolygon" target="CopyMagickMemory">
  <data key="d6">calls</data>
</edge>
<edge source="TraceStrokePolygon" target="AcquireQuantumMemory">
  <data key="d6">calls</data>
</edge>
<edge source="TraceStrokePolygon" target="ExpandAffine">
  <data key="d6">calls</data>
</edge>
<edge source="TraceStrokePolygon" target="DrawEpsilonReciprocal">
  <data key="d6">calls</data>
</edge>
<edge source="TraceStrokePolygon" target="if_0">
  <data key="d6">contains</data>
</edge>
<edge source="TraceStrokePolygon" target="if_1">
  <data key="d6">contains</data>
</edge>
<edge source="TraceStrokePolygon" target="if_2">
  <data key="d6">contains</data>
</edge>
<edge source="TraceStrokePolygon" target="if_3">
  <data key="d6">contains</data>
</edge>
<edge source="TraceStrokePolygon" target="if_4">
  <data key="d6">contains</data>
</edge>
<edge source="TraceStrokePolygon" target="if_5">
  <data key="d6">contains</data>
</edge>
<edge source="TraceStrokePolygon" target="if_6">
  <data key="d6">contains</data>
</edge>
<edge source="TraceStrokePolygon" target="if_7">
  <data key="d6">contains</data>
</edge>
<edge source="TraceStrokePolygon" target="if_8">
  <data key="d6">contains</data>
</edge>
<edge source="TraceStrokePolygon" target="if_9">
  <data key="d6">contains</data>
</edge>
<edge source="TraceStrokePolygon" target="if_10">
  <data key="d6">contains</data>
</edge>
<edge source="TraceStrokePolygon" target="if_11">
  <data key="d6">contains</data>
</edge>
<edge source="TraceStrokePolygon" target="if_12">
  <data key="d6">contains</data>
</edge>
<edge source="TraceStrokePolygon" target="if_13">
  <data key="d6">contains</data>
</edge>
<edge source="TraceStrokePolygon" target="if_14">
  <data key="d6">contains</data>
</edge>
<edge source="TraceStrokePolygon" target="if_15">
  <data key="d6">contains</data>
</edge>
<edge source="TraceStrokePolygon" target="if_16">
  <data key="d6">contains</data>
</edge>
<edge source="TraceStrokePolygon" target="if_17">
  <data key="d6">contains</data>
</edge>
<edge source="TraceStrokePolygon" target="if_18">
  <data key="d6">contains</data>
</edge>
<edge source="TraceStrokePolygon" target="if_19">
  <data key="d6">contains</data>
</edge>
<edge source="TraceStrokePolygon" target="if_20">
  <data key="d6">contains</data>
</edge>
<edge source="TraceStrokePolygon" target="if_21">
  <data key="d6">contains</data>
</edge>
<edge source="TraceStrokePolygon" target="if_22">
  <data key="d6">contains</data>
</edge>
<edge source="TraceStrokePolygon" target="for_23">
  <data key="d6">contains</data>
</edge>
<edge source="TraceStrokePolygon" target="for_24">
  <data key="d6">contains</data>
</edge>
<edge source="TraceStrokePolygon" target="for_25">
  <data key="d6">contains</data>
</edge>
<edge source="TraceStrokePolygon" target="for_26">
  <data key="d6">contains</data>
</edge>
<edge source="TraceStrokePolygon" target="for_27">
  <data key="d6">contains</data>
</edge>
<edge source="TraceStrokePolygon" target="for_28">
  <data key="d6">contains</data>
</edge>
<edge source="TraceStrokePolygon" target="switch_29">
  <data key="d6">contains</data>
</edge>
<edge source="TraceStrokePolygon" target="switch_30">
  <data key="d6">contains</data>
</edge>
<edge source="i" target="if_0">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_1">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_3">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_4">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_9">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_10">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_12">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_13">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_14">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_16">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_17">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_18">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_20">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_21">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_22">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="for_23">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="for_24">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="for_25">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="for_26">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="for_27">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="for_28">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="switch_29">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="switch_30">
  <data key="d6">used_in_condition</data>
</edge>
</graph></graphml>