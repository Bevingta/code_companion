<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"><key id="d6" for="edge" attr.name="type" attr.type="string"/>
<key id="d5" for="node" attr.name="condition" attr.type="string"/>
<key id="d4" for="node" attr.name="type" attr.type="string"/>
<key id="d3" for="graph" attr.name="severity" attr.type="string"/>
<key id="d2" for="graph" attr.name="cvss" attr.type="string"/>
<key id="d1" for="graph" attr.name="cve" attr.type="string"/>
<key id="d0" for="graph" attr.name="pointer_arithmetic" attr.type="boolean"/>
<graph edgedefault="directed"><data key="d0">True</data>
<data key="d1">CVE-2019-13298</data>
<data key="d2">6.8</data>
<data key="d3">MEDIUM</data>
<node id="EnhanceImage">
  <data key="d4">FunctionDefinition</data>
</node>
<node id="x">
  <data key="d4">Variable</data>
</node>
<node id="y">
  <data key="d4">Variable</data>
</node>
<node id="center">
  <data key="d4">Variable</data>
</node>
<node id="defined">
  <data key="d4">FunctionCall</data>
</node>
<node id="DestroyImage">
  <data key="d4">FunctionCall</data>
</node>
<node id="assert">
  <data key="d4">FunctionCall</data>
</node>
<node id="AcquireAuthenticCacheView">
  <data key="d4">FunctionCall</data>
</node>
<node id="GetPixelBlack">
  <data key="d4">FunctionCall</data>
</node>
<node id="SetImageProgress">
  <data key="d4">FunctionCall</data>
</node>
<node id="GetPixelChannels">
  <data key="d4">FunctionCall</data>
</node>
<node id="GetPixelRed">
  <data key="d4">FunctionCall</data>
</node>
<node id="GetPixelInfoPixel">
  <data key="d4">FunctionCall</data>
</node>
<node id="DestroyCacheView">
  <data key="d4">FunctionCall</data>
</node>
<node id="SetPixelViaPixelInfo">
  <data key="d4">FunctionCall</data>
</node>
<node id="CloneImage">
  <data key="d4">FunctionCall</data>
</node>
<node id="EnhancePixel">
  <data key="d4">FunctionCall</data>
</node>
<node id="GetPixelGreen">
  <data key="d4">FunctionCall</data>
</node>
<node id="GetPixelBlue">
  <data key="d4">FunctionCall</data>
</node>
<node id="GetPixelAlpha">
  <data key="d4">FunctionCall</data>
</node>
<node id="AcquireVirtualCacheView">
  <data key="d4">FunctionCall</data>
</node>
<node id="QueueCacheViewAuthenticPixels">
  <data key="d4">FunctionCall</data>
</node>
<node id="GetCacheViewVirtualPixels">
  <data key="d4">FunctionCall</data>
</node>
<node id="GetPixelInfo">
  <data key="d4">FunctionCall</data>
</node>
<node id="if_0">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">distance_squared &lt; 0.069</data>
</node>
<node id="if_1">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">image-&gt;debug != MagickFalse</data>
</node>
<node id="if_2">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">enhance_image == (Image *</data>
</node>
<node id="if_3">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">SetImageStorageClass(enhance_image,DirectClass,exception</data>
</node>
<node id="if_4">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">status == MagickFalse</data>
</node>
<node id="if_5">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">(p == (const Quantum *</data>
</node>
<node id="if_6">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">total_weight &gt; MagickEpsilon</data>
</node>
<node id="if_7">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">SyncCacheViewAuthenticPixels(enhance_view,exception</data>
</node>
<node id="if_8">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">image-&gt;progress_monitor != (MagickProgressMonitor</data>
</node>
<node id="if_9">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">proceed == MagickFalse</data>
</node>
<node id="if_10">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">status == MagickFalse</data>
</node>
<node id="for_11">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">y=0; y &lt; (ssize_t</data>
</node>
<node id="for_12">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">x=0; x &lt; (ssize_t</data>
</node>
<edge source="EnhanceImage" target="x">
  <data key="d6">declares</data>
</edge>
<edge source="EnhanceImage" target="y">
  <data key="d6">declares</data>
</edge>
<edge source="EnhanceImage" target="center">
  <data key="d6">declares</data>
</edge>
<edge source="EnhanceImage" target="defined">
  <data key="d6">calls</data>
</edge>
<edge source="EnhanceImage" target="DestroyImage">
  <data key="d6">calls</data>
</edge>
<edge source="EnhanceImage" target="assert">
  <data key="d6">calls</data>
</edge>
<edge source="EnhanceImage" target="AcquireAuthenticCacheView">
  <data key="d6">calls</data>
</edge>
<edge source="EnhanceImage" target="GetPixelBlack">
  <data key="d6">calls</data>
</edge>
<edge source="EnhanceImage" target="SetImageProgress">
  <data key="d6">calls</data>
</edge>
<edge source="EnhanceImage" target="GetPixelChannels">
  <data key="d6">calls</data>
</edge>
<edge source="EnhanceImage" target="GetPixelRed">
  <data key="d6">calls</data>
</edge>
<edge source="EnhanceImage" target="GetPixelInfoPixel">
  <data key="d6">calls</data>
</edge>
<edge source="EnhanceImage" target="DestroyCacheView">
  <data key="d6">calls</data>
</edge>
<edge source="EnhanceImage" target="SetPixelViaPixelInfo">
  <data key="d6">calls</data>
</edge>
<edge source="EnhanceImage" target="CloneImage">
  <data key="d6">calls</data>
</edge>
<edge source="EnhanceImage" target="EnhancePixel">
  <data key="d6">calls</data>
</edge>
<edge source="EnhanceImage" target="GetPixelGreen">
  <data key="d6">calls</data>
</edge>
<edge source="EnhanceImage" target="GetPixelBlue">
  <data key="d6">calls</data>
</edge>
<edge source="EnhanceImage" target="GetPixelAlpha">
  <data key="d6">calls</data>
</edge>
<edge source="EnhanceImage" target="AcquireVirtualCacheView">
  <data key="d6">calls</data>
</edge>
<edge source="EnhanceImage" target="QueueCacheViewAuthenticPixels">
  <data key="d6">calls</data>
</edge>
<edge source="EnhanceImage" target="GetCacheViewVirtualPixels">
  <data key="d6">calls</data>
</edge>
<edge source="EnhanceImage" target="GetPixelInfo">
  <data key="d6">calls</data>
</edge>
<edge source="EnhanceImage" target="if_0">
  <data key="d6">contains</data>
</edge>
<edge source="EnhanceImage" target="if_1">
  <data key="d6">contains</data>
</edge>
<edge source="EnhanceImage" target="if_2">
  <data key="d6">contains</data>
</edge>
<edge source="EnhanceImage" target="if_3">
  <data key="d6">contains</data>
</edge>
<edge source="EnhanceImage" target="if_4">
  <data key="d6">contains</data>
</edge>
<edge source="EnhanceImage" target="if_5">
  <data key="d6">contains</data>
</edge>
<edge source="EnhanceImage" target="if_6">
  <data key="d6">contains</data>
</edge>
<edge source="EnhanceImage" target="if_7">
  <data key="d6">contains</data>
</edge>
<edge source="EnhanceImage" target="if_8">
  <data key="d6">contains</data>
</edge>
<edge source="EnhanceImage" target="if_9">
  <data key="d6">contains</data>
</edge>
<edge source="EnhanceImage" target="if_10">
  <data key="d6">contains</data>
</edge>
<edge source="EnhanceImage" target="for_11">
  <data key="d6">contains</data>
</edge>
<edge source="EnhanceImage" target="for_12">
  <data key="d6">contains</data>
</edge>
<edge source="x" target="if_3">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="x" target="if_7">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="x" target="for_12">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="y" target="if_7">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="y" target="for_11">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="center" target="GetPixelInfoPixel">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="center" target="for_11">
  <data key="d6">used_in_body</data>
</edge>
<edge source="center" target="for_12">
  <data key="d6">used_in_body</data>
</edge>
</graph></graphml>