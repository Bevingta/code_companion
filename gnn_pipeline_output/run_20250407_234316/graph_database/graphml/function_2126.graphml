<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"><key id="d6" for="edge" attr.name="type" attr.type="string"/>
<key id="d5" for="node" attr.name="condition" attr.type="string"/>
<key id="d4" for="node" attr.name="type" attr.type="string"/>
<key id="d3" for="graph" attr.name="severity" attr.type="string"/>
<key id="d2" for="graph" attr.name="cvss" attr.type="string"/>
<key id="d1" for="graph" attr.name="cve" attr.type="string"/>
<key id="d0" for="graph" attr.name="pointer_arithmetic" attr.type="boolean"/>
<graph edgedefault="directed"><data key="d0">True</data>
<data key="d1">CVE-2015-1788</data>
<data key="d2">4.3</data>
<data key="d3">MEDIUM</data>
<node id="BN_GF2m_mod_inv">
  <data key="d4">FunctionDefinition</data>
</node>
<node id="utop">
  <data key="d4">Variable</data>
</node>
<node id="ret">
  <data key="d4">Variable</data>
</node>
<node id="bn_wexpand">
  <data key="d4">FunctionCall</data>
</node>
<node id="bn_check_top">
  <data key="d4">FunctionCall</data>
</node>
<node id="BN_num_bits_word">
  <data key="d4">FunctionCall</data>
</node>
<node id="BN_CTX_end">
  <data key="d4">FunctionCall</data>
</node>
<node id="BN_CTX_start">
  <data key="d4">FunctionCall</data>
</node>
<node id="bn_correct_top">
  <data key="d4">FunctionCall</data>
</node>
<node id="BN_num_bits">
  <data key="d4">FunctionCall</data>
</node>
<node id="if_0">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">(b = BN_CTX_get(ctx</data>
</node>
<node id="if_1">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">(c = BN_CTX_get(ctx</data>
</node>
<node id="if_2">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">(u = BN_CTX_get(ctx</data>
</node>
<node id="if_3">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">(v = BN_CTX_get(ctx</data>
</node>
<node id="if_4">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!BN_GF2m_mod(u, a, p</data>
</node>
<node id="if_5">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">BN_is_zero(u</data>
</node>
<node id="if_6">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!BN_copy(v, p</data>
</node>
<node id="if_7">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!BN_one(b</data>
</node>
<node id="if_8">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">BN_is_zero(u</data>
</node>
<node id="if_9">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!BN_rshift1(u, u</data>
</node>
<node id="if_10">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">BN_is_odd(b</data>
</node>
<node id="if_11">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!BN_GF2m_add(b, b, p</data>
</node>
<node id="if_12">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!BN_rshift1(b, b</data>
</node>
<node id="if_13">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">BN_abs_is_word(u, 1</data>
</node>
<node id="if_14">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">BN_num_bits(u</data>
</node>
<node id="if_15">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!BN_GF2m_add(u, u, v</data>
</node>
<node id="if_16">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!BN_GF2m_add(b, b, c</data>
</node>
<node id="if_17">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">ubits &lt;= BN_BITS2 &amp;&amp; udp[0] == 1</data>
</node>
<node id="if_18">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">ubits &lt; vbits</data>
</node>
<node id="if_19">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">ubits == vbits</data>
</node>
<node id="if_20">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!BN_copy(r, b</data>
</node>
<node id="for_21">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">i = u-&gt;top; i &lt; top; i++</data>
</node>
<node id="for_22">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">i = 1; i &lt; top; i++</data>
</node>
<node id="for_23">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">i = 0; i &lt; top; i++</data>
</node>
<node id="for_24">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">i = 0; i &lt; top - 1; i++</data>
</node>
<node id="for_25">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">i = 0; i &lt; top; i++</data>
</node>
<node id="while_26">
  <data key="d4">ControlStructure_while</data>
  <data key="d5">1</data>
</node>
<node id="while_27">
  <data key="d4">ControlStructure_while</data>
  <data key="d5">!BN_is_odd(u</data>
</node>
<node id="while_28">
  <data key="d4">ControlStructure_while</data>
  <data key="d5">1</data>
</node>
<node id="while_29">
  <data key="d4">ControlStructure_while</data>
  <data key="d5">ubits &amp;&amp; !(udp[0] &amp; 1</data>
</node>
<node id="while_30">
  <data key="d4">ControlStructure_while</data>
  <data key="d5">(ul = udp[utop]</data>
</node>
<edge source="BN_GF2m_mod_inv" target="utop">
  <data key="d6">declares</data>
</edge>
<edge source="BN_GF2m_mod_inv" target="ret">
  <data key="d6">declares</data>
</edge>
<edge source="BN_GF2m_mod_inv" target="bn_wexpand">
  <data key="d6">calls</data>
</edge>
<edge source="BN_GF2m_mod_inv" target="bn_check_top">
  <data key="d6">calls</data>
</edge>
<edge source="BN_GF2m_mod_inv" target="BN_num_bits_word">
  <data key="d6">calls</data>
</edge>
<edge source="BN_GF2m_mod_inv" target="BN_CTX_end">
  <data key="d6">calls</data>
</edge>
<edge source="BN_GF2m_mod_inv" target="BN_CTX_start">
  <data key="d6">calls</data>
</edge>
<edge source="BN_GF2m_mod_inv" target="bn_correct_top">
  <data key="d6">calls</data>
</edge>
<edge source="BN_GF2m_mod_inv" target="BN_num_bits">
  <data key="d6">calls</data>
</edge>
<edge source="BN_GF2m_mod_inv" target="if_0">
  <data key="d6">contains</data>
</edge>
<edge source="BN_GF2m_mod_inv" target="if_1">
  <data key="d6">contains</data>
</edge>
<edge source="BN_GF2m_mod_inv" target="if_2">
  <data key="d6">contains</data>
</edge>
<edge source="BN_GF2m_mod_inv" target="if_3">
  <data key="d6">contains</data>
</edge>
<edge source="BN_GF2m_mod_inv" target="if_4">
  <data key="d6">contains</data>
</edge>
<edge source="BN_GF2m_mod_inv" target="if_5">
  <data key="d6">contains</data>
</edge>
<edge source="BN_GF2m_mod_inv" target="if_6">
  <data key="d6">contains</data>
</edge>
<edge source="BN_GF2m_mod_inv" target="if_7">
  <data key="d6">contains</data>
</edge>
<edge source="BN_GF2m_mod_inv" target="if_8">
  <data key="d6">contains</data>
</edge>
<edge source="BN_GF2m_mod_inv" target="if_9">
  <data key="d6">contains</data>
</edge>
<edge source="BN_GF2m_mod_inv" target="if_10">
  <data key="d6">contains</data>
</edge>
<edge source="BN_GF2m_mod_inv" target="if_11">
  <data key="d6">contains</data>
</edge>
<edge source="BN_GF2m_mod_inv" target="if_12">
  <data key="d6">contains</data>
</edge>
<edge source="BN_GF2m_mod_inv" target="if_13">
  <data key="d6">contains</data>
</edge>
<edge source="BN_GF2m_mod_inv" target="if_14">
  <data key="d6">contains</data>
</edge>
<edge source="BN_GF2m_mod_inv" target="if_15">
  <data key="d6">contains</data>
</edge>
<edge source="BN_GF2m_mod_inv" target="if_16">
  <data key="d6">contains</data>
</edge>
<edge source="BN_GF2m_mod_inv" target="if_17">
  <data key="d6">contains</data>
</edge>
<edge source="BN_GF2m_mod_inv" target="if_18">
  <data key="d6">contains</data>
</edge>
<edge source="BN_GF2m_mod_inv" target="if_19">
  <data key="d6">contains</data>
</edge>
<edge source="BN_GF2m_mod_inv" target="if_20">
  <data key="d6">contains</data>
</edge>
<edge source="BN_GF2m_mod_inv" target="for_21">
  <data key="d6">contains</data>
</edge>
<edge source="BN_GF2m_mod_inv" target="for_22">
  <data key="d6">contains</data>
</edge>
<edge source="BN_GF2m_mod_inv" target="for_23">
  <data key="d6">contains</data>
</edge>
<edge source="BN_GF2m_mod_inv" target="for_24">
  <data key="d6">contains</data>
</edge>
<edge source="BN_GF2m_mod_inv" target="for_25">
  <data key="d6">contains</data>
</edge>
<edge source="BN_GF2m_mod_inv" target="while_26">
  <data key="d6">contains</data>
</edge>
<edge source="BN_GF2m_mod_inv" target="while_27">
  <data key="d6">contains</data>
</edge>
<edge source="BN_GF2m_mod_inv" target="while_28">
  <data key="d6">contains</data>
</edge>
<edge source="BN_GF2m_mod_inv" target="while_29">
  <data key="d6">contains</data>
</edge>
<edge source="BN_GF2m_mod_inv" target="while_30">
  <data key="d6">contains</data>
</edge>
<edge source="utop" target="while_30">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="utop" target="if_15">
  <data key="d6">used_in_body</data>
</edge>
<edge source="utop" target="if_16">
  <data key="d6">used_in_body</data>
</edge>
<edge source="utop" target="if_19">
  <data key="d6">used_in_body</data>
</edge>
<edge source="utop" target="for_21">
  <data key="d6">used_in_body</data>
</edge>
<edge source="utop" target="for_22">
  <data key="d6">used_in_body</data>
</edge>
<edge source="utop" target="for_23">
  <data key="d6">used_in_body</data>
</edge>
<edge source="utop" target="while_28">
  <data key="d6">used_in_body</data>
</edge>
</graph></graphml>