<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"><key id="d7" for="edge" attr.name="type" attr.type="string"/>
<key id="d6" for="node" attr.name="condition" attr.type="string"/>
<key id="d5" for="node" attr.name="type" attr.type="string"/>
<key id="d4" for="graph" attr.name="severity" attr.type="string"/>
<key id="d3" for="graph" attr.name="cvss" attr.type="string"/>
<key id="d2" for="graph" attr.name="cve" attr.type="string"/>
<key id="d1" for="graph" attr.name="pointer_arithmetic" attr.type="boolean"/>
<key id="d0" for="graph" attr.name="potential_buffer_overflow" attr.type="boolean"/>
<graph edgedefault="directed"><data key="d0">True</data>
<data key="d1">True</data>
<data key="d2">CVE-2019-13300</data>
<data key="d3">6.8</data>
<data key="d4">MEDIUM</data>
<node id="AcquirePixelThreadSet">
  <data key="d5">FunctionDefinition</data>
</node>
<node id="i">
  <data key="d5">Variable</data>
</node>
<node id="j">
  <data key="d5">Variable</data>
</node>
<node id="k">
  <data key="d5">Variable</data>
</node>
<node id="number_threads">
  <data key="d5">Variable</data>
</node>
<node id="memset">
  <data key="d5">FunctionCall</data>
</node>
<node id="GetMagickResourceLimit">
  <data key="d5">FunctionCall</data>
</node>
<node id="AcquireQuantumMemory">
  <data key="d5">FunctionCall</data>
</node>
<node id="if_0">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">pixels == (PixelChannels **</data>
</node>
<node id="if_1">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">pixels[i] == (PixelChannels *</data>
</node>
<node id="for_2">
  <data key="d5">ControlStructure_for</data>
  <data key="d6">i=0; i &lt; (ssize_t</data>
</node>
<node id="for_3">
  <data key="d5">ControlStructure_for</data>
  <data key="d6">j=0; j &lt; (ssize_t</data>
</node>
<node id="for_4">
  <data key="d5">ControlStructure_for</data>
  <data key="d6">k=0; k &lt; MaxPixelChannels; k++</data>
</node>
<edge source="AcquirePixelThreadSet" target="i">
  <data key="d7">declares</data>
</edge>
<edge source="AcquirePixelThreadSet" target="j">
  <data key="d7">declares</data>
</edge>
<edge source="AcquirePixelThreadSet" target="k">
  <data key="d7">declares</data>
</edge>
<edge source="AcquirePixelThreadSet" target="number_threads">
  <data key="d7">declares</data>
</edge>
<edge source="AcquirePixelThreadSet" target="memset">
  <data key="d7">calls</data>
</edge>
<edge source="AcquirePixelThreadSet" target="GetMagickResourceLimit">
  <data key="d7">calls</data>
</edge>
<edge source="AcquirePixelThreadSet" target="AcquireQuantumMemory">
  <data key="d7">calls</data>
</edge>
<edge source="AcquirePixelThreadSet" target="if_0">
  <data key="d7">contains</data>
</edge>
<edge source="AcquirePixelThreadSet" target="if_1">
  <data key="d7">contains</data>
</edge>
<edge source="AcquirePixelThreadSet" target="for_2">
  <data key="d7">contains</data>
</edge>
<edge source="AcquirePixelThreadSet" target="for_3">
  <data key="d7">contains</data>
</edge>
<edge source="AcquirePixelThreadSet" target="for_4">
  <data key="d7">contains</data>
</edge>
<edge source="i" target="if_0">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="i" target="if_1">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="i" target="for_2">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="i" target="for_3">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="i" target="for_4">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="j" target="for_3">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="k" target="for_4">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="number_threads" target="memset">
  <data key="d7">used_as_parameter</data>
</edge>
<edge source="number_threads" target="AcquireQuantumMemory">
  <data key="d7">used_as_parameter</data>
</edge>
</graph></graphml>