<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"><key id="d6" for="edge" attr.name="type" attr.type="string"/>
<key id="d5" for="node" attr.name="condition" attr.type="string"/>
<key id="d4" for="node" attr.name="type" attr.type="string"/>
<key id="d3" for="graph" attr.name="severity" attr.type="string"/>
<key id="d2" for="graph" attr.name="cvss" attr.type="string"/>
<key id="d1" for="graph" attr.name="cve" attr.type="string"/>
<key id="d0" for="graph" attr.name="pointer_arithmetic" attr.type="boolean"/>
<graph edgedefault="directed"><data key="d0">True</data>
<data key="d1">CVE-2016-7540</data>
<data key="d2">4.3</data>
<data key="d3">MEDIUM</data>
<node id="WriteRGFImage">
  <data key="d4">FunctionDefinition</data>
</node>
<node id="bit">
  <data key="d4">Variable</data>
</node>
<node id="x">
  <data key="d4">Variable</data>
</node>
<node id="y">
  <data key="d4">Variable</data>
</node>
<node id="byte">
  <data key="d4">Variable</data>
</node>
<node id="CloseBlob">
  <data key="d4">FunctionCall</data>
</node>
<node id="SetImageType">
  <data key="d4">FunctionCall</data>
</node>
<node id="WriteBlobByte">
  <data key="d4">FunctionCall</data>
</node>
<node id="header">
  <data key="d4">FunctionCall</data>
</node>
<node id="GetVirtualPixels">
  <data key="d4">FunctionCall</data>
</node>
<node id="TransformImageColorspace">
  <data key="d4">FunctionCall</data>
</node>
<node id="SetImageProgress">
  <data key="d4">FunctionCall</data>
</node>
<node id="OpenBlob">
  <data key="d4">FunctionCall</data>
</node>
<node id="assert">
  <data key="d4">FunctionCall</data>
</node>
<node id="if_0">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">image-&gt;debug != MagickFalse</data>
</node>
<node id="if_1">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">status == MagickFalse</data>
</node>
<node id="if_2">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">(image-&gt;columns &gt; 255L</data>
</node>
<node id="if_3">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">p == (const PixelPacket *</data>
</node>
<node id="if_4">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">GetPixelLuma(image,p</data>
</node>
<node id="if_5">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">bit == 8</data>
</node>
<node id="if_6">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">bit != 0</data>
</node>
<node id="if_7">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">status == MagickFalse</data>
</node>
<node id="for_8">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">y=0; y &lt; (ssize_t</data>
</node>
<node id="for_9">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">x=0; x &lt; (ssize_t</data>
</node>
<edge source="WriteRGFImage" target="bit">
  <data key="d6">declares</data>
</edge>
<edge source="WriteRGFImage" target="x">
  <data key="d6">declares</data>
</edge>
<edge source="WriteRGFImage" target="y">
  <data key="d6">declares</data>
</edge>
<edge source="WriteRGFImage" target="byte">
  <data key="d6">declares</data>
</edge>
<edge source="WriteRGFImage" target="CloseBlob">
  <data key="d6">calls</data>
</edge>
<edge source="WriteRGFImage" target="SetImageType">
  <data key="d6">calls</data>
</edge>
<edge source="WriteRGFImage" target="WriteBlobByte">
  <data key="d6">calls</data>
</edge>
<edge source="WriteRGFImage" target="header">
  <data key="d6">calls</data>
</edge>
<edge source="WriteRGFImage" target="GetVirtualPixels">
  <data key="d6">calls</data>
</edge>
<edge source="WriteRGFImage" target="TransformImageColorspace">
  <data key="d6">calls</data>
</edge>
<edge source="WriteRGFImage" target="SetImageProgress">
  <data key="d6">calls</data>
</edge>
<edge source="WriteRGFImage" target="OpenBlob">
  <data key="d6">calls</data>
</edge>
<edge source="WriteRGFImage" target="assert">
  <data key="d6">calls</data>
</edge>
<edge source="WriteRGFImage" target="if_0">
  <data key="d6">contains</data>
</edge>
<edge source="WriteRGFImage" target="if_1">
  <data key="d6">contains</data>
</edge>
<edge source="WriteRGFImage" target="if_2">
  <data key="d6">contains</data>
</edge>
<edge source="WriteRGFImage" target="if_3">
  <data key="d6">contains</data>
</edge>
<edge source="WriteRGFImage" target="if_4">
  <data key="d6">contains</data>
</edge>
<edge source="WriteRGFImage" target="if_5">
  <data key="d6">contains</data>
</edge>
<edge source="WriteRGFImage" target="if_6">
  <data key="d6">contains</data>
</edge>
<edge source="WriteRGFImage" target="if_7">
  <data key="d6">contains</data>
</edge>
<edge source="WriteRGFImage" target="for_8">
  <data key="d6">contains</data>
</edge>
<edge source="WriteRGFImage" target="for_9">
  <data key="d6">contains</data>
</edge>
<edge source="bit" target="if_5">
  <data key="d6">used_in_body</data>
</edge>
<edge source="bit" target="if_6">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="bit" target="if_0">
  <data key="d6">used_in_body</data>
</edge>
<edge source="bit" target="if_1">
  <data key="d6">used_in_body</data>
</edge>
<edge source="bit" target="if_2">
  <data key="d6">used_in_body</data>
</edge>
<edge source="bit" target="if_3">
  <data key="d6">used_in_body</data>
</edge>
<edge source="bit" target="if_4">
  <data key="d6">used_in_body</data>
</edge>
<edge source="bit" target="for_8">
  <data key="d6">used_in_body</data>
</edge>
<edge source="bit" target="for_9">
  <data key="d6">used_in_body</data>
</edge>
<edge source="x" target="if_3">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="x" target="if_4">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="x" target="for_9">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="y" target="for_8">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="byte" target="WriteBlobByte">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="byte" target="if_0">
  <data key="d6">used_in_body</data>
</edge>
<edge source="byte" target="if_1">
  <data key="d6">used_in_body</data>
</edge>
<edge source="byte" target="if_2">
  <data key="d6">used_in_body</data>
</edge>
<edge source="byte" target="if_3">
  <data key="d6">used_in_body</data>
</edge>
<edge source="byte" target="if_4">
  <data key="d6">used_in_body</data>
</edge>
<edge source="byte" target="if_5">
  <data key="d6">used_in_body</data>
</edge>
<edge source="byte" target="for_8">
  <data key="d6">used_in_body</data>
</edge>
<edge source="byte" target="for_9">
  <data key="d6">used_in_body</data>
</edge>
</graph></graphml>