<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"><key id="d6" for="edge" attr.name="type" attr.type="string"/>
<key id="d5" for="node" attr.name="condition" attr.type="string"/>
<key id="d4" for="node" attr.name="type" attr.type="string"/>
<key id="d3" for="graph" attr.name="severity" attr.type="string"/>
<key id="d2" for="graph" attr.name="cvss" attr.type="string"/>
<key id="d1" for="graph" attr.name="cve" attr.type="string"/>
<key id="d0" for="graph" attr.name="pointer_arithmetic" attr.type="boolean"/>
<graph edgedefault="directed"><data key="d0">True</data>
<data key="d1">CVE-2010-2497</data>
<data key="d2">6.8</data>
<data key="d3">MEDIUM</data>
<node id="cff_decoder_parse_charstrings">
  <data key="d4">FunctionDefinition</data>
</node>
<node id="FT_GlyphLoader_Add">
  <data key="d4">FunctionCall</data>
</node>
<node id="cff_operator_seac">
  <data key="d4">FunctionCall</data>
</node>
<node id="apply">
  <data key="d4">FunctionCall</data>
</node>
<node id="FT_DivFix">
  <data key="d4">FunctionCall</data>
</node>
<node id="FT_ERROR">
  <data key="d4">FunctionCall</data>
</node>
<node id="cff_builder_close_contour">
  <data key="d4">FunctionCall</data>
</node>
<node id="FT_MulFix">
  <data key="d4">FunctionCall</data>
</node>
<node id="cff_builder_add_point">
  <data key="d4">FunctionCall</data>
</node>
<node id="counter">
  <data key="d4">FunctionCall</data>
</node>
<node id="FT_TRACE4">
  <data key="d4">FunctionCall</data>
</node>
<node id="if_0">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> seed == 0 </data>
</node>
<node id="if_1">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> hinter </data>
</node>
<node id="if_2">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> v &gt;= 32 || v == 28 </data>
</node>
<node id="if_3">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> v == 28 </data>
</node>
<node id="if_4">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> ip + 1 &gt;= limit </data>
</node>
<node id="if_5">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> v &lt; 247 </data>
</node>
<node id="if_6">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> v &lt; 251 </data>
</node>
<node id="if_7">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> ip &gt;= limit </data>
</node>
<node id="if_8">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> v &lt; 255 </data>
</node>
<node id="if_9">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> ip &gt;= limit </data>
</node>
<node id="if_10">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> ip + 3 &gt;= limit </data>
</node>
<node id="if_11">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> charstring_type == 2 </data>
</node>
<node id="if_12">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> decoder-&gt;top - stack &gt;= CFF_MAX_OPERANDS </data>
</node>
<node id="if_13">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> !( val &amp; 0xFFFFL </data>
</node>
<node id="if_14">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> ip &gt;= limit </data>
</node>
<node id="if_15">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> op == cff_op_unknown </data>
</node>
<node id="if_16">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> req_args &amp; CFF_COUNT_CHECK_WIDTH </data>
</node>
<node id="if_17">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> num_args &gt; 0 &amp;&amp; decoder-&gt;read_width </data>
</node>
<node id="if_18">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> set_width_ok </data>
</node>
<node id="if_19">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> decoder-&gt;width_only </data>
</node>
<node id="if_20">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> num_args &lt; req_args </data>
</node>
<node id="if_21">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> hinter </data>
</node>
<node id="if_22">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> num_args &gt; 0 </data>
</node>
<node id="if_23">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> hinter </data>
</node>
<node id="if_24">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> hinter </data>
</node>
<node id="if_25">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> op == cff_op_hintmask </data>
</node>
<node id="if_26">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> ip &gt;= limit </data>
</node>
<node id="if_27">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> cff_builder_start_point ( builder, x, y </data>
</node>
<node id="if_28">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> num_args &lt; 2 </data>
</node>
<node id="if_29">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> num_args &lt; 1 </data>
</node>
<node id="if_30">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> cff_builder_start_point ( builder, x, y </data>
</node>
<node id="if_31">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> phase </data>
</node>
<node id="if_32">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> cff_builder_add_point1( builder, x, y </data>
</node>
<node id="if_33">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> num_args &lt; 6 </data>
</node>
<node id="if_34">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> cff_builder_start_point ( builder, x, y </data>
</node>
<node id="if_35">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> num_args &lt; 4 </data>
</node>
<node id="if_36">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> num_args - nargs &gt; 0 </data>
</node>
<node id="if_37">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> cff_builder_start_point( builder, x, y </data>
</node>
<node id="if_38">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> nargs &amp; 1 </data>
</node>
<node id="if_39">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> check_points( builder, 3 * ( nargs / 4 </data>
</node>
<node id="if_40">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> num_args &lt; 4 </data>
</node>
<node id="if_41">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> num_args - nargs &gt; 0 </data>
</node>
<node id="if_42">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> cff_builder_start_point( builder, x, y </data>
</node>
<node id="if_43">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> nargs &amp; 1 </data>
</node>
<node id="if_44">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> check_points( builder, 3 * ( nargs / 4 </data>
</node>
<node id="if_45">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> cff_builder_start_point( builder, x, y </data>
</node>
<node id="if_46">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> num_args &lt; 4 </data>
</node>
<node id="if_47">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> num_args - nargs &gt; 0 </data>
</node>
<node id="if_48">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> check_points( builder, ( nargs / 4 </data>
</node>
<node id="if_49">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> phase </data>
</node>
<node id="if_50">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> nargs == 1 </data>
</node>
<node id="if_51">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> nargs == 1 </data>
</node>
<node id="if_52">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> num_args &lt; 8 </data>
</node>
<node id="if_53">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> cff_builder_start_point( builder, x, y </data>
</node>
<node id="if_54">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> num_args &lt; 8 </data>
</node>
<node id="if_55">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> cff_builder_start_point ( builder, x, y </data>
</node>
<node id="if_56">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> cff_builder_start_point( builder, x, y </data>
</node>
<node id="if_57">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> cff_builder_start_point( builder, x, y </data>
</node>
<node id="if_58">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> cff_builder_start_point( builder, x, y </data>
</node>
<node id="if_59">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> dx &lt; 0 </data>
</node>
<node id="if_60">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> dy &lt; 0 </data>
</node>
<node id="if_61">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> horizontal </data>
</node>
<node id="if_62">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> cff_builder_start_point( builder, x, y </data>
</node>
<node id="if_63">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> num_args &gt;= 4 </data>
</node>
<node id="if_64">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> !error </data>
</node>
<node id="if_65">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> hinter </data>
</node>
<node id="if_66">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> hinter-&gt;close( hinter-&gt;hints,
                                  builder-&gt;current-&gt;n_points </data>
</node>
<node id="if_67">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> args[0] &lt; 0 </data>
</node>
<node id="if_68">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> Rand &gt;= 0x8000L </data>
</node>
<node id="if_69">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> seed == 0 </data>
</node>
<node id="if_70">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> args[0] &gt; 0 </data>
</node>
<node id="if_71">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> new_root == root || count &lt;= 0 </data>
</node>
<node id="if_72">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> idx &lt; 0 </data>
</node>
<node id="if_73">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> idx &gt; num_args - 2 </data>
</node>
<node id="if_74">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> count &lt;= 0 </data>
</node>
<node id="if_75">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> args &lt; stack </data>
</node>
<node id="if_76">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> idx &gt;= 0 </data>
</node>
<node id="if_77">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> idx &gt;= 0 &amp;&amp; idx &lt; CFF_MAX_TRANS_ELEMENTS </data>
</node>
<node id="if_78">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> idx &gt;= 0 &amp;&amp; idx &lt; CFF_MAX_TRANS_ELEMENTS </data>
</node>
<node id="if_79">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> !cond </data>
</node>
<node id="if_80">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> idx &gt;= decoder-&gt;num_locals </data>
</node>
<node id="if_81">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> zone - decoder-&gt;zones &gt;= CFF_MAX_SUBRS_CALLS </data>
</node>
<node id="if_82">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> !zone-&gt;base || zone-&gt;limit == zone-&gt;base </data>
</node>
<node id="if_83">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> idx &gt;= decoder-&gt;num_globals </data>
</node>
<node id="if_84">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> zone - decoder-&gt;zones &gt;= CFF_MAX_SUBRS_CALLS </data>
</node>
<node id="if_85">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> !zone-&gt;base || zone-&gt;limit == zone-&gt;base </data>
</node>
<node id="if_86">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> decoder-&gt;zone &lt;= decoder-&gt;zones </data>
</node>
<node id="if_87">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> ip[-1] == 12 </data>
</node>
<node id="for_88">
  <data key="d4">ControlStructure_for</data>
  <data key="d5"> maskbyte = 0;
                  maskbyte &lt; (FT_UInt</data>
</node>
<node id="for_89">
  <data key="d4">ControlStructure_for</data>
  <data key="d5"> count = 5; count &gt; 0; count-- </data>
</node>
<node id="for_90">
  <data key="d4">ControlStructure_for</data>
  <data key="d5"> count = 5; count &gt; 0; count-- </data>
</node>
<node id="for_91">
  <data key="d4">ControlStructure_for</data>
  <data key="d5"> count = 6; count &gt; 0; count-- </data>
</node>
<node id="for_92">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">;;</data>
</node>
<node id="for_93">
  <data key="d4">ControlStructure_for</data>
  <data key="d5"> i = count - 2; i &gt;= 0; i-- </data>
</node>
<node id="for_94">
  <data key="d4">ControlStructure_for</data>
  <data key="d5"> i = 0; i &lt; count - 1; i++ </data>
</node>
<node id="while_95">
  <data key="d4">ControlStructure_while</data>
  <data key="d5"> ip &lt; limit </data>
</node>
<node id="while_96">
  <data key="d4">ControlStructure_while</data>
  <data key="d5"> args &lt; decoder-&gt;top </data>
</node>
<node id="while_97">
  <data key="d4">ControlStructure_while</data>
  <data key="d5"> args &lt; decoder-&gt;top </data>
</node>
<node id="while_98">
  <data key="d4">ControlStructure_while</data>
  <data key="d5"> args &lt; decoder-&gt;top </data>
</node>
<node id="while_99">
  <data key="d4">ControlStructure_while</data>
  <data key="d5"> args &lt; decoder-&gt;top </data>
</node>
<node id="while_100">
  <data key="d4">ControlStructure_while</data>
  <data key="d5"> args &lt; decoder-&gt;top </data>
</node>
<node id="while_101">
  <data key="d4">ControlStructure_while</data>
  <data key="d5"> nargs &gt;= 4 </data>
</node>
<node id="while_102">
  <data key="d4">ControlStructure_while</data>
  <data key="d5"> num_lines &gt; 0 </data>
</node>
<node id="while_103">
  <data key="d4">ControlStructure_while</data>
  <data key="d5"> num_curves &gt; 0 </data>
</node>
<node id="while_104">
  <data key="d4">ControlStructure_while</data>
  <data key="d5"> idx &gt; 0 </data>
</node>
<node id="while_105">
  <data key="d4">ControlStructure_while</data>
  <data key="d5"> idx &lt; 0 </data>
</node>
<node id="switch_106">
  <data key="d4">ControlStructure_switch</data>
  <data key="d5"> v </data>
</node>
<node id="switch_107">
  <data key="d4">ControlStructure_switch</data>
  <data key="d5"> v </data>
</node>
<node id="switch_108">
  <data key="d4">ControlStructure_switch</data>
  <data key="d5"> op </data>
</node>
<node id="switch_109">
  <data key="d4">ControlStructure_switch</data>
  <data key="d5"> op </data>
</node>
<edge source="cff_decoder_parse_charstrings" target="FT_GlyphLoader_Add">
  <data key="d6">calls</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="cff_operator_seac">
  <data key="d6">calls</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="apply">
  <data key="d6">calls</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="FT_DivFix">
  <data key="d6">calls</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="FT_ERROR">
  <data key="d6">calls</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="cff_builder_close_contour">
  <data key="d6">calls</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="FT_MulFix">
  <data key="d6">calls</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="cff_builder_add_point">
  <data key="d6">calls</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="counter">
  <data key="d6">calls</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="FT_TRACE4">
  <data key="d6">calls</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_0">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_1">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_2">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_3">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_4">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_5">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_6">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_7">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_8">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_9">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_10">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_11">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_12">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_13">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_14">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_15">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_16">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_17">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_18">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_19">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_20">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_21">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_22">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_23">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_24">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_25">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_26">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_27">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_28">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_29">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_30">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_31">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_32">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_33">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_34">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_35">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_36">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_37">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_38">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_39">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_40">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_41">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_42">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_43">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_44">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_45">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_46">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_47">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_48">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_49">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_50">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_51">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_52">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_53">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_54">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_55">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_56">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_57">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_58">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_59">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_60">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_61">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_62">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_63">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_64">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_65">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_66">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_67">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_68">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_69">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_70">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_71">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_72">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_73">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_74">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_75">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_76">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_77">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_78">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_79">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_80">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_81">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_82">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_83">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_84">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_85">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_86">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="if_87">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="for_88">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="for_89">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="for_90">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="for_91">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="for_92">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="for_93">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="for_94">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="while_95">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="while_96">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="while_97">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="while_98">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="while_99">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="while_100">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="while_101">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="while_102">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="while_103">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="while_104">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="while_105">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="switch_106">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="switch_107">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="switch_108">
  <data key="d6">contains</data>
</edge>
<edge source="cff_decoder_parse_charstrings" target="switch_109">
  <data key="d6">contains</data>
</edge>
</graph></graphml>