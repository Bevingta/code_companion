<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"><key id="d6" for="edge" attr.name="type" attr.type="string"/>
<key id="d5" for="node" attr.name="condition" attr.type="string"/>
<key id="d4" for="node" attr.name="type" attr.type="string"/>
<key id="d3" for="graph" attr.name="severity" attr.type="string"/>
<key id="d2" for="graph" attr.name="cvss" attr.type="string"/>
<key id="d1" for="graph" attr.name="cve" attr.type="string"/>
<key id="d0" for="graph" attr.name="pointer_arithmetic" attr.type="boolean"/>
<graph edgedefault="directed"><data key="d0">True</data>
<data key="d1">CVE-2018-16513</data>
<data key="d2">6.8</data>
<data key="d3">MEDIUM</data>
<node id="zsetcolor">
  <data key="d4">FunctionDefinition</data>
</node>
<node id="space">
  <data key="d4">Variable</data>
</node>
<node id="pattern_instance_uses_base_space">
  <data key="d4">FunctionCall</data>
</node>
<node id="gs_currentcolorspace">
  <data key="d4">FunctionCall</data>
</node>
<node id="float_params">
  <data key="d4">FunctionCall</data>
</node>
<node id="memcmp">
  <data key="d4">FunctionCall</data>
</node>
<node id="push_op_estack">
  <data key="d4">FunctionCall</data>
</node>
<node id="check_estack">
  <data key="d4">FunctionCall</data>
</node>
<node id="make_int">
  <data key="d4">FunctionCall</data>
</node>
<node id="get_space_object">
  <data key="d4">FunctionCall</data>
</node>
<node id="processing">
  <data key="d4">FunctionCall</data>
</node>
<node id="validatecomponents">
  <data key="d4">FunctionCall</data>
</node>
<node id="dict_find_string">
  <data key="d4">FunctionCall</data>
</node>
<node id="validate_spaces">
  <data key="d4">FunctionCall</data>
</node>
<node id="array_get">
  <data key="d4">FunctionCall</data>
</node>
<node id="if_0">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">(n_comps = cs_num_components(pcs</data>
</node>
<node id="if_1">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">r_has_type(op, t_dictionary</data>
</node>
<node id="if_2">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">code != 0</data>
</node>
<node id="if_3">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">code &lt; 0</data>
</node>
<node id="if_4">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">code &lt; 0</data>
</node>
<node id="if_5">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">code &lt; 0</data>
</node>
<node id="if_6">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">space-&gt;validatecomponents</data>
</node>
<node id="if_7">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">code &lt; 0</data>
</node>
<node id="if_8">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">(code = gs_setcolor(igs, &amp;cc</data>
</node>
<node id="if_9">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">n_comps &gt; n_numeric_comps</data>
</node>
<node id="if_10">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">code &lt; 0</data>
</node>
<edge source="zsetcolor" target="space">
  <data key="d6">declares</data>
</edge>
<edge source="zsetcolor" target="pattern_instance_uses_base_space">
  <data key="d6">calls</data>
</edge>
<edge source="zsetcolor" target="gs_currentcolorspace">
  <data key="d6">calls</data>
</edge>
<edge source="zsetcolor" target="float_params">
  <data key="d6">calls</data>
</edge>
<edge source="zsetcolor" target="memcmp">
  <data key="d6">calls</data>
</edge>
<edge source="zsetcolor" target="push_op_estack">
  <data key="d6">calls</data>
</edge>
<edge source="zsetcolor" target="check_estack">
  <data key="d6">calls</data>
</edge>
<edge source="zsetcolor" target="make_int">
  <data key="d6">calls</data>
</edge>
<edge source="zsetcolor" target="get_space_object">
  <data key="d6">calls</data>
</edge>
<edge source="zsetcolor" target="processing">
  <data key="d6">calls</data>
</edge>
<edge source="zsetcolor" target="validatecomponents">
  <data key="d6">calls</data>
</edge>
<edge source="zsetcolor" target="dict_find_string">
  <data key="d6">calls</data>
</edge>
<edge source="zsetcolor" target="validate_spaces">
  <data key="d6">calls</data>
</edge>
<edge source="zsetcolor" target="array_get">
  <data key="d6">calls</data>
</edge>
<edge source="zsetcolor" target="if_0">
  <data key="d6">contains</data>
</edge>
<edge source="zsetcolor" target="if_1">
  <data key="d6">contains</data>
</edge>
<edge source="zsetcolor" target="if_2">
  <data key="d6">contains</data>
</edge>
<edge source="zsetcolor" target="if_3">
  <data key="d6">contains</data>
</edge>
<edge source="zsetcolor" target="if_4">
  <data key="d6">contains</data>
</edge>
<edge source="zsetcolor" target="if_5">
  <data key="d6">contains</data>
</edge>
<edge source="zsetcolor" target="if_6">
  <data key="d6">contains</data>
</edge>
<edge source="zsetcolor" target="if_7">
  <data key="d6">contains</data>
</edge>
<edge source="zsetcolor" target="if_8">
  <data key="d6">contains</data>
</edge>
<edge source="zsetcolor" target="if_9">
  <data key="d6">contains</data>
</edge>
<edge source="zsetcolor" target="if_10">
  <data key="d6">contains</data>
</edge>
<edge source="space" target="if_6">
  <data key="d6">used_in_body</data>
</edge>
<edge source="space" target="get_space_object">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="space" target="validatecomponents">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="space" target="validate_spaces">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="space" target="if_3">
  <data key="d6">used_in_body</data>
</edge>
<edge source="space" target="if_4">
  <data key="d6">used_in_body</data>
</edge>
<edge source="space" target="if_5">
  <data key="d6">used_in_body</data>
</edge>
</graph></graphml>