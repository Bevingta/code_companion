<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"><key id="d6" for="edge" attr.name="type" attr.type="string"/>
<key id="d5" for="node" attr.name="condition" attr.type="string"/>
<key id="d4" for="node" attr.name="type" attr.type="string"/>
<key id="d3" for="graph" attr.name="severity" attr.type="string"/>
<key id="d2" for="graph" attr.name="cvss" attr.type="string"/>
<key id="d1" for="graph" attr.name="cve" attr.type="string"/>
<key id="d0" for="graph" attr.name="potential_buffer_overflow" attr.type="boolean"/>
<graph edgedefault="directed"><data key="d0">True</data>
<data key="d1">CVE-2016-0826</data>
<data key="d2">9.3</data>
<data key="d3">HIGH</data>
<node id="dump">
  <data key="d4">FunctionDefinition</data>
</node>
<node id="fd">
  <data key="d4">Variable</data>
</node>
<node id="i">
  <data key="d4">Variable</data>
</node>
<node id="appendFormat">
  <data key="d4">FunctionCall</data>
</node>
<node id="size">
  <data key="d4">FunctionCall</data>
</node>
<node id="dumpDevice">
  <data key="d4">FunctionCall</data>
</node>
<node id="unsafeAccess">
  <data key="d4">FunctionCall</data>
</node>
<node id="write">
  <data key="d4">FunctionCall</data>
</node>
<node id="append">
  <data key="d4">FunctionCall</data>
</node>
<node id="CASE_APPEND_ENUM">
  <data key="d4">FunctionCall</data>
</node>
<node id="if_0">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">p.gpsEnabled</data>
</node>
<node id="if_1">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">p.quirks.triggerAfWithAuto</data>
</node>
<node id="if_2">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">p.quirks.useZslFormat</data>
</node>
<node id="if_3">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">p.quirks.meteringCropRegion</data>
</node>
<node id="if_4">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">p.quirks.partialResults</data>
</node>
<node id="if_5">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!haveQuirk</data>
</node>
<node id="for_6">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">size_t i = 0; i &lt; p.focusingAreas.size(</data>
</node>
<node id="for_7">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">size_t i = 0; i &lt; p.meteringAreas.size(</data>
</node>
<node id="switch_8">
  <data key="d4">ControlStructure_switch</data>
  <data key="d5">p.wbMode</data>
</node>
<node id="switch_9">
  <data key="d4">ControlStructure_switch</data>
  <data key="d5">p.effectMode</data>
</node>
<node id="switch_10">
  <data key="d4">ControlStructure_switch</data>
  <data key="d5">p.antibandingMode</data>
</node>
<node id="switch_11">
  <data key="d4">ControlStructure_switch</data>
  <data key="d5">p.sceneMode</data>
</node>
<node id="switch_12">
  <data key="d4">ControlStructure_switch</data>
  <data key="d5">p.flashMode</data>
</node>
<node id="switch_13">
  <data key="d4">ControlStructure_switch</data>
  <data key="d5">p.focusMode</data>
</node>
<node id="switch_14">
  <data key="d4">ControlStructure_switch</data>
  <data key="d5">p.focusState</data>
</node>
<edge source="dump" target="fd">
  <data key="d6">declares</data>
</edge>
<edge source="dump" target="i">
  <data key="d6">declares</data>
</edge>
<edge source="dump" target="appendFormat">
  <data key="d6">calls</data>
</edge>
<edge source="dump" target="size">
  <data key="d6">calls</data>
</edge>
<edge source="dump" target="dumpDevice">
  <data key="d6">calls</data>
</edge>
<edge source="dump" target="unsafeAccess">
  <data key="d6">calls</data>
</edge>
<edge source="dump" target="write">
  <data key="d6">calls</data>
</edge>
<edge source="dump" target="append">
  <data key="d6">calls</data>
</edge>
<edge source="dump" target="CASE_APPEND_ENUM">
  <data key="d6">calls</data>
</edge>
<edge source="dump" target="if_0">
  <data key="d6">contains</data>
</edge>
<edge source="dump" target="if_1">
  <data key="d6">contains</data>
</edge>
<edge source="dump" target="if_2">
  <data key="d6">contains</data>
</edge>
<edge source="dump" target="if_3">
  <data key="d6">contains</data>
</edge>
<edge source="dump" target="if_4">
  <data key="d6">contains</data>
</edge>
<edge source="dump" target="if_5">
  <data key="d6">contains</data>
</edge>
<edge source="dump" target="for_6">
  <data key="d6">contains</data>
</edge>
<edge source="dump" target="for_7">
  <data key="d6">contains</data>
</edge>
<edge source="dump" target="switch_8">
  <data key="d6">contains</data>
</edge>
<edge source="dump" target="switch_9">
  <data key="d6">contains</data>
</edge>
<edge source="dump" target="switch_10">
  <data key="d6">contains</data>
</edge>
<edge source="dump" target="switch_11">
  <data key="d6">contains</data>
</edge>
<edge source="dump" target="switch_12">
  <data key="d6">contains</data>
</edge>
<edge source="dump" target="switch_13">
  <data key="d6">contains</data>
</edge>
<edge source="dump" target="switch_14">
  <data key="d6">contains</data>
</edge>
<edge source="fd" target="dumpDevice">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="fd" target="write">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="fd" target="dump">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="i" target="if_1">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_2">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_3">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_4">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_5">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="for_6">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="for_7">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="switch_10">
  <data key="d6">used_in_condition</data>
</edge>
</graph></graphml>