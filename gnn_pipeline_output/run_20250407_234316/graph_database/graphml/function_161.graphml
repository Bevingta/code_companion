<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"><key id="d6" for="edge" attr.name="type" attr.type="string"/>
<key id="d5" for="node" attr.name="condition" attr.type="string"/>
<key id="d4" for="node" attr.name="type" attr.type="string"/>
<key id="d3" for="graph" attr.name="severity" attr.type="string"/>
<key id="d2" for="graph" attr.name="cvss" attr.type="string"/>
<key id="d1" for="graph" attr.name="cve" attr.type="string"/>
<key id="d0" for="graph" attr.name="pointer_arithmetic" attr.type="boolean"/>
<graph edgedefault="directed"><data key="d0">True</data>
<data key="d1">CVE-2016-2106</data>
<data key="d2">5.0</data>
<data key="d3">MEDIUM</data>
<node id="EVP_EncryptUpdate">
  <data key="d4">FunctionDefinition</data>
</node>
<node id="char">
  <data key="d4">Variable</data>
</node>
<node id="inl">
  <data key="d4">Variable</data>
</node>
<node id="outl">
  <data key="d4">Variable</data>
</node>
<node id="do_cipher">
  <data key="d4">FunctionCall</data>
</node>
<node id="OPENSSL_assert">
  <data key="d4">FunctionCall</data>
</node>
<node id="memcpy">
  <data key="d4">FunctionCall</data>
</node>
<node id="if_0">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">ctx-&gt;cipher-&gt;flags &amp; EVP_CIPH_FLAG_CUSTOM_CIPHER</data>
</node>
<node id="if_1">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">i &lt; 0</data>
</node>
<node id="if_2">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">inl &lt;= 0</data>
</node>
<node id="if_3">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">ctx-&gt;buf_len == 0 &amp;&amp; (inl &amp; (ctx-&gt;block_mask</data>
</node>
<node id="if_4">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">ctx-&gt;cipher-&gt;do_cipher(ctx, out, in, inl</data>
</node>
<node id="if_5">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">i != 0</data>
</node>
<node id="if_6">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">i + inl &lt; bl</data>
</node>
<node id="if_7">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!ctx-&gt;cipher-&gt;do_cipher(ctx, out, ctx-&gt;buf, bl</data>
</node>
<node id="if_8">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">inl &gt; 0</data>
</node>
<node id="if_9">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!ctx-&gt;cipher-&gt;do_cipher(ctx, out, in, inl</data>
</node>
<node id="if_10">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">i != 0</data>
</node>
<edge source="EVP_EncryptUpdate" target="char">
  <data key="d6">declares</data>
</edge>
<edge source="EVP_EncryptUpdate" target="inl">
  <data key="d6">declares</data>
</edge>
<edge source="EVP_EncryptUpdate" target="outl">
  <data key="d6">declares</data>
</edge>
<edge source="EVP_EncryptUpdate" target="do_cipher">
  <data key="d6">calls</data>
</edge>
<edge source="EVP_EncryptUpdate" target="OPENSSL_assert">
  <data key="d6">calls</data>
</edge>
<edge source="EVP_EncryptUpdate" target="memcpy">
  <data key="d6">calls</data>
</edge>
<edge source="EVP_EncryptUpdate" target="if_0">
  <data key="d6">contains</data>
</edge>
<edge source="EVP_EncryptUpdate" target="if_1">
  <data key="d6">contains</data>
</edge>
<edge source="EVP_EncryptUpdate" target="if_2">
  <data key="d6">contains</data>
</edge>
<edge source="EVP_EncryptUpdate" target="if_3">
  <data key="d6">contains</data>
</edge>
<edge source="EVP_EncryptUpdate" target="if_4">
  <data key="d6">contains</data>
</edge>
<edge source="EVP_EncryptUpdate" target="if_5">
  <data key="d6">contains</data>
</edge>
<edge source="EVP_EncryptUpdate" target="if_6">
  <data key="d6">contains</data>
</edge>
<edge source="EVP_EncryptUpdate" target="if_7">
  <data key="d6">contains</data>
</edge>
<edge source="EVP_EncryptUpdate" target="if_8">
  <data key="d6">contains</data>
</edge>
<edge source="EVP_EncryptUpdate" target="if_9">
  <data key="d6">contains</data>
</edge>
<edge source="EVP_EncryptUpdate" target="if_10">
  <data key="d6">contains</data>
</edge>
<edge source="char" target="EVP_EncryptUpdate">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="inl" target="if_2">
  <data key="d6">used_in_body</data>
</edge>
<edge source="inl" target="if_3">
  <data key="d6">used_in_body</data>
</edge>
<edge source="inl" target="if_4">
  <data key="d6">used_in_body</data>
</edge>
<edge source="inl" target="if_6">
  <data key="d6">used_in_body</data>
</edge>
<edge source="inl" target="if_8">
  <data key="d6">used_in_body</data>
</edge>
<edge source="inl" target="if_9">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="inl" target="EVP_EncryptUpdate">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="inl" target="do_cipher">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="inl" target="memcpy">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="inl" target="if_0">
  <data key="d6">used_in_body</data>
</edge>
<edge source="inl" target="if_1">
  <data key="d6">used_in_body</data>
</edge>
<edge source="inl" target="if_5">
  <data key="d6">used_in_body</data>
</edge>
<edge source="inl" target="if_7">
  <data key="d6">used_in_body</data>
</edge>
<edge source="outl" target="EVP_EncryptUpdate">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="outl" target="if_0">
  <data key="d6">used_in_body</data>
</edge>
<edge source="outl" target="if_1">
  <data key="d6">used_in_body</data>
</edge>
<edge source="outl" target="if_2">
  <data key="d6">used_in_body</data>
</edge>
<edge source="outl" target="if_3">
  <data key="d6">used_in_body</data>
</edge>
<edge source="outl" target="if_4">
  <data key="d6">used_in_body</data>
</edge>
<edge source="outl" target="if_5">
  <data key="d6">used_in_body</data>
</edge>
<edge source="outl" target="if_6">
  <data key="d6">used_in_body</data>
</edge>
<edge source="outl" target="if_7">
  <data key="d6">used_in_body</data>
</edge>
<edge source="outl" target="if_8">
  <data key="d6">used_in_body</data>
</edge>
</graph></graphml>