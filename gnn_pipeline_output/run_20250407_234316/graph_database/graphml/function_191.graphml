<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"><key id="d6" for="edge" attr.name="type" attr.type="string"/>
<key id="d5" for="node" attr.name="condition" attr.type="string"/>
<key id="d4" for="node" attr.name="type" attr.type="string"/>
<key id="d3" for="graph" attr.name="severity" attr.type="string"/>
<key id="d2" for="graph" attr.name="cvss" attr.type="string"/>
<key id="d1" for="graph" attr.name="cve" attr.type="string"/>
<key id="d0" for="graph" attr.name="pointer_arithmetic" attr.type="boolean"/>
<graph edgedefault="directed"><data key="d0">True</data>
<data key="d1">CVE-2018-0737</data>
<data key="d2">4.3</data>
<data key="d3">MEDIUM</data>
<node id="rsa_builtin_keygen">
  <data key="d4">FunctionDefinition</data>
</node>
<node id="error">
  <data key="d4">Variable</data>
</node>
<node id="bits">
  <data key="d4">Variable</data>
</node>
<node id="BN_set_flags">
  <data key="d4">FunctionCall</data>
</node>
<node id="BN_CTX_free">
  <data key="d4">FunctionCall</data>
</node>
<node id="ERR_set_mark">
  <data key="d4">FunctionCall</data>
</node>
<node id="ERR_pop_to_mark">
  <data key="d4">FunctionCall</data>
</node>
<node id="BN_with_flags">
  <data key="d4">FunctionCall</data>
</node>
<node id="BN_free">
  <data key="d4">FunctionCall</data>
</node>
<node id="BN_CTX_get">
  <data key="d4">FunctionCall</data>
</node>
<node id="RSAerr">
  <data key="d4">FunctionCall</data>
</node>
<node id="BN_new">
  <data key="d4">FunctionCall</data>
</node>
<node id="BN_CTX_new">
  <data key="d4">FunctionCall</data>
</node>
<node id="ERR_peek_last_error">
  <data key="d4">FunctionCall</data>
</node>
<node id="BN_CTX_start">
  <data key="d4">FunctionCall</data>
</node>
<node id="if_0">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">bits &lt; 16</data>
</node>
<node id="if_1">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">ctx == NULL</data>
</node>
<node id="if_2">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">r3 == NULL</data>
</node>
<node id="if_3">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!rsa-&gt;n &amp;&amp; ((rsa-&gt;n = BN_new(</data>
</node>
<node id="if_4">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!rsa-&gt;d &amp;&amp; ((rsa-&gt;d = BN_secure_new(</data>
</node>
<node id="if_5">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!rsa-&gt;e &amp;&amp; ((rsa-&gt;e = BN_new(</data>
</node>
<node id="if_6">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!rsa-&gt;p &amp;&amp; ((rsa-&gt;p = BN_secure_new(</data>
</node>
<node id="if_7">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!rsa-&gt;q &amp;&amp; ((rsa-&gt;q = BN_secure_new(</data>
</node>
<node id="if_8">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!rsa-&gt;dmp1 &amp;&amp; ((rsa-&gt;dmp1 = BN_secure_new(</data>
</node>
<node id="if_9">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!rsa-&gt;dmq1 &amp;&amp; ((rsa-&gt;dmq1 = BN_secure_new(</data>
</node>
<node id="if_10">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!rsa-&gt;iqmp &amp;&amp; ((rsa-&gt;iqmp = BN_secure_new(</data>
</node>
<node id="if_11">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">BN_copy(rsa-&gt;e, e_value</data>
</node>
<node id="if_12">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!BN_sub(r2, rsa-&gt;p, BN_value_one(</data>
</node>
<node id="if_13">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">BN_mod_inverse(r1, r2, rsa-&gt;e, ctx</data>
</node>
<node id="if_14">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">ERR_GET_LIB(error</data>
</node>
<node id="if_15">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!BN_GENCB_call(cb, 2, n++</data>
</node>
<node id="if_16">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!BN_GENCB_call(cb, 3, 0</data>
</node>
<node id="if_17">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!BN_generate_prime_ex(rsa-&gt;q, bitsq, 0, NULL, NULL, cb</data>
</node>
<node id="if_18">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!BN_sub(r2, rsa-&gt;q, BN_value_one(</data>
</node>
<node id="if_19">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">BN_mod_inverse(r1, r2, rsa-&gt;e, ctx</data>
</node>
<node id="if_20">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">ERR_GET_LIB(error</data>
</node>
<node id="if_21">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!BN_GENCB_call(cb, 2, n++</data>
</node>
<node id="if_22">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!BN_GENCB_call(cb, 3, 1</data>
</node>
<node id="if_23">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">BN_cmp(rsa-&gt;p, rsa-&gt;q</data>
</node>
<node id="if_24">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!BN_mul(rsa-&gt;n, rsa-&gt;p, rsa-&gt;q, ctx</data>
</node>
<node id="if_25">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!BN_sub(r1, rsa-&gt;p, BN_value_one(</data>
</node>
<node id="if_26">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!BN_sub(r2, rsa-&gt;q, BN_value_one(</data>
</node>
<node id="if_27">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!BN_mul(r0, r1, r2, ctx</data>
</node>
<node id="if_28">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">pr0 == NULL</data>
</node>
<node id="if_29">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!BN_mod_inverse(rsa-&gt;d, rsa-&gt;e, pr0, ctx</data>
</node>
<node id="if_30">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">d == NULL</data>
</node>
<node id="if_31">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">   /* calculate d mod (p-1</data>
</node>
<node id="if_32">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">p == NULL</data>
</node>
<node id="if_33">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!BN_mod_inverse(rsa-&gt;iqmp, rsa-&gt;q, p, ctx</data>
</node>
<node id="if_34">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">ok == -1</data>
</node>
<node id="if_35">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">ctx != NULL</data>
</node>
<node id="for_36">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">;;</data>
</node>
<node id="for_37">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">;;</data>
</node>
<node id="while_38">
  <data key="d4">ControlStructure_while</data>
  <data key="d5">BN_cmp(rsa-&gt;p, rsa-&gt;q</data>
</node>
<edge source="rsa_builtin_keygen" target="error">
  <data key="d6">declares</data>
</edge>
<edge source="rsa_builtin_keygen" target="bits">
  <data key="d6">declares</data>
</edge>
<edge source="rsa_builtin_keygen" target="BN_set_flags">
  <data key="d6">calls</data>
</edge>
<edge source="rsa_builtin_keygen" target="BN_CTX_free">
  <data key="d6">calls</data>
</edge>
<edge source="rsa_builtin_keygen" target="ERR_set_mark">
  <data key="d6">calls</data>
</edge>
<edge source="rsa_builtin_keygen" target="ERR_pop_to_mark">
  <data key="d6">calls</data>
</edge>
<edge source="rsa_builtin_keygen" target="BN_with_flags">
  <data key="d6">calls</data>
</edge>
<edge source="rsa_builtin_keygen" target="BN_free">
  <data key="d6">calls</data>
</edge>
<edge source="rsa_builtin_keygen" target="BN_CTX_get">
  <data key="d6">calls</data>
</edge>
<edge source="rsa_builtin_keygen" target="RSAerr">
  <data key="d6">calls</data>
</edge>
<edge source="rsa_builtin_keygen" target="BN_new">
  <data key="d6">calls</data>
</edge>
<edge source="rsa_builtin_keygen" target="BN_CTX_new">
  <data key="d6">calls</data>
</edge>
<edge source="rsa_builtin_keygen" target="ERR_peek_last_error">
  <data key="d6">calls</data>
</edge>
<edge source="rsa_builtin_keygen" target="BN_CTX_start">
  <data key="d6">calls</data>
</edge>
<edge source="rsa_builtin_keygen" target="if_0">
  <data key="d6">contains</data>
</edge>
<edge source="rsa_builtin_keygen" target="if_1">
  <data key="d6">contains</data>
</edge>
<edge source="rsa_builtin_keygen" target="if_2">
  <data key="d6">contains</data>
</edge>
<edge source="rsa_builtin_keygen" target="if_3">
  <data key="d6">contains</data>
</edge>
<edge source="rsa_builtin_keygen" target="if_4">
  <data key="d6">contains</data>
</edge>
<edge source="rsa_builtin_keygen" target="if_5">
  <data key="d6">contains</data>
</edge>
<edge source="rsa_builtin_keygen" target="if_6">
  <data key="d6">contains</data>
</edge>
<edge source="rsa_builtin_keygen" target="if_7">
  <data key="d6">contains</data>
</edge>
<edge source="rsa_builtin_keygen" target="if_8">
  <data key="d6">contains</data>
</edge>
<edge source="rsa_builtin_keygen" target="if_9">
  <data key="d6">contains</data>
</edge>
<edge source="rsa_builtin_keygen" target="if_10">
  <data key="d6">contains</data>
</edge>
<edge source="rsa_builtin_keygen" target="if_11">
  <data key="d6">contains</data>
</edge>
<edge source="rsa_builtin_keygen" target="if_12">
  <data key="d6">contains</data>
</edge>
<edge source="rsa_builtin_keygen" target="if_13">
  <data key="d6">contains</data>
</edge>
<edge source="rsa_builtin_keygen" target="if_14">
  <data key="d6">contains</data>
</edge>
<edge source="rsa_builtin_keygen" target="if_15">
  <data key="d6">contains</data>
</edge>
<edge source="rsa_builtin_keygen" target="if_16">
  <data key="d6">contains</data>
</edge>
<edge source="rsa_builtin_keygen" target="if_17">
  <data key="d6">contains</data>
</edge>
<edge source="rsa_builtin_keygen" target="if_18">
  <data key="d6">contains</data>
</edge>
<edge source="rsa_builtin_keygen" target="if_19">
  <data key="d6">contains</data>
</edge>
<edge source="rsa_builtin_keygen" target="if_20">
  <data key="d6">contains</data>
</edge>
<edge source="rsa_builtin_keygen" target="if_21">
  <data key="d6">contains</data>
</edge>
<edge source="rsa_builtin_keygen" target="if_22">
  <data key="d6">contains</data>
</edge>
<edge source="rsa_builtin_keygen" target="if_23">
  <data key="d6">contains</data>
</edge>
<edge source="rsa_builtin_keygen" target="if_24">
  <data key="d6">contains</data>
</edge>
<edge source="rsa_builtin_keygen" target="if_25">
  <data key="d6">contains</data>
</edge>
<edge source="rsa_builtin_keygen" target="if_26">
  <data key="d6">contains</data>
</edge>
<edge source="rsa_builtin_keygen" target="if_27">
  <data key="d6">contains</data>
</edge>
<edge source="rsa_builtin_keygen" target="if_28">
  <data key="d6">contains</data>
</edge>
<edge source="rsa_builtin_keygen" target="if_29">
  <data key="d6">contains</data>
</edge>
<edge source="rsa_builtin_keygen" target="if_30">
  <data key="d6">contains</data>
</edge>
<edge source="rsa_builtin_keygen" target="if_31">
  <data key="d6">contains</data>
</edge>
<edge source="rsa_builtin_keygen" target="if_32">
  <data key="d6">contains</data>
</edge>
<edge source="rsa_builtin_keygen" target="if_33">
  <data key="d6">contains</data>
</edge>
<edge source="rsa_builtin_keygen" target="if_34">
  <data key="d6">contains</data>
</edge>
<edge source="rsa_builtin_keygen" target="if_35">
  <data key="d6">contains</data>
</edge>
<edge source="rsa_builtin_keygen" target="for_36">
  <data key="d6">contains</data>
</edge>
<edge source="rsa_builtin_keygen" target="for_37">
  <data key="d6">contains</data>
</edge>
<edge source="rsa_builtin_keygen" target="while_38">
  <data key="d6">contains</data>
</edge>
<edge source="error" target="if_14">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="error" target="if_20">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="error" target="if_1">
  <data key="d6">used_in_body</data>
</edge>
<edge source="error" target="if_2">
  <data key="d6">used_in_body</data>
</edge>
<edge source="error" target="if_3">
  <data key="d6">used_in_body</data>
</edge>
<edge source="error" target="if_4">
  <data key="d6">used_in_body</data>
</edge>
<edge source="error" target="if_5">
  <data key="d6">used_in_body</data>
</edge>
<edge source="error" target="if_6">
  <data key="d6">used_in_body</data>
</edge>
<edge source="error" target="if_7">
  <data key="d6">used_in_body</data>
</edge>
<edge source="error" target="if_8">
  <data key="d6">used_in_body</data>
</edge>
<edge source="error" target="if_9">
  <data key="d6">used_in_body</data>
</edge>
<edge source="error" target="if_10">
  <data key="d6">used_in_body</data>
</edge>
<edge source="error" target="if_11">
  <data key="d6">used_in_body</data>
</edge>
<edge source="error" target="if_15">
  <data key="d6">used_in_body</data>
</edge>
<edge source="error" target="if_16">
  <data key="d6">used_in_body</data>
</edge>
<edge source="error" target="for_36">
  <data key="d6">used_in_body</data>
</edge>
<edge source="error" target="for_37">
  <data key="d6">used_in_body</data>
</edge>
<edge source="bits" target="if_0">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="bits" target="if_17">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="bits" target="rsa_builtin_keygen">
  <data key="d6">used_as_parameter</data>
</edge>
</graph></graphml>