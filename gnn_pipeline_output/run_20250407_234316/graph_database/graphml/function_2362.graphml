<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"><key id="d5" for="edge" attr.name="type" attr.type="string"/>
<key id="d4" for="node" attr.name="condition" attr.type="string"/>
<key id="d3" for="node" attr.name="type" attr.type="string"/>
<key id="d2" for="graph" attr.name="severity" attr.type="string"/>
<key id="d1" for="graph" attr.name="cvss" attr.type="string"/>
<key id="d0" for="graph" attr.name="cve" attr.type="string"/>
<graph edgedefault="directed"><data key="d0">CVE-2016-7423</data>
<data key="d1">2.1</data>
<data key="d2">LOW</data>
<node id="mptsas_process_scsi_io_request">
  <data key="d3">FunctionDefinition</data>
</node>
<node id="status">
  <data key="d3">Variable</data>
</node>
<node id="trace_mptsas_sgl_overflow">
  <data key="d3">FunctionCall</data>
</node>
<node id="trace_mptsas_process_scsi_io_request">
  <data key="d3">FunctionCall</data>
</node>
<node id="sizeof">
  <data key="d3">FunctionCall</data>
</node>
<node id="mptsas_scsi_device_find">
  <data key="d3">FunctionCall</data>
</node>
<node id="memset">
  <data key="d3">FunctionCall</data>
</node>
<node id="mptsas_build_sgl">
  <data key="d3">FunctionCall</data>
</node>
<node id="mptsas_fix_scsi_io_endianness">
  <data key="d3">FunctionCall</data>
</node>
<node id="trace_mptsas_scsi_overflow">
  <data key="d3">FunctionCall</data>
</node>
<node id="mptsas_free_request">
  <data key="d3">FunctionCall</data>
</node>
<node id="mptsas_fix_scsi_io_reply_endianness">
  <data key="d3">FunctionCall</data>
</node>
<node id="scsi_req_new">
  <data key="d3">FunctionCall</data>
</node>
<node id="mptsas_reply">
  <data key="d3">FunctionCall</data>
</node>
<node id="scsi_req_continue">
  <data key="d3">FunctionCall</data>
</node>
<node id="g_new">
  <data key="d3">FunctionCall</data>
</node>
<node id="QTAILQ_INSERT_TAIL">
  <data key="d3">FunctionCall</data>
</node>
<node id="if_0">
  <data key="d3">ControlStructure_if</data>
  <data key="d4">status</data>
</node>
<node id="if_1">
  <data key="d3">ControlStructure_if</data>
  <data key="d4">status</data>
</node>
<node id="if_2">
  <data key="d3">ControlStructure_if</data>
  <data key="d4">req-&gt;qsg.size &lt; scsi_io-&gt;DataLength</data>
</node>
<node id="if_3">
  <data key="d3">ControlStructure_if</data>
  <data key="d4">req-&gt;sreq-&gt;cmd.xfer &gt; scsi_io-&gt;DataLength</data>
</node>
<node id="if_4">
  <data key="d3">ControlStructure_if</data>
  <data key="d4">req-&gt;sreq-&gt;cmd.mode != SCSI_XFER_NONE</data>
</node>
<node id="if_5">
  <data key="d3">ControlStructure_if</data>
  <data key="d4">req-&gt;sreq-&gt;cmd.mode != SCSI_XFER_TO_DEV</data>
</node>
<node id="if_6">
  <data key="d3">ControlStructure_if</data>
  <data key="d4">req-&gt;sreq-&gt;cmd.mode != SCSI_XFER_FROM_DEV</data>
</node>
<node id="if_7">
  <data key="d3">ControlStructure_if</data>
  <data key="d4">scsi_req_enqueue(req-&gt;sreq</data>
</node>
<node id="switch_8">
  <data key="d3">ControlStructure_switch</data>
  <data key="d4">scsi_io-&gt;Control &amp; MPI_SCSIIO_CONTROL_DATADIRECTION_MASK</data>
</node>
<edge source="mptsas_process_scsi_io_request" target="status">
  <data key="d5">declares</data>
</edge>
<edge source="mptsas_process_scsi_io_request" target="trace_mptsas_sgl_overflow">
  <data key="d5">calls</data>
</edge>
<edge source="mptsas_process_scsi_io_request" target="trace_mptsas_process_scsi_io_request">
  <data key="d5">calls</data>
</edge>
<edge source="mptsas_process_scsi_io_request" target="sizeof">
  <data key="d5">calls</data>
</edge>
<edge source="mptsas_process_scsi_io_request" target="mptsas_scsi_device_find">
  <data key="d5">calls</data>
</edge>
<edge source="mptsas_process_scsi_io_request" target="memset">
  <data key="d5">calls</data>
</edge>
<edge source="mptsas_process_scsi_io_request" target="mptsas_build_sgl">
  <data key="d5">calls</data>
</edge>
<edge source="mptsas_process_scsi_io_request" target="mptsas_fix_scsi_io_endianness">
  <data key="d5">calls</data>
</edge>
<edge source="mptsas_process_scsi_io_request" target="trace_mptsas_scsi_overflow">
  <data key="d5">calls</data>
</edge>
<edge source="mptsas_process_scsi_io_request" target="mptsas_free_request">
  <data key="d5">calls</data>
</edge>
<edge source="mptsas_process_scsi_io_request" target="mptsas_fix_scsi_io_reply_endianness">
  <data key="d5">calls</data>
</edge>
<edge source="mptsas_process_scsi_io_request" target="scsi_req_new">
  <data key="d5">calls</data>
</edge>
<edge source="mptsas_process_scsi_io_request" target="mptsas_reply">
  <data key="d5">calls</data>
</edge>
<edge source="mptsas_process_scsi_io_request" target="scsi_req_continue">
  <data key="d5">calls</data>
</edge>
<edge source="mptsas_process_scsi_io_request" target="g_new">
  <data key="d5">calls</data>
</edge>
<edge source="mptsas_process_scsi_io_request" target="QTAILQ_INSERT_TAIL">
  <data key="d5">calls</data>
</edge>
<edge source="mptsas_process_scsi_io_request" target="if_0">
  <data key="d5">contains</data>
</edge>
<edge source="mptsas_process_scsi_io_request" target="if_1">
  <data key="d5">contains</data>
</edge>
<edge source="mptsas_process_scsi_io_request" target="if_2">
  <data key="d5">contains</data>
</edge>
<edge source="mptsas_process_scsi_io_request" target="if_3">
  <data key="d5">contains</data>
</edge>
<edge source="mptsas_process_scsi_io_request" target="if_4">
  <data key="d5">contains</data>
</edge>
<edge source="mptsas_process_scsi_io_request" target="if_5">
  <data key="d5">contains</data>
</edge>
<edge source="mptsas_process_scsi_io_request" target="if_6">
  <data key="d5">contains</data>
</edge>
<edge source="mptsas_process_scsi_io_request" target="if_7">
  <data key="d5">contains</data>
</edge>
<edge source="mptsas_process_scsi_io_request" target="switch_8">
  <data key="d5">contains</data>
</edge>
<edge source="status" target="if_0">
  <data key="d5">used_in_condition</data>
</edge>
<edge source="status" target="if_1">
  <data key="d5">used_in_condition</data>
</edge>
<edge source="status" target="if_2">
  <data key="d5">used_in_body</data>
</edge>
</graph></graphml>