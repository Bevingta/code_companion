<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"><key id="d6" for="edge" attr.name="type" attr.type="string"/>
<key id="d5" for="node" attr.name="condition" attr.type="string"/>
<key id="d4" for="node" attr.name="type" attr.type="string"/>
<key id="d3" for="graph" attr.name="severity" attr.type="string"/>
<key id="d2" for="graph" attr.name="cvss" attr.type="string"/>
<key id="d1" for="graph" attr.name="cve" attr.type="string"/>
<key id="d0" for="graph" attr.name="pointer_arithmetic" attr.type="boolean"/>
<graph edgedefault="directed"><data key="d0">True</data>
<data key="d1">CVE-2016-2506</data>
<data key="d2">10.0</data>
<data key="d3">HIGH</data>
<node id="read">
  <data key="d4">FunctionDefinition</data>
</node>
<node id="mime">
  <data key="d4">Variable</data>
</node>
<node id="err">
  <data key="d4">Variable</data>
</node>
<node id="len">
  <data key="d4">Variable</data>
</node>
<node id="src">
  <data key="d4">Variable</data>
</node>
<node id="end">
  <data key="d4">Variable</data>
</node>
<node id="nalLength">
  <data key="d4">Variable</data>
</node>
<node id="srcOffset">
  <data key="d4">Variable</data>
</node>
<node id="dstData">
  <data key="d4">Variable</data>
</node>
<node id="dstOffset">
  <data key="d4">Variable</data>
</node>
<node id="set_range">
  <data key="d4">FunctionCall</data>
</node>
<node id="encryptedDrmBuffer">
  <data key="d4">FunctionCall</data>
</node>
<node id="U32_AT">
  <data key="d4">FunctionCall</data>
</node>
<node id="CHECK">
  <data key="d4">FunctionCall</data>
</node>
<node id="autoLock">
  <data key="d4">FunctionCall</data>
</node>
<node id="CHECK_EQ">
  <data key="d4">FunctionCall</data>
</node>
<node id="U16_AT">
  <data key="d4">FunctionCall</data>
</node>
<node id="range_length">
  <data key="d4">FunctionCall</data>
</node>
<node id="data">
  <data key="d4">FunctionCall</data>
</node>
<node id="memcpy">
  <data key="d4">FunctionCall</data>
</node>
<node id="if_0">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">(err = mOriginalMediaSource-&gt;read(buffer, options</data>
</node>
<node id="if_1">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">(err = mDrmManagerClient-&gt;decrypt(mDecryptHandle, mTrackId,
 &amp;encryptedDrmBuffer, &amp;pDecryptedDrmBuffer</data>
</node>
<node id="if_2">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">decryptedDrmBuffer.data</data>
</node>
<node id="if_3">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!strcasecmp(mime, MEDIA_MIMETYPE_VIDEO_AVC</data>
</node>
<node id="if_4">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">end &gt; len || end &lt; srcOffset</data>
</node>
<node id="if_5">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">decryptedDrmBuffer.data</data>
</node>
<node id="if_6">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">nalLength == 0</data>
</node>
<node id="if_7">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">decryptedDrmBuffer.data</data>
</node>
<node id="while_8">
  <data key="d4">ControlStructure_while</data>
  <data key="d5">srcOffset &lt; len</data>
</node>
<node id="switch_9">
  <data key="d4">ControlStructure_switch</data>
  <data key="d5">mNALLengthSize</data>
</node>
<edge source="read" target="mime">
  <data key="d6">declares</data>
</edge>
<edge source="read" target="err">
  <data key="d6">declares</data>
</edge>
<edge source="read" target="len">
  <data key="d6">declares</data>
</edge>
<edge source="read" target="src">
  <data key="d6">declares</data>
</edge>
<edge source="read" target="end">
  <data key="d6">declares</data>
</edge>
<edge source="read" target="nalLength">
  <data key="d6">declares</data>
</edge>
<edge source="read" target="srcOffset">
  <data key="d6">declares</data>
</edge>
<edge source="read" target="dstData">
  <data key="d6">declares</data>
</edge>
<edge source="read" target="dstOffset">
  <data key="d6">declares</data>
</edge>
<edge source="read" target="set_range">
  <data key="d6">calls</data>
</edge>
<edge source="read" target="encryptedDrmBuffer">
  <data key="d6">calls</data>
</edge>
<edge source="read" target="U32_AT">
  <data key="d6">calls</data>
</edge>
<edge source="read" target="CHECK">
  <data key="d6">calls</data>
</edge>
<edge source="read" target="autoLock">
  <data key="d6">calls</data>
</edge>
<edge source="read" target="CHECK_EQ">
  <data key="d6">calls</data>
</edge>
<edge source="read" target="U16_AT">
  <data key="d6">calls</data>
</edge>
<edge source="read" target="range_length">
  <data key="d6">calls</data>
</edge>
<edge source="read" target="data">
  <data key="d6">calls</data>
</edge>
<edge source="read" target="memcpy">
  <data key="d6">calls</data>
</edge>
<edge source="read" target="if_0">
  <data key="d6">contains</data>
</edge>
<edge source="read" target="if_1">
  <data key="d6">contains</data>
</edge>
<edge source="read" target="if_2">
  <data key="d6">contains</data>
</edge>
<edge source="read" target="if_3">
  <data key="d6">contains</data>
</edge>
<edge source="read" target="if_4">
  <data key="d6">contains</data>
</edge>
<edge source="read" target="if_5">
  <data key="d6">contains</data>
</edge>
<edge source="read" target="if_6">
  <data key="d6">contains</data>
</edge>
<edge source="read" target="if_7">
  <data key="d6">contains</data>
</edge>
<edge source="read" target="while_8">
  <data key="d6">contains</data>
</edge>
<edge source="read" target="switch_9">
  <data key="d6">contains</data>
</edge>
<edge source="mime" target="if_3">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="err" target="if_0">
  <data key="d6">used_in_body</data>
</edge>
<edge source="err" target="if_1">
  <data key="d6">used_in_body</data>
</edge>
<edge source="len" target="if_4">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="len" target="while_8">
  <data key="d6">used_in_body</data>
</edge>
<edge source="len" target="encryptedDrmBuffer">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="len" target="CHECK">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="len" target="CHECK_EQ">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="len" target="memcpy">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="len" target="if_3">
  <data key="d6">used_in_body</data>
</edge>
<edge source="src" target="if_4">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="src" target="while_8">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="src" target="encryptedDrmBuffer">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="src" target="CHECK">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="src" target="CHECK_EQ">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="src" target="memcpy">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="src" target="if_3">
  <data key="d6">used_in_body</data>
</edge>
<edge source="end" target="if_4">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="end" target="if_3">
  <data key="d6">used_in_body</data>
</edge>
<edge source="end" target="while_8">
  <data key="d6">used_in_body</data>
</edge>
<edge source="nalLength" target="if_6">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="nalLength" target="memcpy">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="nalLength" target="if_3">
  <data key="d6">used_in_body</data>
</edge>
<edge source="nalLength" target="while_8">
  <data key="d6">used_in_body</data>
</edge>
<edge source="nalLength" target="switch_9">
  <data key="d6">used_in_body</data>
</edge>
<edge source="srcOffset" target="if_4">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="srcOffset" target="while_8">
  <data key="d6">used_in_body</data>
</edge>
<edge source="srcOffset" target="CHECK">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="srcOffset" target="CHECK_EQ">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="srcOffset" target="memcpy">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="srcOffset" target="if_3">
  <data key="d6">used_in_body</data>
</edge>
<edge source="dstData" target="memcpy">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="dstData" target="if_3">
  <data key="d6">used_in_body</data>
</edge>
<edge source="dstData" target="while_8">
  <data key="d6">used_in_body</data>
</edge>
<edge source="dstOffset" target="CHECK">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="dstOffset" target="memcpy">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="dstOffset" target="if_3">
  <data key="d6">used_in_body</data>
</edge>
<edge source="dstOffset" target="while_8">
  <data key="d6">used_in_body</data>
</edge>
</graph></graphml>