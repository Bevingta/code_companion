<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"><key id="d6" for="edge" attr.name="type" attr.type="string"/>
<key id="d5" for="node" attr.name="condition" attr.type="string"/>
<key id="d4" for="node" attr.name="type" attr.type="string"/>
<key id="d3" for="graph" attr.name="severity" attr.type="string"/>
<key id="d2" for="graph" attr.name="cvss" attr.type="string"/>
<key id="d1" for="graph" attr.name="cve" attr.type="string"/>
<key id="d0" for="graph" attr.name="pointer_arithmetic" attr.type="boolean"/>
<graph edgedefault="directed"><data key="d0">True</data>
<data key="d1">CVE-2017-14991</data>
<data key="d2">2.1</data>
<data key="d3">LOW</data>
<node id="sg_ioctl">
  <data key="d4">FunctionDefinition</data>
</node>
<node id="filp">
  <data key="d4">Variable</data>
</node>
<node id="int">
  <data key="d4">Variable</data>
</node>
<node id="rinfo">
  <data key="d4">Variable</data>
</node>
<node id="opcode">
  <data key="d4">Variable</data>
</node>
<node id="long">
  <data key="d4">Variable</data>
</node>
<node id="iflags">
  <data key="d4">Variable</data>
</node>
<node id="read_lock_irqsave">
  <data key="d4">FunctionCall</data>
</node>
<node id="mutex_unlock">
  <data key="d4">FunctionCall</data>
</node>
<node id="get_user">
  <data key="d4">FunctionCall</data>
</node>
<node id="__copy_to_user">
  <data key="d4">FunctionCall</data>
</node>
<node id="list_for_each_entry">
  <data key="d4">FunctionCall</data>
</node>
<node id="blk_trace_startstop">
  <data key="d4">FunctionCall</data>
</node>
<node id="min_t">
  <data key="d4">FunctionCall</data>
</node>
<node id="sg_new_write">
  <data key="d4">FunctionCall</data>
</node>
<node id="kfree">
  <data key="d4">FunctionCall</data>
</node>
<node id="read_unlock_irqrestore">
  <data key="d4">FunctionCall</data>
</node>
<node id="sg_remove_scat">
  <data key="d4">FunctionCall</data>
</node>
<node id="sg_fill_request_table">
  <data key="d4">FunctionCall</data>
</node>
<node id="put_user">
  <data key="d4">FunctionCall</data>
</node>
<node id="SCSI_LOG_TIMEOUT">
  <data key="d4">FunctionCall</data>
</node>
<node id="scsi_ioctl_block_when_processing_errors">
  <data key="d4">FunctionCall</data>
</node>
<node id="blk_trace_remove">
  <data key="d4">FunctionCall</data>
</node>
<node id="kmalloc">
  <data key="d4">FunctionCall</data>
</node>
<node id="sg_new_read">
  <data key="d4">FunctionCall</data>
</node>
<node id="__put_user">
  <data key="d4">FunctionCall</data>
</node>
<node id="sg_build_reserve">
  <data key="d4">FunctionCall</data>
</node>
<node id="sg_scsi_ioctl">
  <data key="d4">FunctionCall</data>
</node>
<node id="mult_frac">
  <data key="d4">FunctionCall</data>
</node>
<node id="write_unlock_irq">
  <data key="d4">FunctionCall</data>
</node>
<node id="wait_event_interruptible">
  <data key="d4">FunctionCall</data>
</node>
<node id="scsi_ioctl">
  <data key="d4">FunctionCall</data>
</node>
<node id="write_lock_irq">
  <data key="d4">FunctionCall</data>
</node>
<node id="blk_trace_setup">
  <data key="d4">FunctionCall</data>
</node>
<node id="mutex_lock">
  <data key="d4">FunctionCall</data>
</node>
<node id="if_0">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">(!(sfp = (Sg_fd *</data>
</node>
<node id="if_1">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">atomic_read(&amp;sdp-&gt;detaching</data>
</node>
<node id="if_2">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!scsi_block_when_processing_errors(sdp-&gt;device</data>
</node>
<node id="if_3">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!access_ok(VERIFY_WRITE, p, SZ_SG_IO_HDR</data>
</node>
<node id="if_4">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">result &lt; 0</data>
</node>
<node id="if_5">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">atomic_read(&amp;sdp-&gt;detaching</data>
</node>
<node id="if_6">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">srp-&gt;done</data>
</node>
<node id="if_7">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">result</data>
</node>
<node id="if_8">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">val &lt; 0</data>
</node>
<node id="if_9">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">val &gt;= mult_frac((s64</data>
</node>
<node id="if_10">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!access_ok(VERIFY_WRITE, p, sizeof (sg_scsi_id_t</data>
</node>
<node id="if_11">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">atomic_read(&amp;sdp-&gt;detaching</data>
</node>
<node id="if_12">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">result</data>
</node>
<node id="if_13">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!access_ok(VERIFY_WRITE, ip, sizeof (int</data>
</node>
<node id="if_14">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">(1 == srp-&gt;done</data>
</node>
<node id="if_15">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">(1 == srp-&gt;done</data>
</node>
<node id="if_16">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">result</data>
</node>
<node id="if_17">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">val &lt; 0</data>
</node>
<node id="if_18">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">val != sfp-&gt;reserve.bufflen</data>
</node>
<node id="if_19">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">sfp-&gt;mmap_called ||
			    sfp-&gt;res_in_use</data>
</node>
<node id="if_20">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">result</data>
</node>
<node id="if_21">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">result</data>
</node>
<node id="if_22">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">result</data>
</node>
<node id="if_23">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">val &gt; SG_MAX_CDB_SIZE</data>
</node>
<node id="if_24">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!access_ok(VERIFY_WRITE, p, SZ_SG_REQ_INFO * SG_MAX_QUEUE</data>
</node>
<node id="if_25">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!rinfo</data>
</node>
<node id="if_26">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">atomic_read(&amp;sdp-&gt;detaching</data>
</node>
<node id="if_27">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">atomic_read(&amp;sdp-&gt;detaching</data>
</node>
<node id="if_28">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">read_only</data>
</node>
<node id="if_29">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">copy_from_user(&amp;opcode, siocp-&gt;data, 1</data>
</node>
<node id="if_30">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">sg_allow_access(filp, &amp;opcode</data>
</node>
<node id="if_31">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">result</data>
</node>
<node id="if_32">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">atomic_read(&amp;sdp-&gt;detaching</data>
</node>
<node id="if_33">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">read_only</data>
</node>
<node id="if_34">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">result</data>
</node>
<node id="switch_35">
  <data key="d4">ControlStructure_switch</data>
  <data key="d5">cmd_in</data>
</node>
<edge source="sg_ioctl" target="filp">
  <data key="d6">declares</data>
</edge>
<edge source="sg_ioctl" target="int">
  <data key="d6">declares</data>
</edge>
<edge source="sg_ioctl" target="rinfo">
  <data key="d6">declares</data>
</edge>
<edge source="sg_ioctl" target="opcode">
  <data key="d6">declares</data>
</edge>
<edge source="sg_ioctl" target="long">
  <data key="d6">declares</data>
</edge>
<edge source="sg_ioctl" target="iflags">
  <data key="d6">declares</data>
</edge>
<edge source="sg_ioctl" target="read_lock_irqsave">
  <data key="d6">calls</data>
</edge>
<edge source="sg_ioctl" target="mutex_unlock">
  <data key="d6">calls</data>
</edge>
<edge source="sg_ioctl" target="get_user">
  <data key="d6">calls</data>
</edge>
<edge source="sg_ioctl" target="__copy_to_user">
  <data key="d6">calls</data>
</edge>
<edge source="sg_ioctl" target="list_for_each_entry">
  <data key="d6">calls</data>
</edge>
<edge source="sg_ioctl" target="blk_trace_startstop">
  <data key="d6">calls</data>
</edge>
<edge source="sg_ioctl" target="min_t">
  <data key="d6">calls</data>
</edge>
<edge source="sg_ioctl" target="sg_new_write">
  <data key="d6">calls</data>
</edge>
<edge source="sg_ioctl" target="kfree">
  <data key="d6">calls</data>
</edge>
<edge source="sg_ioctl" target="read_unlock_irqrestore">
  <data key="d6">calls</data>
</edge>
<edge source="sg_ioctl" target="sg_remove_scat">
  <data key="d6">calls</data>
</edge>
<edge source="sg_ioctl" target="sg_fill_request_table">
  <data key="d6">calls</data>
</edge>
<edge source="sg_ioctl" target="put_user">
  <data key="d6">calls</data>
</edge>
<edge source="sg_ioctl" target="SCSI_LOG_TIMEOUT">
  <data key="d6">calls</data>
</edge>
<edge source="sg_ioctl" target="scsi_ioctl_block_when_processing_errors">
  <data key="d6">calls</data>
</edge>
<edge source="sg_ioctl" target="blk_trace_remove">
  <data key="d6">calls</data>
</edge>
<edge source="sg_ioctl" target="kmalloc">
  <data key="d6">calls</data>
</edge>
<edge source="sg_ioctl" target="sg_new_read">
  <data key="d6">calls</data>
</edge>
<edge source="sg_ioctl" target="__put_user">
  <data key="d6">calls</data>
</edge>
<edge source="sg_ioctl" target="sg_build_reserve">
  <data key="d6">calls</data>
</edge>
<edge source="sg_ioctl" target="sg_scsi_ioctl">
  <data key="d6">calls</data>
</edge>
<edge source="sg_ioctl" target="mult_frac">
  <data key="d6">calls</data>
</edge>
<edge source="sg_ioctl" target="write_unlock_irq">
  <data key="d6">calls</data>
</edge>
<edge source="sg_ioctl" target="wait_event_interruptible">
  <data key="d6">calls</data>
</edge>
<edge source="sg_ioctl" target="scsi_ioctl">
  <data key="d6">calls</data>
</edge>
<edge source="sg_ioctl" target="write_lock_irq">
  <data key="d6">calls</data>
</edge>
<edge source="sg_ioctl" target="blk_trace_setup">
  <data key="d6">calls</data>
</edge>
<edge source="sg_ioctl" target="mutex_lock">
  <data key="d6">calls</data>
</edge>
<edge source="sg_ioctl" target="if_0">
  <data key="d6">contains</data>
</edge>
<edge source="sg_ioctl" target="if_1">
  <data key="d6">contains</data>
</edge>
<edge source="sg_ioctl" target="if_2">
  <data key="d6">contains</data>
</edge>
<edge source="sg_ioctl" target="if_3">
  <data key="d6">contains</data>
</edge>
<edge source="sg_ioctl" target="if_4">
  <data key="d6">contains</data>
</edge>
<edge source="sg_ioctl" target="if_5">
  <data key="d6">contains</data>
</edge>
<edge source="sg_ioctl" target="if_6">
  <data key="d6">contains</data>
</edge>
<edge source="sg_ioctl" target="if_7">
  <data key="d6">contains</data>
</edge>
<edge source="sg_ioctl" target="if_8">
  <data key="d6">contains</data>
</edge>
<edge source="sg_ioctl" target="if_9">
  <data key="d6">contains</data>
</edge>
<edge source="sg_ioctl" target="if_10">
  <data key="d6">contains</data>
</edge>
<edge source="sg_ioctl" target="if_11">
  <data key="d6">contains</data>
</edge>
<edge source="sg_ioctl" target="if_12">
  <data key="d6">contains</data>
</edge>
<edge source="sg_ioctl" target="if_13">
  <data key="d6">contains</data>
</edge>
<edge source="sg_ioctl" target="if_14">
  <data key="d6">contains</data>
</edge>
<edge source="sg_ioctl" target="if_15">
  <data key="d6">contains</data>
</edge>
<edge source="sg_ioctl" target="if_16">
  <data key="d6">contains</data>
</edge>
<edge source="sg_ioctl" target="if_17">
  <data key="d6">contains</data>
</edge>
<edge source="sg_ioctl" target="if_18">
  <data key="d6">contains</data>
</edge>
<edge source="sg_ioctl" target="if_19">
  <data key="d6">contains</data>
</edge>
<edge source="sg_ioctl" target="if_20">
  <data key="d6">contains</data>
</edge>
<edge source="sg_ioctl" target="if_21">
  <data key="d6">contains</data>
</edge>
<edge source="sg_ioctl" target="if_22">
  <data key="d6">contains</data>
</edge>
<edge source="sg_ioctl" target="if_23">
  <data key="d6">contains</data>
</edge>
<edge source="sg_ioctl" target="if_24">
  <data key="d6">contains</data>
</edge>
<edge source="sg_ioctl" target="if_25">
  <data key="d6">contains</data>
</edge>
<edge source="sg_ioctl" target="if_26">
  <data key="d6">contains</data>
</edge>
<edge source="sg_ioctl" target="if_27">
  <data key="d6">contains</data>
</edge>
<edge source="sg_ioctl" target="if_28">
  <data key="d6">contains</data>
</edge>
<edge source="sg_ioctl" target="if_29">
  <data key="d6">contains</data>
</edge>
<edge source="sg_ioctl" target="if_30">
  <data key="d6">contains</data>
</edge>
<edge source="sg_ioctl" target="if_31">
  <data key="d6">contains</data>
</edge>
<edge source="sg_ioctl" target="if_32">
  <data key="d6">contains</data>
</edge>
<edge source="sg_ioctl" target="if_33">
  <data key="d6">contains</data>
</edge>
<edge source="sg_ioctl" target="if_34">
  <data key="d6">contains</data>
</edge>
<edge source="sg_ioctl" target="switch_35">
  <data key="d6">contains</data>
</edge>
<edge source="filp" target="if_30">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="filp" target="sg_ioctl">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="filp" target="sg_new_write">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="filp" target="scsi_ioctl_block_when_processing_errors">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="filp" target="sg_scsi_ioctl">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="filp" target="scsi_ioctl">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="filp" target="if_0">
  <data key="d6">used_in_body</data>
</edge>
<edge source="filp" target="if_25">
  <data key="d6">used_in_body</data>
</edge>
<edge source="filp" target="if_26">
  <data key="d6">used_in_body</data>
</edge>
<edge source="filp" target="if_27">
  <data key="d6">used_in_body</data>
</edge>
<edge source="filp" target="if_28">
  <data key="d6">used_in_body</data>
</edge>
<edge source="filp" target="switch_35">
  <data key="d6">used_in_body</data>
</edge>
<edge source="int" target="if_13">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="int" target="sg_ioctl">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="int" target="min_t">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="int" target="put_user">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="int" target="SCSI_LOG_TIMEOUT">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="int" target="__put_user">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="int" target="if_0">
  <data key="d6">used_in_body</data>
</edge>
<edge source="int" target="if_7">
  <data key="d6">used_in_body</data>
</edge>
<edge source="int" target="if_8">
  <data key="d6">used_in_body</data>
</edge>
<edge source="int" target="if_9">
  <data key="d6">used_in_body</data>
</edge>
<edge source="int" target="if_10">
  <data key="d6">used_in_body</data>
</edge>
<edge source="int" target="switch_35">
  <data key="d6">used_in_body</data>
</edge>
<edge source="rinfo" target="if_25">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="rinfo" target="__copy_to_user">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="rinfo" target="kfree">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="rinfo" target="sg_fill_request_table">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="rinfo" target="if_0">
  <data key="d6">used_in_body</data>
</edge>
<edge source="rinfo" target="if_20">
  <data key="d6">used_in_body</data>
</edge>
<edge source="rinfo" target="if_21">
  <data key="d6">used_in_body</data>
</edge>
<edge source="rinfo" target="if_22">
  <data key="d6">used_in_body</data>
</edge>
<edge source="rinfo" target="if_23">
  <data key="d6">used_in_body</data>
</edge>
<edge source="rinfo" target="if_24">
  <data key="d6">used_in_body</data>
</edge>
<edge source="rinfo" target="switch_35">
  <data key="d6">used_in_body</data>
</edge>
<edge source="opcode" target="if_29">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="opcode" target="if_30">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="opcode" target="if_0">
  <data key="d6">used_in_body</data>
</edge>
<edge source="opcode" target="if_25">
  <data key="d6">used_in_body</data>
</edge>
<edge source="opcode" target="if_26">
  <data key="d6">used_in_body</data>
</edge>
<edge source="opcode" target="if_27">
  <data key="d6">used_in_body</data>
</edge>
<edge source="opcode" target="if_28">
  <data key="d6">used_in_body</data>
</edge>
<edge source="opcode" target="switch_35">
  <data key="d6">used_in_body</data>
</edge>
<edge source="long" target="sg_ioctl">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="iflags" target="read_lock_irqsave">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="iflags" target="read_unlock_irqrestore">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="iflags" target="if_0">
  <data key="d6">used_in_body</data>
</edge>
<edge source="iflags" target="if_11">
  <data key="d6">used_in_body</data>
</edge>
<edge source="iflags" target="if_12">
  <data key="d6">used_in_body</data>
</edge>
<edge source="iflags" target="if_13">
  <data key="d6">used_in_body</data>
</edge>
<edge source="iflags" target="if_14">
  <data key="d6">used_in_body</data>
</edge>
<edge source="iflags" target="if_20">
  <data key="d6">used_in_body</data>
</edge>
<edge source="iflags" target="if_21">
  <data key="d6">used_in_body</data>
</edge>
<edge source="iflags" target="if_22">
  <data key="d6">used_in_body</data>
</edge>
<edge source="iflags" target="if_23">
  <data key="d6">used_in_body</data>
</edge>
<edge source="iflags" target="if_24">
  <data key="d6">used_in_body</data>
</edge>
<edge source="iflags" target="switch_35">
  <data key="d6">used_in_body</data>
</edge>
</graph></graphml>