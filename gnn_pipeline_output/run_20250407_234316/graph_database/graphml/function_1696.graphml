<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"><key id="d6" for="edge" attr.name="type" attr.type="string"/>
<key id="d5" for="node" attr.name="condition" attr.type="string"/>
<key id="d4" for="node" attr.name="type" attr.type="string"/>
<key id="d3" for="graph" attr.name="severity" attr.type="string"/>
<key id="d2" for="graph" attr.name="cvss" attr.type="string"/>
<key id="d1" for="graph" attr.name="cve" attr.type="string"/>
<key id="d0" for="graph" attr.name="pointer_arithmetic" attr.type="boolean"/>
<graph edgedefault="directed"><data key="d0">True</data>
<data key="d1">CVE-2011-2864</data>
<data key="d2">5.0</data>
<data key="d3">MEDIUM</data>
<node id="ResolveCompositeGlyphs">
  <data key="d4">FunctionDefinition</data>
</node>
<node id="length">
  <data key="d4">Variable</data>
</node>
<node id="glyph_id">
  <data key="d4">Variable</data>
</node>
<node id="int">
  <data key="d4">Variable</data>
</node>
<node id="j">
  <data key="d4">Variable</data>
</node>
<node id="offset">
  <data key="d4">Variable</data>
</node>
<node id="glyph_count">
  <data key="d4">Variable</data>
</node>
<node id="i">
  <data key="d4">Variable</data>
</node>
<node id="GlyphOffset">
  <data key="d4">FunctionCall</data>
</node>
<node id="insert">
  <data key="d4">FunctionCall</data>
</node>
<node id="GlyphIndex">
  <data key="d4">FunctionCall</data>
</node>
<node id="GlyphLength">
  <data key="d4">FunctionCall</data>
</node>
<node id="Attach">
  <data key="d4">FunctionCall</data>
</node>
<node id="GetTable">
  <data key="d4">FunctionCall</data>
</node>
<node id="clear">
  <data key="d4">FunctionCall</data>
</node>
<node id="NumGlyphs">
  <data key="d4">FunctionCall</data>
</node>
<node id="if_0">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">glyph_ids == NULL || glyph_count == 0 || glyph_id_processed == NULL</data>
</node>
<node id="if_1">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">glyph_table == NULL || loca_table == NULL</data>
</node>
<node id="if_2">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">*i &lt; 0 || *i &gt;= loca_table-&gt;NumGlyphs(</data>
</node>
<node id="if_3">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">length == 0</data>
</node>
<node id="if_4">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">glyph == NULL</data>
</node>
<node id="if_5">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">glyph-&gt;GlyphType(</data>
</node>
<node id="if_6">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">glyph_id_processed-&gt;find(glyph_id</data>
</node>
<node id="for_7">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">size_t i = 0; i &lt; glyph_count; ++i</data>
</node>
<node id="for_8">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">IntegerSet::iterator i = glyph_id_remaining.begin(</data>
</node>
<node id="for_9">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">int32_t j = 0; j &lt; comp_glyph-&gt;NumGlyphs(</data>
</node>
<node id="while_10">
  <data key="d4">ControlStructure_while</data>
  <data key="d5">!glyph_id_remaining.empty(</data>
</node>
<edge source="ResolveCompositeGlyphs" target="length">
  <data key="d6">declares</data>
</edge>
<edge source="ResolveCompositeGlyphs" target="glyph_id">
  <data key="d6">declares</data>
</edge>
<edge source="ResolveCompositeGlyphs" target="int">
  <data key="d6">declares</data>
</edge>
<edge source="ResolveCompositeGlyphs" target="j">
  <data key="d6">declares</data>
</edge>
<edge source="ResolveCompositeGlyphs" target="offset">
  <data key="d6">declares</data>
</edge>
<edge source="ResolveCompositeGlyphs" target="glyph_count">
  <data key="d6">declares</data>
</edge>
<edge source="ResolveCompositeGlyphs" target="i">
  <data key="d6">declares</data>
</edge>
<edge source="ResolveCompositeGlyphs" target="GlyphOffset">
  <data key="d6">calls</data>
</edge>
<edge source="ResolveCompositeGlyphs" target="insert">
  <data key="d6">calls</data>
</edge>
<edge source="ResolveCompositeGlyphs" target="GlyphIndex">
  <data key="d6">calls</data>
</edge>
<edge source="ResolveCompositeGlyphs" target="GlyphLength">
  <data key="d6">calls</data>
</edge>
<edge source="ResolveCompositeGlyphs" target="Attach">
  <data key="d6">calls</data>
</edge>
<edge source="ResolveCompositeGlyphs" target="GetTable">
  <data key="d6">calls</data>
</edge>
<edge source="ResolveCompositeGlyphs" target="clear">
  <data key="d6">calls</data>
</edge>
<edge source="ResolveCompositeGlyphs" target="NumGlyphs">
  <data key="d6">calls</data>
</edge>
<edge source="ResolveCompositeGlyphs" target="if_0">
  <data key="d6">contains</data>
</edge>
<edge source="ResolveCompositeGlyphs" target="if_1">
  <data key="d6">contains</data>
</edge>
<edge source="ResolveCompositeGlyphs" target="if_2">
  <data key="d6">contains</data>
</edge>
<edge source="ResolveCompositeGlyphs" target="if_3">
  <data key="d6">contains</data>
</edge>
<edge source="ResolveCompositeGlyphs" target="if_4">
  <data key="d6">contains</data>
</edge>
<edge source="ResolveCompositeGlyphs" target="if_5">
  <data key="d6">contains</data>
</edge>
<edge source="ResolveCompositeGlyphs" target="if_6">
  <data key="d6">contains</data>
</edge>
<edge source="ResolveCompositeGlyphs" target="for_7">
  <data key="d6">contains</data>
</edge>
<edge source="ResolveCompositeGlyphs" target="for_8">
  <data key="d6">contains</data>
</edge>
<edge source="ResolveCompositeGlyphs" target="for_9">
  <data key="d6">contains</data>
</edge>
<edge source="ResolveCompositeGlyphs" target="while_10">
  <data key="d6">contains</data>
</edge>
<edge source="length" target="if_3">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="length" target="Attach">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="length" target="for_8">
  <data key="d6">used_in_body</data>
</edge>
<edge source="length" target="while_10">
  <data key="d6">used_in_body</data>
</edge>
<edge source="glyph_id" target="if_0">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="glyph_id" target="if_6">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="glyph_id" target="for_8">
  <data key="d6">used_in_body</data>
</edge>
<edge source="glyph_id" target="while_10">
  <data key="d6">used_in_body</data>
</edge>
<edge source="glyph_id" target="ResolveCompositeGlyphs">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="glyph_id" target="insert">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="glyph_id" target="if_5">
  <data key="d6">used_in_body</data>
</edge>
<edge source="glyph_id" target="for_9">
  <data key="d6">used_in_body</data>
</edge>
<edge source="int" target="for_9">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="int" target="ResolveCompositeGlyphs">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="j" target="for_9">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="offset" target="Attach">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="offset" target="for_8">
  <data key="d6">used_in_body</data>
</edge>
<edge source="offset" target="while_10">
  <data key="d6">used_in_body</data>
</edge>
<edge source="glyph_count" target="if_0">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="glyph_count" target="for_7">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="glyph_count" target="ResolveCompositeGlyphs">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="i" target="if_0">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_2">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_6">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="for_7">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="for_8">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="for_9">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="while_10">
  <data key="d6">used_in_condition</data>
</edge>
</graph></graphml>