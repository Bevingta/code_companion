<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"><key id="d7" for="edge" attr.name="type" attr.type="string"/>
<key id="d6" for="node" attr.name="condition" attr.type="string"/>
<key id="d5" for="node" attr.name="type" attr.type="string"/>
<key id="d4" for="graph" attr.name="severity" attr.type="string"/>
<key id="d3" for="graph" attr.name="cvss" attr.type="string"/>
<key id="d2" for="graph" attr.name="cve" attr.type="string"/>
<key id="d1" for="graph" attr.name="pointer_arithmetic" attr.type="boolean"/>
<key id="d0" for="graph" attr.name="potential_buffer_overflow" attr.type="boolean"/>
<graph edgedefault="directed"><data key="d0">True</data>
<data key="d1">True</data>
<data key="d2">CVE-2016-3899</data>
<data key="d3">7.1</data>
<data key="d4">HIGH</data>
<node id="allocateBuffersOnPort">
  <data key="d5">FunctionDefinition</data>
</node>
<node id="totalSize">
  <data key="d5">Variable</data>
</node>
<node id="padding">
  <data key="d5">Variable</data>
</node>
<node id="frameSize">
  <data key="d5">Variable</data>
</node>
<node id="err">
  <data key="d5">Variable</data>
</node>
<node id="delay">
  <data key="d5">Variable</data>
</node>
<node id="prevbuffersize">
  <data key="d5">Variable</data>
</node>
<node id="i">
  <data key="d5">Variable</data>
</node>
<node id="numchannels">
  <data key="d5">Variable</data>
</node>
<node id="size">
  <data key="d5">FunctionCall</data>
</node>
<node id="InitOMXParams">
  <data key="d5">FunctionCall</data>
</node>
<node id="sizeof">
  <data key="d5">FunctionCall</data>
</node>
<node id="CHECK">
  <data key="d5">FunctionCall</data>
</node>
<node id="CODEC_LOGE">
  <data key="d5">FunctionCall</data>
</node>
<node id="MemoryDealer">
  <data key="d5">FunctionCall</data>
</node>
<node id="storeMetaDataInBuffers">
  <data key="d5">FunctionCall</data>
</node>
<node id="getFormat">
  <data key="d5">FunctionCall</data>
</node>
<node id="clear">
  <data key="d5">FunctionCall</data>
</node>
<node id="useBuffer">
  <data key="d5">FunctionCall</data>
</node>
<node id="setObserver">
  <data key="d5">FunctionCall</data>
</node>
<node id="ALOGW">
  <data key="d5">FunctionCall</data>
</node>
<node id="itemAt">
  <data key="d5">FunctionCall</data>
</node>
<node id="LOG_ALWAYS_FATAL_IF">
  <data key="d5">FunctionCall</data>
</node>
<node id="setBuffers">
  <data key="d5">FunctionCall</data>
</node>
<node id="allocate">
  <data key="d5">FunctionCall</data>
</node>
<node id="SkipCutBuffer">
  <data key="d5">FunctionCall</data>
</node>
<node id="allocateBufferWithBackup">
  <data key="d5">FunctionCall</data>
</node>
<node id="CODEC_LOGV">
  <data key="d5">FunctionCall</data>
</node>
<node id="editItemAt">
  <data key="d5">FunctionCall</data>
</node>
<node id="ALOGE">
  <data key="d5">FunctionCall</data>
</node>
<node id="allocateBuffer">
  <data key="d5">FunctionCall</data>
</node>
<node id="getParameter">
  <data key="d5">FunctionCall</data>
</node>
<node id="pointer">
  <data key="d5">FunctionCall</data>
</node>
<node id="allocateOutputBuffersFromNativeWindow">
  <data key="d5">FunctionCall</data>
</node>
<node id="MediaBuffer">
  <data key="d5">FunctionCall</data>
</node>
<node id="push">
  <data key="d5">FunctionCall</data>
</node>
<node id="if_0">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">mNativeWindow != NULL &amp;&amp; portIndex == kPortIndexOutput</data>
</node>
<node id="if_1">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">(mFlags &amp; kEnableGrallocUsageProtected</data>
</node>
<node id="if_2">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">(mFlags &amp; kStoreMetaDataInVideoBuffers</data>
</node>
<node id="if_3">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">err != OK</data>
</node>
<node id="if_4">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">err != OK</data>
</node>
<node id="if_5">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">def.nBufferSize != 0 &amp;&amp; def.nBufferCountActual &gt; SIZE_MAX / def.nBufferSize</data>
</node>
<node id="if_6">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">portIndex == kPortIndexInput
 &amp;&amp; ((mQuirks &amp; kRequiresAllocateBufferOnInputPorts</data>
</node>
<node id="if_7">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">mOMXLivesLocally</data>
</node>
<node id="if_8">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">portIndex == kPortIndexOutput
 &amp;&amp; (mQuirks &amp; kRequiresAllocateBufferOnOutputPorts</data>
</node>
<node id="if_9">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">mOMXLivesLocally</data>
</node>
<node id="if_10">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">err != OK</data>
</node>
<node id="if_11">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">mem != NULL</data>
</node>
<node id="if_12">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">portIndex == kPortIndexOutput</data>
</node>
<node id="if_13">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">portIndex == kPortIndexOutput</data>
</node>
<node id="if_14">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">!meta-&gt;findInt32(kKeyEncoderDelay, &amp;delay</data>
</node>
<node id="if_15">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">!meta-&gt;findInt32(kKeyEncoderPadding, &amp;padding</data>
</node>
<node id="if_16">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">delay + padding</data>
</node>
<node id="if_17">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">mOutputFormat-&gt;findInt32(kKeyChannelCount, &amp;numchannels</data>
</node>
<node id="if_18">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">mSkipCutBuffer != NULL</data>
</node>
<node id="if_19">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">prevbuffersize != 0</data>
</node>
<node id="if_20">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">portIndex == kPortIndexInput &amp;&amp; (mFlags &amp; kUseSecureInputBuffers</data>
</node>
<node id="if_21">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">err != OK</data>
</node>
<node id="for_22">
  <data key="d5">ControlStructure_for</data>
  <data key="d6">OMX_U32 i = 0; i &lt; def.nBufferCountActual; ++i</data>
</node>
<node id="for_23">
  <data key="d5">ControlStructure_for</data>
  <data key="d6">size_t i = 0; i &lt; def.nBufferCountActual; ++i</data>
</node>
<node id="for_24">
  <data key="d5">ControlStructure_for</data>
  <data key="d6">size_t i = 0; i &lt; def.nBufferCountActual; ++i</data>
</node>
<edge source="allocateBuffersOnPort" target="totalSize">
  <data key="d7">declares</data>
</edge>
<edge source="allocateBuffersOnPort" target="padding">
  <data key="d7">declares</data>
</edge>
<edge source="allocateBuffersOnPort" target="frameSize">
  <data key="d7">declares</data>
</edge>
<edge source="allocateBuffersOnPort" target="err">
  <data key="d7">declares</data>
</edge>
<edge source="allocateBuffersOnPort" target="delay">
  <data key="d7">declares</data>
</edge>
<edge source="allocateBuffersOnPort" target="prevbuffersize">
  <data key="d7">declares</data>
</edge>
<edge source="allocateBuffersOnPort" target="i">
  <data key="d7">declares</data>
</edge>
<edge source="allocateBuffersOnPort" target="numchannels">
  <data key="d7">declares</data>
</edge>
<edge source="allocateBuffersOnPort" target="size">
  <data key="d7">calls</data>
</edge>
<edge source="allocateBuffersOnPort" target="InitOMXParams">
  <data key="d7">calls</data>
</edge>
<edge source="allocateBuffersOnPort" target="sizeof">
  <data key="d7">calls</data>
</edge>
<edge source="allocateBuffersOnPort" target="CHECK">
  <data key="d7">calls</data>
</edge>
<edge source="allocateBuffersOnPort" target="CODEC_LOGE">
  <data key="d7">calls</data>
</edge>
<edge source="allocateBuffersOnPort" target="MemoryDealer">
  <data key="d7">calls</data>
</edge>
<edge source="allocateBuffersOnPort" target="storeMetaDataInBuffers">
  <data key="d7">calls</data>
</edge>
<edge source="allocateBuffersOnPort" target="getFormat">
  <data key="d7">calls</data>
</edge>
<edge source="allocateBuffersOnPort" target="clear">
  <data key="d7">calls</data>
</edge>
<edge source="allocateBuffersOnPort" target="useBuffer">
  <data key="d7">calls</data>
</edge>
<edge source="allocateBuffersOnPort" target="setObserver">
  <data key="d7">calls</data>
</edge>
<edge source="allocateBuffersOnPort" target="ALOGW">
  <data key="d7">calls</data>
</edge>
<edge source="allocateBuffersOnPort" target="itemAt">
  <data key="d7">calls</data>
</edge>
<edge source="allocateBuffersOnPort" target="LOG_ALWAYS_FATAL_IF">
  <data key="d7">calls</data>
</edge>
<edge source="allocateBuffersOnPort" target="setBuffers">
  <data key="d7">calls</data>
</edge>
<edge source="allocateBuffersOnPort" target="allocate">
  <data key="d7">calls</data>
</edge>
<edge source="allocateBuffersOnPort" target="SkipCutBuffer">
  <data key="d7">calls</data>
</edge>
<edge source="allocateBuffersOnPort" target="allocateBufferWithBackup">
  <data key="d7">calls</data>
</edge>
<edge source="allocateBuffersOnPort" target="CODEC_LOGV">
  <data key="d7">calls</data>
</edge>
<edge source="allocateBuffersOnPort" target="editItemAt">
  <data key="d7">calls</data>
</edge>
<edge source="allocateBuffersOnPort" target="ALOGE">
  <data key="d7">calls</data>
</edge>
<edge source="allocateBuffersOnPort" target="allocateBuffer">
  <data key="d7">calls</data>
</edge>
<edge source="allocateBuffersOnPort" target="getParameter">
  <data key="d7">calls</data>
</edge>
<edge source="allocateBuffersOnPort" target="pointer">
  <data key="d7">calls</data>
</edge>
<edge source="allocateBuffersOnPort" target="allocateOutputBuffersFromNativeWindow">
  <data key="d7">calls</data>
</edge>
<edge source="allocateBuffersOnPort" target="MediaBuffer">
  <data key="d7">calls</data>
</edge>
<edge source="allocateBuffersOnPort" target="push">
  <data key="d7">calls</data>
</edge>
<edge source="allocateBuffersOnPort" target="if_0">
  <data key="d7">contains</data>
</edge>
<edge source="allocateBuffersOnPort" target="if_1">
  <data key="d7">contains</data>
</edge>
<edge source="allocateBuffersOnPort" target="if_2">
  <data key="d7">contains</data>
</edge>
<edge source="allocateBuffersOnPort" target="if_3">
  <data key="d7">contains</data>
</edge>
<edge source="allocateBuffersOnPort" target="if_4">
  <data key="d7">contains</data>
</edge>
<edge source="allocateBuffersOnPort" target="if_5">
  <data key="d7">contains</data>
</edge>
<edge source="allocateBuffersOnPort" target="if_6">
  <data key="d7">contains</data>
</edge>
<edge source="allocateBuffersOnPort" target="if_7">
  <data key="d7">contains</data>
</edge>
<edge source="allocateBuffersOnPort" target="if_8">
  <data key="d7">contains</data>
</edge>
<edge source="allocateBuffersOnPort" target="if_9">
  <data key="d7">contains</data>
</edge>
<edge source="allocateBuffersOnPort" target="if_10">
  <data key="d7">contains</data>
</edge>
<edge source="allocateBuffersOnPort" target="if_11">
  <data key="d7">contains</data>
</edge>
<edge source="allocateBuffersOnPort" target="if_12">
  <data key="d7">contains</data>
</edge>
<edge source="allocateBuffersOnPort" target="if_13">
  <data key="d7">contains</data>
</edge>
<edge source="allocateBuffersOnPort" target="if_14">
  <data key="d7">contains</data>
</edge>
<edge source="allocateBuffersOnPort" target="if_15">
  <data key="d7">contains</data>
</edge>
<edge source="allocateBuffersOnPort" target="if_16">
  <data key="d7">contains</data>
</edge>
<edge source="allocateBuffersOnPort" target="if_17">
  <data key="d7">contains</data>
</edge>
<edge source="allocateBuffersOnPort" target="if_18">
  <data key="d7">contains</data>
</edge>
<edge source="allocateBuffersOnPort" target="if_19">
  <data key="d7">contains</data>
</edge>
<edge source="allocateBuffersOnPort" target="if_20">
  <data key="d7">contains</data>
</edge>
<edge source="allocateBuffersOnPort" target="if_21">
  <data key="d7">contains</data>
</edge>
<edge source="allocateBuffersOnPort" target="for_22">
  <data key="d7">contains</data>
</edge>
<edge source="allocateBuffersOnPort" target="for_23">
  <data key="d7">contains</data>
</edge>
<edge source="allocateBuffersOnPort" target="for_24">
  <data key="d7">contains</data>
</edge>
<edge source="totalSize" target="MemoryDealer">
  <data key="d7">used_as_parameter</data>
</edge>
<edge source="padding" target="if_15">
  <data key="d7">used_in_body</data>
</edge>
<edge source="padding" target="if_16">
  <data key="d7">used_in_body</data>
</edge>
<edge source="padding" target="SkipCutBuffer">
  <data key="d7">used_as_parameter</data>
</edge>
<edge source="padding" target="if_13">
  <data key="d7">used_in_body</data>
</edge>
<edge source="padding" target="if_17">
  <data key="d7">used_in_body</data>
</edge>
<edge source="frameSize" target="SkipCutBuffer">
  <data key="d7">used_as_parameter</data>
</edge>
<edge source="frameSize" target="if_13">
  <data key="d7">used_in_body</data>
</edge>
<edge source="frameSize" target="if_16">
  <data key="d7">used_in_body</data>
</edge>
<edge source="frameSize" target="if_17">
  <data key="d7">used_in_body</data>
</edge>
<edge source="err" target="if_3">
  <data key="d7">used_in_body</data>
</edge>
<edge source="err" target="if_4">
  <data key="d7">used_in_body</data>
</edge>
<edge source="err" target="if_10">
  <data key="d7">used_in_body</data>
</edge>
<edge source="err" target="if_21">
  <data key="d7">used_in_body</data>
</edge>
<edge source="err" target="if_2">
  <data key="d7">used_in_body</data>
</edge>
<edge source="err" target="if_6">
  <data key="d7">used_in_body</data>
</edge>
<edge source="err" target="if_7">
  <data key="d7">used_in_body</data>
</edge>
<edge source="err" target="if_8">
  <data key="d7">used_in_body</data>
</edge>
<edge source="err" target="if_9">
  <data key="d7">used_in_body</data>
</edge>
<edge source="err" target="if_20">
  <data key="d7">used_in_body</data>
</edge>
<edge source="err" target="for_22">
  <data key="d7">used_in_body</data>
</edge>
<edge source="delay" target="if_14">
  <data key="d7">used_in_body</data>
</edge>
<edge source="delay" target="if_16">
  <data key="d7">used_in_body</data>
</edge>
<edge source="delay" target="SkipCutBuffer">
  <data key="d7">used_as_parameter</data>
</edge>
<edge source="delay" target="if_13">
  <data key="d7">used_in_body</data>
</edge>
<edge source="delay" target="if_17">
  <data key="d7">used_in_body</data>
</edge>
<edge source="prevbuffersize" target="if_19">
  <data key="d7">used_in_body</data>
</edge>
<edge source="prevbuffersize" target="ALOGW">
  <data key="d7">used_as_parameter</data>
</edge>
<edge source="prevbuffersize" target="if_13">
  <data key="d7">used_in_body</data>
</edge>
<edge source="prevbuffersize" target="if_16">
  <data key="d7">used_in_body</data>
</edge>
<edge source="prevbuffersize" target="if_17">
  <data key="d7">used_in_body</data>
</edge>
<edge source="prevbuffersize" target="if_18">
  <data key="d7">used_in_body</data>
</edge>
<edge source="i" target="if_0">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="i" target="if_2">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="i" target="if_5">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="i" target="if_6">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="i" target="if_7">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="i" target="if_8">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="i" target="if_9">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="i" target="if_14">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="i" target="if_15">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="i" target="if_16">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="i" target="if_17">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="i" target="if_18">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="i" target="if_19">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="i" target="for_22">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="i" target="for_23">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="i" target="for_24">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="numchannels" target="if_17">
  <data key="d7">used_in_body</data>
</edge>
<edge source="numchannels" target="if_13">
  <data key="d7">used_in_body</data>
</edge>
<edge source="numchannels" target="if_16">
  <data key="d7">used_in_body</data>
</edge>
</graph></graphml>