<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"><key id="d7" for="edge" attr.name="type" attr.type="string"/>
<key id="d6" for="node" attr.name="condition" attr.type="string"/>
<key id="d5" for="node" attr.name="type" attr.type="string"/>
<key id="d4" for="graph" attr.name="severity" attr.type="string"/>
<key id="d3" for="graph" attr.name="cvss" attr.type="string"/>
<key id="d2" for="graph" attr.name="cve" attr.type="string"/>
<key id="d1" for="graph" attr.name="memory_allocation" attr.type="boolean"/>
<key id="d0" for="graph" attr.name="pointer_arithmetic" attr.type="boolean"/>
<graph edgedefault="directed"><data key="d0">True</data>
<data key="d1">True</data>
<data key="d2">CVE-2018-8785</data>
<data key="d3">7.5</data>
<data key="d4">HIGH</data>
<node id="zgfx_decompress">
  <data key="d5">FunctionDefinition</data>
</node>
<node id="status">
  <data key="d5">Variable</data>
</node>
<node id="descriptor">
  <data key="d5">FunctionCall</data>
</node>
<node id="Stream_Free">
  <data key="d5">FunctionCall</data>
</node>
<node id="Stream_Read_UINT16">
  <data key="d5">FunctionCall</data>
</node>
<node id="malloc">
  <data key="d5">FunctionCall</data>
</node>
<node id="CopyMemory">
  <data key="d5">FunctionCall</data>
</node>
<node id="segmentSize">
  <data key="d5">FunctionCall</data>
</node>
<node id="Stream_Read_UINT32">
  <data key="d5">FunctionCall</data>
</node>
<node id="Stream_Read_UINT8">
  <data key="d5">FunctionCall</data>
</node>
<node id="segmentCount">
  <data key="d5">FunctionCall</data>
</node>
<node id="Stream_New">
  <data key="d5">FunctionCall</data>
</node>
<node id="uncompressedSize">
  <data key="d5">FunctionCall</data>
</node>
<node id="if_0">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">!stream</data>
</node>
<node id="if_1">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">Stream_GetRemainingLength(stream</data>
</node>
<node id="if_2">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">descriptor == ZGFX_SEGMENTED_SINGLE</data>
</node>
<node id="if_3">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">!zgfx_decompress_segment(zgfx, stream, Stream_GetRemainingLength(stream</data>
</node>
<node id="if_4">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">zgfx-&gt;OutputCount &gt; 0</data>
</node>
<node id="if_5">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">!*ppDstData</data>
</node>
<node id="if_6">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">descriptor == ZGFX_SEGMENTED_MULTIPART</data>
</node>
<node id="if_7">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">Stream_GetRemainingLength(stream</data>
</node>
<node id="if_8">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">Stream_GetRemainingLength(stream</data>
</node>
<node id="if_9">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">!pConcatenated</data>
</node>
<node id="if_10">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">Stream_GetRemainingLength(stream</data>
</node>
<node id="if_11">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">!zgfx_decompress_segment(zgfx, stream, segmentSize</data>
</node>
<node id="for_12">
  <data key="d5">ControlStructure_for</data>
  <data key="d6">segmentNumber = 0; segmentNumber &lt; segmentCount; segmentNumber++</data>
</node>
<edge source="zgfx_decompress" target="status">
  <data key="d7">declares</data>
</edge>
<edge source="zgfx_decompress" target="descriptor">
  <data key="d7">calls</data>
</edge>
<edge source="zgfx_decompress" target="Stream_Free">
  <data key="d7">calls</data>
</edge>
<edge source="zgfx_decompress" target="Stream_Read_UINT16">
  <data key="d7">calls</data>
</edge>
<edge source="zgfx_decompress" target="malloc">
  <data key="d7">calls</data>
</edge>
<edge source="zgfx_decompress" target="CopyMemory">
  <data key="d7">calls</data>
</edge>
<edge source="zgfx_decompress" target="segmentSize">
  <data key="d7">calls</data>
</edge>
<edge source="zgfx_decompress" target="Stream_Read_UINT32">
  <data key="d7">calls</data>
</edge>
<edge source="zgfx_decompress" target="Stream_Read_UINT8">
  <data key="d7">calls</data>
</edge>
<edge source="zgfx_decompress" target="segmentCount">
  <data key="d7">calls</data>
</edge>
<edge source="zgfx_decompress" target="Stream_New">
  <data key="d7">calls</data>
</edge>
<edge source="zgfx_decompress" target="uncompressedSize">
  <data key="d7">calls</data>
</edge>
<edge source="zgfx_decompress" target="if_0">
  <data key="d7">contains</data>
</edge>
<edge source="zgfx_decompress" target="if_1">
  <data key="d7">contains</data>
</edge>
<edge source="zgfx_decompress" target="if_2">
  <data key="d7">contains</data>
</edge>
<edge source="zgfx_decompress" target="if_3">
  <data key="d7">contains</data>
</edge>
<edge source="zgfx_decompress" target="if_4">
  <data key="d7">contains</data>
</edge>
<edge source="zgfx_decompress" target="if_5">
  <data key="d7">contains</data>
</edge>
<edge source="zgfx_decompress" target="if_6">
  <data key="d7">contains</data>
</edge>
<edge source="zgfx_decompress" target="if_7">
  <data key="d7">contains</data>
</edge>
<edge source="zgfx_decompress" target="if_8">
  <data key="d7">contains</data>
</edge>
<edge source="zgfx_decompress" target="if_9">
  <data key="d7">contains</data>
</edge>
<edge source="zgfx_decompress" target="if_10">
  <data key="d7">contains</data>
</edge>
<edge source="zgfx_decompress" target="if_11">
  <data key="d7">contains</data>
</edge>
<edge source="zgfx_decompress" target="for_12">
  <data key="d7">contains</data>
</edge>
</graph></graphml>