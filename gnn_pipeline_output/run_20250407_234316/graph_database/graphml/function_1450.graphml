<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"><key id="d6" for="edge" attr.name="type" attr.type="string"/>
<key id="d5" for="node" attr.name="condition" attr.type="string"/>
<key id="d4" for="node" attr.name="type" attr.type="string"/>
<key id="d3" for="graph" attr.name="severity" attr.type="string"/>
<key id="d2" for="graph" attr.name="cvss" attr.type="string"/>
<key id="d1" for="graph" attr.name="cve" attr.type="string"/>
<key id="d0" for="graph" attr.name="pointer_arithmetic" attr.type="boolean"/>
<graph edgedefault="directed"><data key="d0">True</data>
<data key="d1">CVE-2019-13308</data>
<data key="d2">6.8</data>
<data key="d3">MEDIUM</data>
<node id="ComplexImages">
  <data key="d4">FunctionDefinition</data>
</node>
<node id="snr">
  <data key="d4">Variable</data>
</node>
<node id="y">
  <data key="d4">Variable</data>
</node>
<node id="artifact">
  <data key="d4">Variable</data>
</node>
<node id="x">
  <data key="d4">Variable</data>
</node>
<node id="gamma">
  <data key="d4">Variable</data>
</node>
<node id="NewImageList">
  <data key="d4">FunctionCall</data>
</node>
<node id="defined">
  <data key="d4">FunctionCall</data>
</node>
<node id="sqrt">
  <data key="d4">FunctionCall</data>
</node>
<node id="assert">
  <data key="d4">FunctionCall</data>
</node>
<node id="sin">
  <data key="d4">FunctionCall</data>
</node>
<node id="atan2">
  <data key="d4">FunctionCall</data>
</node>
<node id="AcquireAuthenticCacheView">
  <data key="d4">FunctionCall</data>
</node>
<node id="ThrowMagickException">
  <data key="d4">FunctionCall</data>
</node>
<node id="SetImageProgress">
  <data key="d4">FunctionCall</data>
</node>
<node id="AppendImageToList">
  <data key="d4">FunctionCall</data>
</node>
<node id="GetImageArtifact">
  <data key="d4">FunctionCall</data>
</node>
<node id="cos">
  <data key="d4">FunctionCall</data>
</node>
<node id="DestroyCacheView">
  <data key="d4">FunctionCall</data>
</node>
<node id="CloneImage">
  <data key="d4">FunctionCall</data>
</node>
<node id="AcquireVirtualCacheView">
  <data key="d4">FunctionCall</data>
</node>
<node id="QueueCacheViewAuthenticPixels">
  <data key="d4">FunctionCall</data>
</node>
<node id="GetCacheViewVirtualPixels">
  <data key="d4">FunctionCall</data>
</node>
<node id="PerceptibleReciprocal">
  <data key="d4">FunctionCall</data>
</node>
<node id="DestroyImageList">
  <data key="d4">FunctionCall</data>
</node>
<node id="if_0">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">images-&gt;debug != MagickFalse</data>
</node>
<node id="if_1">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">images-&gt;next == (Image *</data>
</node>
<node id="if_2">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">image == (Image *</data>
</node>
<node id="if_3">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">SetImageStorageClass(image,DirectClass</data>
</node>
<node id="if_4">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">image == (Image *</data>
</node>
<node id="if_5">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">artifact != (const char *</data>
</node>
<node id="if_6">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">(images-&gt;next-&gt;next != (Image *</data>
</node>
<node id="if_7">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">status == MagickFalse</data>
</node>
<node id="if_8">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">(Ar == (const PixelPacket *</data>
</node>
<node id="if_9">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">images-&gt;matte != MagickFalse</data>
</node>
<node id="if_10">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">images-&gt;matte != MagickFalse</data>
</node>
<node id="if_11">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">images-&gt;matte != MagickFalse</data>
</node>
<node id="if_12">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">images-&gt;matte != MagickFalse</data>
</node>
<node id="if_13">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">images-&gt;matte != MagickFalse</data>
</node>
<node id="if_14">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">images-&gt;matte != MagickFalse</data>
</node>
<node id="if_15">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">images-&gt;matte != MagickFalse</data>
</node>
<node id="if_16">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">SyncCacheViewAuthenticPixels(Ci_view,exception</data>
</node>
<node id="if_17">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">SyncCacheViewAuthenticPixels(Cr_view,exception</data>
</node>
<node id="if_18">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">images-&gt;progress_monitor != (MagickProgressMonitor</data>
</node>
<node id="if_19">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">proceed == MagickFalse</data>
</node>
<node id="if_20">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">status == MagickFalse</data>
</node>
<node id="for_21">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">y=0; y &lt; (ssize_t</data>
</node>
<node id="for_22">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">x=0; x &lt; (ssize_t</data>
</node>
<node id="switch_23">
  <data key="d4">ControlStructure_switch</data>
  <data key="d5">op</data>
</node>
<edge source="ComplexImages" target="snr">
  <data key="d6">declares</data>
</edge>
<edge source="ComplexImages" target="y">
  <data key="d6">declares</data>
</edge>
<edge source="ComplexImages" target="artifact">
  <data key="d6">declares</data>
</edge>
<edge source="ComplexImages" target="x">
  <data key="d6">declares</data>
</edge>
<edge source="ComplexImages" target="gamma">
  <data key="d6">declares</data>
</edge>
<edge source="ComplexImages" target="NewImageList">
  <data key="d6">calls</data>
</edge>
<edge source="ComplexImages" target="defined">
  <data key="d6">calls</data>
</edge>
<edge source="ComplexImages" target="sqrt">
  <data key="d6">calls</data>
</edge>
<edge source="ComplexImages" target="assert">
  <data key="d6">calls</data>
</edge>
<edge source="ComplexImages" target="sin">
  <data key="d6">calls</data>
</edge>
<edge source="ComplexImages" target="atan2">
  <data key="d6">calls</data>
</edge>
<edge source="ComplexImages" target="AcquireAuthenticCacheView">
  <data key="d6">calls</data>
</edge>
<edge source="ComplexImages" target="ThrowMagickException">
  <data key="d6">calls</data>
</edge>
<edge source="ComplexImages" target="SetImageProgress">
  <data key="d6">calls</data>
</edge>
<edge source="ComplexImages" target="AppendImageToList">
  <data key="d6">calls</data>
</edge>
<edge source="ComplexImages" target="GetImageArtifact">
  <data key="d6">calls</data>
</edge>
<edge source="ComplexImages" target="cos">
  <data key="d6">calls</data>
</edge>
<edge source="ComplexImages" target="DestroyCacheView">
  <data key="d6">calls</data>
</edge>
<edge source="ComplexImages" target="CloneImage">
  <data key="d6">calls</data>
</edge>
<edge source="ComplexImages" target="AcquireVirtualCacheView">
  <data key="d6">calls</data>
</edge>
<edge source="ComplexImages" target="QueueCacheViewAuthenticPixels">
  <data key="d6">calls</data>
</edge>
<edge source="ComplexImages" target="GetCacheViewVirtualPixels">
  <data key="d6">calls</data>
</edge>
<edge source="ComplexImages" target="PerceptibleReciprocal">
  <data key="d6">calls</data>
</edge>
<edge source="ComplexImages" target="DestroyImageList">
  <data key="d6">calls</data>
</edge>
<edge source="ComplexImages" target="if_0">
  <data key="d6">contains</data>
</edge>
<edge source="ComplexImages" target="if_1">
  <data key="d6">contains</data>
</edge>
<edge source="ComplexImages" target="if_2">
  <data key="d6">contains</data>
</edge>
<edge source="ComplexImages" target="if_3">
  <data key="d6">contains</data>
</edge>
<edge source="ComplexImages" target="if_4">
  <data key="d6">contains</data>
</edge>
<edge source="ComplexImages" target="if_5">
  <data key="d6">contains</data>
</edge>
<edge source="ComplexImages" target="if_6">
  <data key="d6">contains</data>
</edge>
<edge source="ComplexImages" target="if_7">
  <data key="d6">contains</data>
</edge>
<edge source="ComplexImages" target="if_8">
  <data key="d6">contains</data>
</edge>
<edge source="ComplexImages" target="if_9">
  <data key="d6">contains</data>
</edge>
<edge source="ComplexImages" target="if_10">
  <data key="d6">contains</data>
</edge>
<edge source="ComplexImages" target="if_11">
  <data key="d6">contains</data>
</edge>
<edge source="ComplexImages" target="if_12">
  <data key="d6">contains</data>
</edge>
<edge source="ComplexImages" target="if_13">
  <data key="d6">contains</data>
</edge>
<edge source="ComplexImages" target="if_14">
  <data key="d6">contains</data>
</edge>
<edge source="ComplexImages" target="if_15">
  <data key="d6">contains</data>
</edge>
<edge source="ComplexImages" target="if_16">
  <data key="d6">contains</data>
</edge>
<edge source="ComplexImages" target="if_17">
  <data key="d6">contains</data>
</edge>
<edge source="ComplexImages" target="if_18">
  <data key="d6">contains</data>
</edge>
<edge source="ComplexImages" target="if_19">
  <data key="d6">contains</data>
</edge>
<edge source="ComplexImages" target="if_20">
  <data key="d6">contains</data>
</edge>
<edge source="ComplexImages" target="for_21">
  <data key="d6">contains</data>
</edge>
<edge source="ComplexImages" target="for_22">
  <data key="d6">contains</data>
</edge>
<edge source="ComplexImages" target="switch_23">
  <data key="d6">contains</data>
</edge>
<edge source="snr" target="GetImageArtifact">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="snr" target="PerceptibleReciprocal">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="snr" target="if_11">
  <data key="d6">used_in_body</data>
</edge>
<edge source="snr" target="for_21">
  <data key="d6">used_in_body</data>
</edge>
<edge source="snr" target="for_22">
  <data key="d6">used_in_body</data>
</edge>
<edge source="snr" target="switch_23">
  <data key="d6">used_in_body</data>
</edge>
<edge source="y" target="if_16">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="y" target="if_17">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="y" target="for_21">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="artifact" target="if_5">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="x" target="if_1">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="x" target="if_6">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="x" target="if_8">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="x" target="if_16">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="x" target="if_17">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="x" target="for_22">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="gamma" target="if_11">
  <data key="d6">used_in_body</data>
</edge>
<edge source="gamma" target="for_21">
  <data key="d6">used_in_body</data>
</edge>
<edge source="gamma" target="for_22">
  <data key="d6">used_in_body</data>
</edge>
<edge source="gamma" target="switch_23">
  <data key="d6">used_in_body</data>
</edge>
</graph></graphml>