<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"><key id="d6" for="edge" attr.name="type" attr.type="string"/>
<key id="d5" for="node" attr.name="condition" attr.type="string"/>
<key id="d4" for="node" attr.name="type" attr.type="string"/>
<key id="d3" for="graph" attr.name="severity" attr.type="string"/>
<key id="d2" for="graph" attr.name="cvss" attr.type="string"/>
<key id="d1" for="graph" attr.name="cve" attr.type="string"/>
<key id="d0" for="graph" attr.name="pointer_arithmetic" attr.type="boolean"/>
<graph edgedefault="directed"><data key="d0">True</data>
<data key="d1">CVE-2013-0836</data>
<data key="d2">6.8</data>
<data key="d3">MEDIUM</data>
<node id="decode">
  <data key="d4">FunctionDefinition</data>
</node>
<node id="readOffset">
  <data key="d4">Variable</data>
</node>
<node id="newByteCount">
  <data key="d4">Variable</data>
</node>
<node id="scan">
  <data key="d4">Variable</data>
</node>
<node id="status">
  <data key="d4">Variable</data>
</node>
<node id="size">
  <data key="d4">FunctionCall</data>
</node>
<node id="defined">
  <data key="d4">FunctionCall</data>
</node>
<node id="setOrientation">
  <data key="d4">FunctionCall</data>
</node>
<node id="createColorTransform">
  <data key="d4">FunctionCall</data>
</node>
<node id="rgbOutputColorSpace">
  <data key="d4">FunctionCall</data>
</node>
<node id="readColorProfile">
  <data key="d4">FunctionCall</data>
</node>
<node id="jpeg_has_multiple_scans">
  <data key="d4">FunctionCall</data>
</node>
<node id="ENABLE">
  <data key="d4">FunctionCall</data>
</node>
<node id="ditherMode">
  <data key="d4">FunctionCall</data>
</node>
<node id="jpeg_consume_input">
  <data key="d4">FunctionCall</data>
</node>
<node id="ASSERT">
  <data key="d4">FunctionCall</data>
</node>
<node id="dctMethod">
  <data key="d4">FunctionCall</data>
</node>
<node id="jpeg_calc_output_dimensions">
  <data key="d4">FunctionCall</data>
</node>
<node id="data">
  <data key="d4">FunctionCall</data>
</node>
<node id="jpeg_finish_decompress">
  <data key="d4">FunctionCall</data>
</node>
<node id="setFailed">
  <data key="d4">FunctionCall</data>
</node>
<node id="USE">
  <data key="d4">FunctionCall</data>
</node>
<node id="doFancyUpsampling">
  <data key="d4">FunctionCall</data>
</node>
<node id="if_0">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">m_bytesToSkip</data>
</node>
<node id="if_1">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">setjmp(m_err.setjmp_buffer</data>
</node>
<node id="if_2">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">jpeg_read_header(&amp;m_info, true</data>
</node>
<node id="if_3">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">m_info.saw_JFIF_marker</data>
</node>
<node id="if_4">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">m_info.saw_Adobe_marker &amp;&amp; !m_info.Adobe_transform</data>
</node>
<node id="if_5">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!m_decoder-&gt;setSize(m_info.image_width, m_info.image_height</data>
</node>
<node id="if_6">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">m_decoder-&gt;willDownSample(</data>
</node>
<node id="if_7">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!m_decoder-&gt;ignoresGammaAndColorProfile(</data>
</node>
<node id="if_8">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">m_transform &amp;&amp; m_info.out_color_space == JCS_EXT_BGRA</data>
</node>
<node id="if_9">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">m_decodingSizeOnly</data>
</node>
<node id="if_10">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!jpeg_start_decompress(&amp;m_info</data>
</node>
<node id="if_11">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">m_state == JPEG_DECOMPRESS_SEQUENTIAL</data>
</node>
<node id="if_12">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!m_decoder-&gt;outputScanlines(</data>
</node>
<node id="if_13">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">m_state == JPEG_DECOMPRESS_PROGRESSIVE</data>
</node>
<node id="if_14">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!m_info.output_scanline</data>
</node>
<node id="if_15">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!m_info.output_scan_number &amp;&amp; (scan &gt; 1</data>
</node>
<node id="if_16">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!jpeg_start_output(&amp;m_info, scan</data>
</node>
<node id="if_17">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">m_info.output_scanline == 0xffffff</data>
</node>
<node id="if_18">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!m_decoder-&gt;outputScanlines(</data>
</node>
<node id="if_19">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!m_info.output_scanline</data>
</node>
<node id="if_20">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">m_info.output_scanline == m_info.output_height</data>
</node>
<node id="if_21">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!jpeg_finish_output(&amp;m_info</data>
</node>
<node id="if_22">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">jpeg_input_complete(&amp;m_info</data>
</node>
<node id="for_23">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">;;</data>
</node>
<node id="while_24">
  <data key="d4">ControlStructure_while</data>
  <data key="d5">(status != JPEG_SUSPENDED</data>
</node>
<node id="switch_25">
  <data key="d4">ControlStructure_switch</data>
  <data key="d5">m_state</data>
</node>
<node id="switch_26">
  <data key="d4">ControlStructure_switch</data>
  <data key="d5">m_info.jpeg_color_space</data>
</node>
<edge source="decode" target="readOffset">
  <data key="d6">declares</data>
</edge>
<edge source="decode" target="newByteCount">
  <data key="d6">declares</data>
</edge>
<edge source="decode" target="scan">
  <data key="d6">declares</data>
</edge>
<edge source="decode" target="status">
  <data key="d6">declares</data>
</edge>
<edge source="decode" target="size">
  <data key="d6">calls</data>
</edge>
<edge source="decode" target="defined">
  <data key="d6">calls</data>
</edge>
<edge source="decode" target="setOrientation">
  <data key="d6">calls</data>
</edge>
<edge source="decode" target="createColorTransform">
  <data key="d6">calls</data>
</edge>
<edge source="decode" target="rgbOutputColorSpace">
  <data key="d6">calls</data>
</edge>
<edge source="decode" target="readColorProfile">
  <data key="d6">calls</data>
</edge>
<edge source="decode" target="jpeg_has_multiple_scans">
  <data key="d6">calls</data>
</edge>
<edge source="decode" target="ENABLE">
  <data key="d6">calls</data>
</edge>
<edge source="decode" target="ditherMode">
  <data key="d6">calls</data>
</edge>
<edge source="decode" target="jpeg_consume_input">
  <data key="d6">calls</data>
</edge>
<edge source="decode" target="ASSERT">
  <data key="d6">calls</data>
</edge>
<edge source="decode" target="dctMethod">
  <data key="d6">calls</data>
</edge>
<edge source="decode" target="jpeg_calc_output_dimensions">
  <data key="d6">calls</data>
</edge>
<edge source="decode" target="data">
  <data key="d6">calls</data>
</edge>
<edge source="decode" target="jpeg_finish_decompress">
  <data key="d6">calls</data>
</edge>
<edge source="decode" target="setFailed">
  <data key="d6">calls</data>
</edge>
<edge source="decode" target="USE">
  <data key="d6">calls</data>
</edge>
<edge source="decode" target="doFancyUpsampling">
  <data key="d6">calls</data>
</edge>
<edge source="decode" target="if_0">
  <data key="d6">contains</data>
</edge>
<edge source="decode" target="if_1">
  <data key="d6">contains</data>
</edge>
<edge source="decode" target="if_2">
  <data key="d6">contains</data>
</edge>
<edge source="decode" target="if_3">
  <data key="d6">contains</data>
</edge>
<edge source="decode" target="if_4">
  <data key="d6">contains</data>
</edge>
<edge source="decode" target="if_5">
  <data key="d6">contains</data>
</edge>
<edge source="decode" target="if_6">
  <data key="d6">contains</data>
</edge>
<edge source="decode" target="if_7">
  <data key="d6">contains</data>
</edge>
<edge source="decode" target="if_8">
  <data key="d6">contains</data>
</edge>
<edge source="decode" target="if_9">
  <data key="d6">contains</data>
</edge>
<edge source="decode" target="if_10">
  <data key="d6">contains</data>
</edge>
<edge source="decode" target="if_11">
  <data key="d6">contains</data>
</edge>
<edge source="decode" target="if_12">
  <data key="d6">contains</data>
</edge>
<edge source="decode" target="if_13">
  <data key="d6">contains</data>
</edge>
<edge source="decode" target="if_14">
  <data key="d6">contains</data>
</edge>
<edge source="decode" target="if_15">
  <data key="d6">contains</data>
</edge>
<edge source="decode" target="if_16">
  <data key="d6">contains</data>
</edge>
<edge source="decode" target="if_17">
  <data key="d6">contains</data>
</edge>
<edge source="decode" target="if_18">
  <data key="d6">contains</data>
</edge>
<edge source="decode" target="if_19">
  <data key="d6">contains</data>
</edge>
<edge source="decode" target="if_20">
  <data key="d6">contains</data>
</edge>
<edge source="decode" target="if_21">
  <data key="d6">contains</data>
</edge>
<edge source="decode" target="if_22">
  <data key="d6">contains</data>
</edge>
<edge source="decode" target="for_23">
  <data key="d6">contains</data>
</edge>
<edge source="decode" target="while_24">
  <data key="d6">contains</data>
</edge>
<edge source="decode" target="switch_25">
  <data key="d6">contains</data>
</edge>
<edge source="decode" target="switch_26">
  <data key="d6">contains</data>
</edge>
<edge source="scan" target="if_14">
  <data key="d6">used_in_body</data>
</edge>
<edge source="scan" target="if_15">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="scan" target="if_16">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="scan" target="if_17">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="scan" target="if_19">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="scan" target="if_20">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="scan" target="ASSERT">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="scan" target="if_0">
  <data key="d6">used_in_body</data>
</edge>
<edge source="scan" target="if_1">
  <data key="d6">used_in_body</data>
</edge>
<edge source="scan" target="if_12">
  <data key="d6">used_in_body</data>
</edge>
<edge source="scan" target="if_13">
  <data key="d6">used_in_body</data>
</edge>
<edge source="scan" target="for_23">
  <data key="d6">used_in_body</data>
</edge>
<edge source="scan" target="while_24">
  <data key="d6">used_in_body</data>
</edge>
<edge source="scan" target="switch_25">
  <data key="d6">used_in_body</data>
</edge>
<edge source="status" target="while_24">
  <data key="d6">used_in_body</data>
</edge>
<edge source="status" target="if_0">
  <data key="d6">used_in_body</data>
</edge>
<edge source="status" target="if_1">
  <data key="d6">used_in_body</data>
</edge>
<edge source="status" target="if_12">
  <data key="d6">used_in_body</data>
</edge>
<edge source="status" target="if_13">
  <data key="d6">used_in_body</data>
</edge>
<edge source="status" target="if_14">
  <data key="d6">used_in_body</data>
</edge>
<edge source="status" target="for_23">
  <data key="d6">used_in_body</data>
</edge>
<edge source="status" target="switch_25">
  <data key="d6">used_in_body</data>
</edge>
</graph></graphml>