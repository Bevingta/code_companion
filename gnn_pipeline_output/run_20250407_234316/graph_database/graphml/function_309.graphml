<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"><key id="d7" for="edge" attr.name="type" attr.type="string"/>
<key id="d6" for="node" attr.name="condition" attr.type="string"/>
<key id="d5" for="node" attr.name="type" attr.type="string"/>
<key id="d4" for="graph" attr.name="severity" attr.type="string"/>
<key id="d3" for="graph" attr.name="cvss" attr.type="string"/>
<key id="d2" for="graph" attr.name="cve" attr.type="string"/>
<key id="d1" for="graph" attr.name="memory_allocation" attr.type="boolean"/>
<key id="d0" for="graph" attr.name="pointer_arithmetic" attr.type="boolean"/>
<graph edgedefault="directed"><data key="d0">True</data>
<data key="d1">True</data>
<data key="d2">CVE-2013-4623</data>
<data key="d3">4.3</data>
<data key="d4">MEDIUM</data>
<node id="ssl_parse_certificate">
  <data key="d5">FunctionDefinition</data>
</node>
<node id="ret">
  <data key="d5">Variable</data>
</node>
<node id="SSL_DEBUG_CRT">
  <data key="d5">FunctionCall</data>
</node>
<node id="x509parse_verify">
  <data key="d5">FunctionCall</data>
</node>
<node id="SSL_DEBUG_RET">
  <data key="d5">FunctionCall</data>
</node>
<node id="memset">
  <data key="d5">FunctionCall</data>
</node>
<node id="ssl_write_certificate">
  <data key="d5">FunctionCall</data>
</node>
<node id="SSL_DEBUG_MSG">
  <data key="d5">FunctionCall</data>
</node>
<node id="x509parse_crt">
  <data key="d5">FunctionCall</data>
</node>
<node id="if_0">
  <data key="d5">ControlStructure_if</data>
  <data key="d6"> ssl-&gt;endpoint == SSL_IS_SERVER &amp;&amp;
        ssl-&gt;authmode == SSL_VERIFY_NONE </data>
</node>
<node id="if_1">
  <data key="d5">ControlStructure_if</data>
  <data key="d6"> ( ret = ssl_read_record( ssl </data>
</node>
<node id="if_2">
  <data key="d5">ControlStructure_if</data>
  <data key="d6"> ssl-&gt;endpoint  == SSL_IS_SERVER &amp;&amp;
        ssl-&gt;minor_ver == SSL_MINOR_VERSION_0 </data>
</node>
<node id="if_3">
  <data key="d5">ControlStructure_if</data>
  <data key="d6"> ssl-&gt;in_msglen  == 2                        &amp;&amp;
            ssl-&gt;in_msgtype == SSL_MSG_ALERT            &amp;&amp;
            ssl-&gt;in_msg[0]  == SSL_ALERT_LEVEL_WARNING  &amp;&amp;
            ssl-&gt;in_msg[1]  == SSL_ALERT_MSG_NO_CERT </data>
</node>
<node id="if_4">
  <data key="d5">ControlStructure_if</data>
  <data key="d6"> ssl-&gt;authmode == SSL_VERIFY_OPTIONAL </data>
</node>
<node id="if_5">
  <data key="d5">ControlStructure_if</data>
  <data key="d6"> ssl-&gt;endpoint  == SSL_IS_SERVER &amp;&amp;
        ssl-&gt;minor_ver != SSL_MINOR_VERSION_0 </data>
</node>
<node id="if_6">
  <data key="d5">ControlStructure_if</data>
  <data key="d6"> ssl-&gt;in_hslen   == 7                    &amp;&amp;
            ssl-&gt;in_msgtype == SSL_MSG_HANDSHAKE    &amp;&amp;
            ssl-&gt;in_msg[0]  == SSL_HS_CERTIFICATE   &amp;&amp;
            memcmp( ssl-&gt;in_msg + 4, "\0\0\0", 3 </data>
</node>
<node id="if_7">
  <data key="d5">ControlStructure_if</data>
  <data key="d6"> ssl-&gt;authmode == SSL_VERIFY_REQUIRED </data>
</node>
<node id="if_8">
  <data key="d5">ControlStructure_if</data>
  <data key="d6"> ssl-&gt;in_msgtype != SSL_MSG_HANDSHAKE </data>
</node>
<node id="if_9">
  <data key="d5">ControlStructure_if</data>
  <data key="d6"> ssl-&gt;in_msg[0] != SSL_HS_CERTIFICATE || ssl-&gt;in_hslen &lt; 10 </data>
</node>
<node id="if_10">
  <data key="d5">ControlStructure_if</data>
  <data key="d6"> ssl-&gt;in_msg[4] != 0 || ssl-&gt;in_hslen != 7 + n </data>
</node>
<node id="if_11">
  <data key="d5">ControlStructure_if</data>
  <data key="d6"> ( ssl-&gt;session_negotiate-&gt;peer_cert = (x509_cert *</data>
</node>
<node id="if_12">
  <data key="d5">ControlStructure_if</data>
  <data key="d6"> ssl-&gt;in_msg[i] != 0 </data>
</node>
<node id="if_13">
  <data key="d5">ControlStructure_if</data>
  <data key="d6"> n &lt; 128 || i + n &gt; ssl-&gt;in_hslen </data>
</node>
<node id="if_14">
  <data key="d5">ControlStructure_if</data>
  <data key="d6"> ret != 0 </data>
</node>
<node id="if_15">
  <data key="d5">ControlStructure_if</data>
  <data key="d6"> ssl-&gt;authmode != SSL_VERIFY_NONE </data>
</node>
<node id="if_16">
  <data key="d5">ControlStructure_if</data>
  <data key="d6"> ssl-&gt;ca_chain == NULL </data>
</node>
<node id="if_17">
  <data key="d5">ControlStructure_if</data>
  <data key="d6"> ret != 0 </data>
</node>
<node id="if_18">
  <data key="d5">ControlStructure_if</data>
  <data key="d6"> ssl-&gt;authmode != SSL_VERIFY_REQUIRED </data>
</node>
<node id="while_19">
  <data key="d5">ControlStructure_while</data>
  <data key="d6"> i &lt; ssl-&gt;in_hslen </data>
</node>
<edge source="ssl_parse_certificate" target="ret">
  <data key="d7">declares</data>
</edge>
<edge source="ssl_parse_certificate" target="SSL_DEBUG_CRT">
  <data key="d7">calls</data>
</edge>
<edge source="ssl_parse_certificate" target="x509parse_verify">
  <data key="d7">calls</data>
</edge>
<edge source="ssl_parse_certificate" target="SSL_DEBUG_RET">
  <data key="d7">calls</data>
</edge>
<edge source="ssl_parse_certificate" target="memset">
  <data key="d7">calls</data>
</edge>
<edge source="ssl_parse_certificate" target="ssl_write_certificate">
  <data key="d7">calls</data>
</edge>
<edge source="ssl_parse_certificate" target="SSL_DEBUG_MSG">
  <data key="d7">calls</data>
</edge>
<edge source="ssl_parse_certificate" target="x509parse_crt">
  <data key="d7">calls</data>
</edge>
<edge source="ssl_parse_certificate" target="if_0">
  <data key="d7">contains</data>
</edge>
<edge source="ssl_parse_certificate" target="if_1">
  <data key="d7">contains</data>
</edge>
<edge source="ssl_parse_certificate" target="if_2">
  <data key="d7">contains</data>
</edge>
<edge source="ssl_parse_certificate" target="if_3">
  <data key="d7">contains</data>
</edge>
<edge source="ssl_parse_certificate" target="if_4">
  <data key="d7">contains</data>
</edge>
<edge source="ssl_parse_certificate" target="if_5">
  <data key="d7">contains</data>
</edge>
<edge source="ssl_parse_certificate" target="if_6">
  <data key="d7">contains</data>
</edge>
<edge source="ssl_parse_certificate" target="if_7">
  <data key="d7">contains</data>
</edge>
<edge source="ssl_parse_certificate" target="if_8">
  <data key="d7">contains</data>
</edge>
<edge source="ssl_parse_certificate" target="if_9">
  <data key="d7">contains</data>
</edge>
<edge source="ssl_parse_certificate" target="if_10">
  <data key="d7">contains</data>
</edge>
<edge source="ssl_parse_certificate" target="if_11">
  <data key="d7">contains</data>
</edge>
<edge source="ssl_parse_certificate" target="if_12">
  <data key="d7">contains</data>
</edge>
<edge source="ssl_parse_certificate" target="if_13">
  <data key="d7">contains</data>
</edge>
<edge source="ssl_parse_certificate" target="if_14">
  <data key="d7">contains</data>
</edge>
<edge source="ssl_parse_certificate" target="if_15">
  <data key="d7">contains</data>
</edge>
<edge source="ssl_parse_certificate" target="if_16">
  <data key="d7">contains</data>
</edge>
<edge source="ssl_parse_certificate" target="if_17">
  <data key="d7">contains</data>
</edge>
<edge source="ssl_parse_certificate" target="if_18">
  <data key="d7">contains</data>
</edge>
<edge source="ssl_parse_certificate" target="while_19">
  <data key="d7">contains</data>
</edge>
<edge source="ret" target="if_1">
  <data key="d7">used_in_body</data>
</edge>
<edge source="ret" target="if_14">
  <data key="d7">used_in_body</data>
</edge>
<edge source="ret" target="if_17">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="ret" target="SSL_DEBUG_RET">
  <data key="d7">used_as_parameter</data>
</edge>
<edge source="ret" target="if_15">
  <data key="d7">used_in_body</data>
</edge>
<edge source="ret" target="while_19">
  <data key="d7">used_in_body</data>
</edge>
</graph></graphml>