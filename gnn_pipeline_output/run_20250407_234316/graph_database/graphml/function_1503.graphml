<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"><key id="d6" for="edge" attr.name="type" attr.type="string"/>
<key id="d5" for="node" attr.name="condition" attr.type="string"/>
<key id="d4" for="node" attr.name="type" attr.type="string"/>
<key id="d3" for="graph" attr.name="severity" attr.type="string"/>
<key id="d2" for="graph" attr.name="cvss" attr.type="string"/>
<key id="d1" for="graph" attr.name="cve" attr.type="string"/>
<key id="d0" for="graph" attr.name="pointer_arithmetic" attr.type="boolean"/>
<graph edgedefault="directed"><data key="d0">True</data>
<data key="d1">CVE-2019-10131</data>
<data key="d2">3.6</data>
<data key="d3">LOW</data>
<node id="format8BIM">
  <data key="d4">FunctionDefinition</data>
</node>
<node id="temp">
  <data key="d4">Variable</data>
</node>
<node id="count">
  <data key="d4">Variable</data>
</node>
<node id="foundOSType">
  <data key="d4">Variable</data>
</node>
<node id="buffer">
  <data key="d4">Variable</data>
</node>
<node id="plen">
  <data key="d4">Variable</data>
</node>
<node id="else">
  <data key="d4">FunctionCall</data>
</node>
<node id="ReadBlobByte">
  <data key="d4">FunctionCall</data>
</node>
<node id="RelinquishMagickMemory">
  <data key="d4">FunctionCall</data>
</node>
<node id="ReadBlobMSBSignedLong">
  <data key="d4">FunctionCall</data>
</node>
<node id="formatIPTCfromBuffer">
  <data key="d4">FunctionCall</data>
</node>
<node id="WriteBlobString">
  <data key="d4">FunctionCall</data>
</node>
<node id="formatString">
  <data key="d4">FunctionCall</data>
</node>
<node id="AcquireQuantumMemory">
  <data key="d4">FunctionCall</data>
</node>
<node id="OSType">
  <data key="d4">FunctionCall</data>
</node>
<node id="if_0">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">c == '8'</data>
</node>
<node id="if_1">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">c == EOF</data>
</node>
<node id="if_2">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">strcmp((const char *</data>
</node>
<node id="if_3">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">ID &lt; 0</data>
</node>
<node id="if_4">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">c == EOF</data>
</node>
<node id="if_5">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">PString == (unsigned char *</data>
</node>
<node id="if_6">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">c == EOF</data>
</node>
<node id="if_7">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">(plen &amp; 0x01</data>
</node>
<node id="if_8">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">c == EOF</data>
</node>
<node id="if_9">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">(count &lt; 0</data>
</node>
<node id="if_10">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">str == (unsigned char *</data>
</node>
<node id="if_11">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">c == EOF</data>
</node>
<node id="if_12">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">ID != THUMBNAIL_ID</data>
</node>
<node id="if_13">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">strlen((const char *</data>
</node>
<node id="if_14">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">ID == IPTC_ID</data>
</node>
<node id="for_15">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">i=1; i&lt;4; i++</data>
</node>
<node id="for_16">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">i=0; i&lt;plen; i++</data>
</node>
<node id="for_17">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">i=0; i &lt; (ssize_t</data>
</node>
<node id="while_18">
  <data key="d4">ControlStructure_while</data>
  <data key="d5">c != EOF</data>
</node>
<edge source="format8BIM" target="temp">
  <data key="d6">declares</data>
</edge>
<edge source="format8BIM" target="count">
  <data key="d6">declares</data>
</edge>
<edge source="format8BIM" target="foundOSType">
  <data key="d6">declares</data>
</edge>
<edge source="format8BIM" target="buffer">
  <data key="d6">declares</data>
</edge>
<edge source="format8BIM" target="plen">
  <data key="d6">declares</data>
</edge>
<edge source="format8BIM" target="else">
  <data key="d6">calls</data>
</edge>
<edge source="format8BIM" target="ReadBlobByte">
  <data key="d6">calls</data>
</edge>
<edge source="format8BIM" target="RelinquishMagickMemory">
  <data key="d6">calls</data>
</edge>
<edge source="format8BIM" target="ReadBlobMSBSignedLong">
  <data key="d6">calls</data>
</edge>
<edge source="format8BIM" target="formatIPTCfromBuffer">
  <data key="d6">calls</data>
</edge>
<edge source="format8BIM" target="WriteBlobString">
  <data key="d6">calls</data>
</edge>
<edge source="format8BIM" target="formatString">
  <data key="d6">calls</data>
</edge>
<edge source="format8BIM" target="AcquireQuantumMemory">
  <data key="d6">calls</data>
</edge>
<edge source="format8BIM" target="OSType">
  <data key="d6">calls</data>
</edge>
<edge source="format8BIM" target="if_0">
  <data key="d6">contains</data>
</edge>
<edge source="format8BIM" target="if_1">
  <data key="d6">contains</data>
</edge>
<edge source="format8BIM" target="if_2">
  <data key="d6">contains</data>
</edge>
<edge source="format8BIM" target="if_3">
  <data key="d6">contains</data>
</edge>
<edge source="format8BIM" target="if_4">
  <data key="d6">contains</data>
</edge>
<edge source="format8BIM" target="if_5">
  <data key="d6">contains</data>
</edge>
<edge source="format8BIM" target="if_6">
  <data key="d6">contains</data>
</edge>
<edge source="format8BIM" target="if_7">
  <data key="d6">contains</data>
</edge>
<edge source="format8BIM" target="if_8">
  <data key="d6">contains</data>
</edge>
<edge source="format8BIM" target="if_9">
  <data key="d6">contains</data>
</edge>
<edge source="format8BIM" target="if_10">
  <data key="d6">contains</data>
</edge>
<edge source="format8BIM" target="if_11">
  <data key="d6">contains</data>
</edge>
<edge source="format8BIM" target="if_12">
  <data key="d6">contains</data>
</edge>
<edge source="format8BIM" target="if_13">
  <data key="d6">contains</data>
</edge>
<edge source="format8BIM" target="if_14">
  <data key="d6">contains</data>
</edge>
<edge source="format8BIM" target="for_15">
  <data key="d6">contains</data>
</edge>
<edge source="format8BIM" target="for_16">
  <data key="d6">contains</data>
</edge>
<edge source="format8BIM" target="for_17">
  <data key="d6">contains</data>
</edge>
<edge source="format8BIM" target="while_18">
  <data key="d6">contains</data>
</edge>
<edge source="temp" target="WriteBlobString">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="temp" target="if_12">
  <data key="d6">used_in_body</data>
</edge>
<edge source="temp" target="while_18">
  <data key="d6">used_in_body</data>
</edge>
<edge source="count" target="if_9">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="count" target="if_12">
  <data key="d6">used_in_body</data>
</edge>
<edge source="count" target="if_13">
  <data key="d6">used_in_body</data>
</edge>
<edge source="count" target="if_14">
  <data key="d6">used_in_body</data>
</edge>
<edge source="count" target="while_18">
  <data key="d6">used_in_body</data>
</edge>
<edge source="foundOSType" target="if_0">
  <data key="d6">used_in_body</data>
</edge>
<edge source="foundOSType" target="while_18">
  <data key="d6">used_in_body</data>
</edge>
<edge source="buffer" target="if_0">
  <data key="d6">used_in_body</data>
</edge>
<edge source="buffer" target="for_15">
  <data key="d6">used_in_body</data>
</edge>
<edge source="buffer" target="while_18">
  <data key="d6">used_in_body</data>
</edge>
<edge source="plen" target="if_7">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="plen" target="for_16">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="plen" target="if_3">
  <data key="d6">used_in_body</data>
</edge>
<edge source="plen" target="while_18">
  <data key="d6">used_in_body</data>
</edge>
</graph></graphml>