<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"><key id="d6" for="edge" attr.name="type" attr.type="string"/>
<key id="d5" for="node" attr.name="condition" attr.type="string"/>
<key id="d4" for="node" attr.name="type" attr.type="string"/>
<key id="d3" for="graph" attr.name="severity" attr.type="string"/>
<key id="d2" for="graph" attr.name="cvss" attr.type="string"/>
<key id="d1" for="graph" attr.name="cve" attr.type="string"/>
<key id="d0" for="graph" attr.name="potential_buffer_overflow" attr.type="boolean"/>
<graph edgedefault="directed"><data key="d0">True</data>
<data key="d1">CVE-2016-5400</data>
<data key="d2">4.9</data>
<data key="d3">MEDIUM</data>
<node id="airspy_probe">
  <data key="d4">FunctionDefinition</data>
</node>
<node id="intf">
  <data key="d4">Variable</data>
</node>
<node id="s">
  <data key="d4">Variable</data>
</node>
<node id="id">
  <data key="d4">Variable</data>
</node>
<node id="ret">
  <data key="d4">Variable</data>
</node>
<node id="vb2_queue_init">
  <data key="d4">FunctionCall</data>
</node>
<node id="spin_lock_init">
  <data key="d4">FunctionCall</data>
</node>
<node id="dev_info">
  <data key="d4">FunctionCall</data>
</node>
<node id="v4l2_ctrl_new_std">
  <data key="d4">FunctionCall</data>
</node>
<node id="sizeof">
  <data key="d4">FunctionCall</data>
</node>
<node id="interface_to_usbdev">
  <data key="d4">FunctionCall</data>
</node>
<node id="video_set_drvdata">
  <data key="d4">FunctionCall</data>
</node>
<node id="kfree">
  <data key="d4">FunctionCall</data>
</node>
<node id="v4l2_device_register">
  <data key="d4">FunctionCall</data>
</node>
<node id="video_register_device">
  <data key="d4">FunctionCall</data>
</node>
<node id="INIT_LIST_HEAD">
  <data key="d4">FunctionCall</data>
</node>
<node id="v4l2_ctrl_handler_init">
  <data key="d4">FunctionCall</data>
</node>
<node id="dev_notice">
  <data key="d4">FunctionCall</data>
</node>
<node id="kzalloc">
  <data key="d4">FunctionCall</data>
</node>
<node id="v4l2_ctrl_handler_setup">
  <data key="d4">FunctionCall</data>
</node>
<node id="v4l2_ctrl_auto_cluster">
  <data key="d4">FunctionCall</data>
</node>
<node id="v4l2_device_unregister">
  <data key="d4">FunctionCall</data>
</node>
<node id="v4l2_ctrl_handler_free">
  <data key="d4">FunctionCall</data>
</node>
<node id="airspy_ctrl_msg">
  <data key="d4">FunctionCall</data>
</node>
<node id="mutex_init">
  <data key="d4">FunctionCall</data>
</node>
<node id="dev_err">
  <data key="d4">FunctionCall</data>
</node>
<node id="if_0">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">s == NULL</data>
</node>
<node id="if_1">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">ret == 0</data>
</node>
<node id="if_2">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">ret</data>
</node>
<node id="if_3">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">ret</data>
</node>
<node id="if_4">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">ret</data>
</node>
<node id="if_5">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">s-&gt;hdl.error</data>
</node>
<node id="if_6">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">ret</data>
</node>
<edge source="airspy_probe" target="intf">
  <data key="d6">declares</data>
</edge>
<edge source="airspy_probe" target="s">
  <data key="d6">declares</data>
</edge>
<edge source="airspy_probe" target="id">
  <data key="d6">declares</data>
</edge>
<edge source="airspy_probe" target="ret">
  <data key="d6">declares</data>
</edge>
<edge source="airspy_probe" target="vb2_queue_init">
  <data key="d6">calls</data>
</edge>
<edge source="airspy_probe" target="spin_lock_init">
  <data key="d6">calls</data>
</edge>
<edge source="airspy_probe" target="dev_info">
  <data key="d6">calls</data>
</edge>
<edge source="airspy_probe" target="v4l2_ctrl_new_std">
  <data key="d6">calls</data>
</edge>
<edge source="airspy_probe" target="sizeof">
  <data key="d6">calls</data>
</edge>
<edge source="airspy_probe" target="interface_to_usbdev">
  <data key="d6">calls</data>
</edge>
<edge source="airspy_probe" target="video_set_drvdata">
  <data key="d6">calls</data>
</edge>
<edge source="airspy_probe" target="kfree">
  <data key="d6">calls</data>
</edge>
<edge source="airspy_probe" target="v4l2_device_register">
  <data key="d6">calls</data>
</edge>
<edge source="airspy_probe" target="video_register_device">
  <data key="d6">calls</data>
</edge>
<edge source="airspy_probe" target="INIT_LIST_HEAD">
  <data key="d6">calls</data>
</edge>
<edge source="airspy_probe" target="v4l2_ctrl_handler_init">
  <data key="d6">calls</data>
</edge>
<edge source="airspy_probe" target="dev_notice">
  <data key="d6">calls</data>
</edge>
<edge source="airspy_probe" target="kzalloc">
  <data key="d6">calls</data>
</edge>
<edge source="airspy_probe" target="v4l2_ctrl_handler_setup">
  <data key="d6">calls</data>
</edge>
<edge source="airspy_probe" target="v4l2_ctrl_auto_cluster">
  <data key="d6">calls</data>
</edge>
<edge source="airspy_probe" target="v4l2_device_unregister">
  <data key="d6">calls</data>
</edge>
<edge source="airspy_probe" target="v4l2_ctrl_handler_free">
  <data key="d6">calls</data>
</edge>
<edge source="airspy_probe" target="airspy_ctrl_msg">
  <data key="d6">calls</data>
</edge>
<edge source="airspy_probe" target="mutex_init">
  <data key="d6">calls</data>
</edge>
<edge source="airspy_probe" target="dev_err">
  <data key="d6">calls</data>
</edge>
<edge source="airspy_probe" target="if_0">
  <data key="d6">contains</data>
</edge>
<edge source="airspy_probe" target="if_1">
  <data key="d6">contains</data>
</edge>
<edge source="airspy_probe" target="if_2">
  <data key="d6">contains</data>
</edge>
<edge source="airspy_probe" target="if_3">
  <data key="d6">contains</data>
</edge>
<edge source="airspy_probe" target="if_4">
  <data key="d6">contains</data>
</edge>
<edge source="airspy_probe" target="if_5">
  <data key="d6">contains</data>
</edge>
<edge source="airspy_probe" target="if_6">
  <data key="d6">contains</data>
</edge>
<edge source="intf" target="airspy_probe">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="intf" target="interface_to_usbdev">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="intf" target="v4l2_device_register">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="intf" target="dev_err">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="intf" target="if_0">
  <data key="d6">used_in_body</data>
</edge>
<edge source="s" target="if_0">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="s" target="if_5">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="id" target="airspy_probe">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="id" target="dev_info">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="id" target="dev_err">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="ret" target="if_1">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="ret" target="if_2">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="ret" target="if_3">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="ret" target="if_4">
  <data key="d6">used_in_body</data>
</edge>
<edge source="ret" target="if_6">
  <data key="d6">used_in_body</data>
</edge>
<edge source="ret" target="if_5">
  <data key="d6">used_in_body</data>
</edge>
</graph></graphml>