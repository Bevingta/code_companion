<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"><key id="d6" for="edge" attr.name="type" attr.type="string"/>
<key id="d5" for="node" attr.name="condition" attr.type="string"/>
<key id="d4" for="node" attr.name="type" attr.type="string"/>
<key id="d3" for="graph" attr.name="severity" attr.type="string"/>
<key id="d2" for="graph" attr.name="cvss" attr.type="string"/>
<key id="d1" for="graph" attr.name="cve" attr.type="string"/>
<key id="d0" for="graph" attr.name="pointer_arithmetic" attr.type="boolean"/>
<graph edgedefault="directed"><data key="d0">True</data>
<data key="d1">CVE-2019-7175</data>
<data key="d2">5.0</data>
<data key="d3">MEDIUM</data>
<node id="DecodeImage">
  <data key="d4">FunctionDefinition</data>
</node>
<node id="char">
  <data key="d4">Variable</data>
</node>
<node id="buffer">
  <data key="d4">Variable</data>
</node>
<node id="key">
  <data key="d4">Variable</data>
</node>
<node id="PCDGetBits">
  <data key="d4">FunctionCall</data>
</node>
<node id="RelinquishMagickMemory">
  <data key="d4">FunctionCall</data>
</node>
<node id="ThrowBinaryException">
  <data key="d4">FunctionCall</data>
</node>
<node id="AcquireQuantumMemory">
  <data key="d4">FunctionCall</data>
</node>
<node id="ReadBlob">
  <data key="d4">FunctionCall</data>
</node>
<node id="IsSync">
  <data key="d4">FunctionCall</data>
</node>
<node id="ThrowMagickException">
  <data key="d4">FunctionCall</data>
</node>
<node id="assert">
  <data key="d4">FunctionCall</data>
</node>
<node id="if_0">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">p &gt;= (buffer+0x800</data>
</node>
<node id="if_1">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">image-&gt;debug != MagickFalse</data>
</node>
<node id="if_2">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">buffer == (unsigned char *</data>
</node>
<node id="if_3">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">pcd_table[i] == (PCDTable *</data>
</node>
<node id="if_4">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">r-&gt;length &gt; 16</data>
</node>
<node id="if_5">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">IsSync(sum</data>
</node>
<node id="if_6">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">row == image-&gt;rows</data>
</node>
<node id="if_7">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">(row &gt; image-&gt;rows</data>
</node>
<node id="if_8">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">r-&gt;key &lt; 128</data>
</node>
<node id="for_9">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">i=0; i &lt; 3; i++</data>
</node>
<node id="for_10">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">i=0; i &lt; (image-&gt;columns &gt; 1536 ? 3 : 1</data>
</node>
<node id="for_11">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">j=0; j &lt; (ssize_t</data>
</node>
<node id="for_12">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">i=0; i &lt; 1; i++</data>
</node>
<node id="for_13">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">i=0; i &lt; 1; i++</data>
</node>
<node id="for_14">
  <data key="d4">ControlStructure_for</data>
  <data key="d5"> ; ; </data>
</node>
<node id="for_15">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">i=0; i &lt; (image-&gt;columns &gt; 1536 ? 3 : 1</data>
</node>
<node id="for_16">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">i=0; ((i &lt; (ssize_t</data>
</node>
<node id="for_17">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">i=0; i &lt; (image-&gt;columns &gt; 1536 ? 3 : 1</data>
</node>
<node id="while_18">
  <data key="d4">ControlStructure_while</data>
  <data key="d5">bits &lt;= 24</data>
</node>
<node id="while_19">
  <data key="d4">ControlStructure_while</data>
  <data key="d5">(sum &amp; 0x00fff000UL</data>
</node>
<node id="while_20">
  <data key="d4">ControlStructure_while</data>
  <data key="d5">IsSync(sum</data>
</node>
<node id="while_21">
  <data key="d4">ControlStructure_while</data>
  <data key="d5">(sum &amp; 0x00fff000</data>
</node>
<node id="while_22">
  <data key="d4">ControlStructure_while</data>
  <data key="d5">IsSync(sum</data>
</node>
<node id="switch_23">
  <data key="d4">ControlStructure_switch</data>
  <data key="d5">plane</data>
</node>
<edge source="DecodeImage" target="char">
  <data key="d6">declares</data>
</edge>
<edge source="DecodeImage" target="buffer">
  <data key="d6">declares</data>
</edge>
<edge source="DecodeImage" target="key">
  <data key="d6">declares</data>
</edge>
<edge source="DecodeImage" target="PCDGetBits">
  <data key="d6">calls</data>
</edge>
<edge source="DecodeImage" target="RelinquishMagickMemory">
  <data key="d6">calls</data>
</edge>
<edge source="DecodeImage" target="ThrowBinaryException">
  <data key="d6">calls</data>
</edge>
<edge source="DecodeImage" target="AcquireQuantumMemory">
  <data key="d6">calls</data>
</edge>
<edge source="DecodeImage" target="ReadBlob">
  <data key="d6">calls</data>
</edge>
<edge source="DecodeImage" target="IsSync">
  <data key="d6">calls</data>
</edge>
<edge source="DecodeImage" target="ThrowMagickException">
  <data key="d6">calls</data>
</edge>
<edge source="DecodeImage" target="assert">
  <data key="d6">calls</data>
</edge>
<edge source="DecodeImage" target="if_0">
  <data key="d6">contains</data>
</edge>
<edge source="DecodeImage" target="if_1">
  <data key="d6">contains</data>
</edge>
<edge source="DecodeImage" target="if_2">
  <data key="d6">contains</data>
</edge>
<edge source="DecodeImage" target="if_3">
  <data key="d6">contains</data>
</edge>
<edge source="DecodeImage" target="if_4">
  <data key="d6">contains</data>
</edge>
<edge source="DecodeImage" target="if_5">
  <data key="d6">contains</data>
</edge>
<edge source="DecodeImage" target="if_6">
  <data key="d6">contains</data>
</edge>
<edge source="DecodeImage" target="if_7">
  <data key="d6">contains</data>
</edge>
<edge source="DecodeImage" target="if_8">
  <data key="d6">contains</data>
</edge>
<edge source="DecodeImage" target="for_9">
  <data key="d6">contains</data>
</edge>
<edge source="DecodeImage" target="for_10">
  <data key="d6">contains</data>
</edge>
<edge source="DecodeImage" target="for_11">
  <data key="d6">contains</data>
</edge>
<edge source="DecodeImage" target="for_12">
  <data key="d6">contains</data>
</edge>
<edge source="DecodeImage" target="for_13">
  <data key="d6">contains</data>
</edge>
<edge source="DecodeImage" target="for_14">
  <data key="d6">contains</data>
</edge>
<edge source="DecodeImage" target="for_15">
  <data key="d6">contains</data>
</edge>
<edge source="DecodeImage" target="for_16">
  <data key="d6">contains</data>
</edge>
<edge source="DecodeImage" target="for_17">
  <data key="d6">contains</data>
</edge>
<edge source="DecodeImage" target="while_18">
  <data key="d6">contains</data>
</edge>
<edge source="DecodeImage" target="while_19">
  <data key="d6">contains</data>
</edge>
<edge source="DecodeImage" target="while_20">
  <data key="d6">contains</data>
</edge>
<edge source="DecodeImage" target="while_21">
  <data key="d6">contains</data>
</edge>
<edge source="DecodeImage" target="while_22">
  <data key="d6">contains</data>
</edge>
<edge source="DecodeImage" target="switch_23">
  <data key="d6">contains</data>
</edge>
<edge source="char" target="if_2">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="char" target="DecodeImage">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="char" target="assert">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="char" target="if_3">
  <data key="d6">used_in_body</data>
</edge>
<edge source="char" target="if_4">
  <data key="d6">used_in_body</data>
</edge>
<edge source="char" target="if_5">
  <data key="d6">used_in_body</data>
</edge>
<edge source="char" target="if_6">
  <data key="d6">used_in_body</data>
</edge>
<edge source="char" target="for_10">
  <data key="d6">used_in_body</data>
</edge>
<edge source="char" target="for_11">
  <data key="d6">used_in_body</data>
</edge>
<edge source="char" target="for_12">
  <data key="d6">used_in_body</data>
</edge>
<edge source="char" target="for_13">
  <data key="d6">used_in_body</data>
</edge>
<edge source="char" target="for_14">
  <data key="d6">used_in_body</data>
</edge>
<edge source="char" target="while_19">
  <data key="d6">used_in_body</data>
</edge>
<edge source="char" target="while_20">
  <data key="d6">used_in_body</data>
</edge>
<edge source="char" target="switch_23">
  <data key="d6">used_in_body</data>
</edge>
<edge source="buffer" target="if_0">
  <data key="d6">used_in_body</data>
</edge>
<edge source="buffer" target="if_2">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="buffer" target="RelinquishMagickMemory">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="buffer" target="AcquireQuantumMemory">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="buffer" target="ReadBlob">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="buffer" target="if_3">
  <data key="d6">used_in_body</data>
</edge>
<edge source="buffer" target="if_4">
  <data key="d6">used_in_body</data>
</edge>
<edge source="buffer" target="if_5">
  <data key="d6">used_in_body</data>
</edge>
<edge source="buffer" target="if_6">
  <data key="d6">used_in_body</data>
</edge>
<edge source="buffer" target="for_10">
  <data key="d6">used_in_body</data>
</edge>
<edge source="buffer" target="for_11">
  <data key="d6">used_in_body</data>
</edge>
<edge source="buffer" target="for_12">
  <data key="d6">used_in_body</data>
</edge>
<edge source="buffer" target="for_13">
  <data key="d6">used_in_body</data>
</edge>
<edge source="buffer" target="for_14">
  <data key="d6">used_in_body</data>
</edge>
<edge source="buffer" target="while_18">
  <data key="d6">used_in_body</data>
</edge>
<edge source="buffer" target="while_19">
  <data key="d6">used_in_body</data>
</edge>
<edge source="buffer" target="while_20">
  <data key="d6">used_in_body</data>
</edge>
<edge source="buffer" target="switch_23">
  <data key="d6">used_in_body</data>
</edge>
<edge source="key" target="if_8">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="key" target="for_10">
  <data key="d6">used_in_body</data>
</edge>
<edge source="key" target="for_11">
  <data key="d6">used_in_body</data>
</edge>
<edge source="key" target="for_12">
  <data key="d6">used_in_body</data>
</edge>
<edge source="key" target="for_13">
  <data key="d6">used_in_body</data>
</edge>
<edge source="key" target="for_14">
  <data key="d6">used_in_body</data>
</edge>
<edge source="key" target="while_19">
  <data key="d6">used_in_body</data>
</edge>
<edge source="key" target="while_20">
  <data key="d6">used_in_body</data>
</edge>
</graph></graphml>