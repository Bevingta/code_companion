<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"><key id="d6" for="edge" attr.name="type" attr.type="string"/>
<key id="d5" for="node" attr.name="condition" attr.type="string"/>
<key id="d4" for="node" attr.name="type" attr.type="string"/>
<key id="d3" for="graph" attr.name="severity" attr.type="string"/>
<key id="d2" for="graph" attr.name="cvss" attr.type="string"/>
<key id="d1" for="graph" attr.name="cve" attr.type="string"/>
<key id="d0" for="graph" attr.name="pointer_arithmetic" attr.type="boolean"/>
<graph edgedefault="directed"><data key="d0">True</data>
<data key="d1">CVE-2018-18341</data>
<data key="d2">6.8</data>
<data key="d3">MEDIUM</data>
<node id="Decode">
  <data key="d4">FunctionDefinition</data>
</node>
<node id="length">
  <data key="d4">Variable</data>
</node>
<node id="count">
  <data key="d4">Variable</data>
</node>
<node id="character">
  <data key="d4">Variable</data>
</node>
<node id="Characters">
  <data key="d4">FunctionCall</data>
</node>
<node id="CopyASCIIMachineWord">
  <data key="d4">FunctionCall</data>
</node>
<node id="sizeof">
  <data key="d4">FunctionCall</data>
</node>
<node id="DecodeNonASCIISequence">
  <data key="d4">FunctionCall</data>
</node>
<node id="HandlePartialSequence">
  <data key="d4">FunctionCall</data>
</node>
<node id="SECURITY_DCHECK">
  <data key="d4">FunctionCall</data>
</node>
<node id="Shrink">
  <data key="d4">FunctionCall</data>
</node>
<node id="NonASCIISequenceLength">
  <data key="d4">FunctionCall</data>
</node>
<node id="DCHECK">
  <data key="d4">FunctionCall</data>
</node>
<node id="AlignToMachineWord">
  <data key="d4">FunctionCall</data>
</node>
<node id="buffer16">
  <data key="d4">FunctionCall</data>
</node>
<node id="Adopt">
  <data key="d4">FunctionCall</data>
</node>
<node id="AppendCharacter">
  <data key="d4">FunctionCall</data>
</node>
<node id="buffer">
  <data key="d4">FunctionCall</data>
</node>
<node id="memcpy">
  <data key="d4">FunctionCall</data>
</node>
<node id="if_0">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">partial_sequence_size_</data>
</node>
<node id="if_1">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">HandlePartialSequence(destination_for_handle_partial_sequence,
                                source_for_handle_partial_sequence, end,
                                do_flush, stop_on_error, saw_error</data>
</node>
<node id="if_2">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">partial_sequence_size_</data>
</node>
<node id="if_3">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">IsASCII(*source</data>
</node>
<node id="if_4">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">IsAlignedToMachineWord(source</data>
</node>
<node id="if_5">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!IsAllASCII&lt;LChar&gt;(chunk</data>
</node>
<node id="if_6">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">source == end</data>
</node>
<node id="if_7">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!IsASCII(*source</data>
</node>
<node id="if_8">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">count == 0</data>
</node>
<node id="if_9">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">count &gt; end - source</data>
</node>
<node id="if_10">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">IsNonCharacter(character</data>
</node>
<node id="if_11">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">stop_on_error</data>
</node>
<node id="if_12">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">character &gt; 0xff</data>
</node>
<node id="if_13">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">partial_sequence_size_</data>
</node>
<node id="if_14">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">partial_sequence_size_</data>
</node>
<node id="if_15">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">IsASCII(*source</data>
</node>
<node id="if_16">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">IsAlignedToMachineWord(source</data>
</node>
<node id="if_17">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!IsAllASCII&lt;LChar&gt;(chunk</data>
</node>
<node id="if_18">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">source == end</data>
</node>
<node id="if_19">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!IsASCII(*source</data>
</node>
<node id="if_20">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">count == 0</data>
</node>
<node id="if_21">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">count &gt; end - source</data>
</node>
<node id="if_22">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">IsNonCharacter(character</data>
</node>
<node id="if_23">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">stop_on_error</data>
</node>
<node id="for_24">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">LChar* converted8 = buffer.Characters(</data>
</node>
<node id="while_25">
  <data key="d4">ControlStructure_while</data>
  <data key="d5">source &lt; end</data>
</node>
<node id="while_26">
  <data key="d4">ControlStructure_while</data>
  <data key="d5">source &lt; aligned_end</data>
</node>
<node id="while_27">
  <data key="d4">ControlStructure_while</data>
  <data key="d5">do_flush &amp;&amp; partial_sequence_size_</data>
</node>
<node id="while_28">
  <data key="d4">ControlStructure_while</data>
  <data key="d5">source &lt; end</data>
</node>
<node id="while_29">
  <data key="d4">ControlStructure_while</data>
  <data key="d5">source &lt; aligned_end</data>
</node>
<node id="while_30">
  <data key="d4">ControlStructure_while</data>
  <data key="d5">do_flush &amp;&amp; partial_sequence_size_</data>
</node>
<edge source="Decode" target="length">
  <data key="d6">declares</data>
</edge>
<edge source="Decode" target="count">
  <data key="d6">declares</data>
</edge>
<edge source="Decode" target="character">
  <data key="d6">declares</data>
</edge>
<edge source="Decode" target="Characters">
  <data key="d6">calls</data>
</edge>
<edge source="Decode" target="CopyASCIIMachineWord">
  <data key="d6">calls</data>
</edge>
<edge source="Decode" target="sizeof">
  <data key="d6">calls</data>
</edge>
<edge source="Decode" target="DecodeNonASCIISequence">
  <data key="d6">calls</data>
</edge>
<edge source="Decode" target="HandlePartialSequence">
  <data key="d6">calls</data>
</edge>
<edge source="Decode" target="SECURITY_DCHECK">
  <data key="d6">calls</data>
</edge>
<edge source="Decode" target="Shrink">
  <data key="d6">calls</data>
</edge>
<edge source="Decode" target="NonASCIISequenceLength">
  <data key="d6">calls</data>
</edge>
<edge source="Decode" target="DCHECK">
  <data key="d6">calls</data>
</edge>
<edge source="Decode" target="AlignToMachineWord">
  <data key="d6">calls</data>
</edge>
<edge source="Decode" target="buffer16">
  <data key="d6">calls</data>
</edge>
<edge source="Decode" target="Adopt">
  <data key="d6">calls</data>
</edge>
<edge source="Decode" target="AppendCharacter">
  <data key="d6">calls</data>
</edge>
<edge source="Decode" target="buffer">
  <data key="d6">calls</data>
</edge>
<edge source="Decode" target="memcpy">
  <data key="d6">calls</data>
</edge>
<edge source="Decode" target="if_0">
  <data key="d6">contains</data>
</edge>
<edge source="Decode" target="if_1">
  <data key="d6">contains</data>
</edge>
<edge source="Decode" target="if_2">
  <data key="d6">contains</data>
</edge>
<edge source="Decode" target="if_3">
  <data key="d6">contains</data>
</edge>
<edge source="Decode" target="if_4">
  <data key="d6">contains</data>
</edge>
<edge source="Decode" target="if_5">
  <data key="d6">contains</data>
</edge>
<edge source="Decode" target="if_6">
  <data key="d6">contains</data>
</edge>
<edge source="Decode" target="if_7">
  <data key="d6">contains</data>
</edge>
<edge source="Decode" target="if_8">
  <data key="d6">contains</data>
</edge>
<edge source="Decode" target="if_9">
  <data key="d6">contains</data>
</edge>
<edge source="Decode" target="if_10">
  <data key="d6">contains</data>
</edge>
<edge source="Decode" target="if_11">
  <data key="d6">contains</data>
</edge>
<edge source="Decode" target="if_12">
  <data key="d6">contains</data>
</edge>
<edge source="Decode" target="if_13">
  <data key="d6">contains</data>
</edge>
<edge source="Decode" target="if_14">
  <data key="d6">contains</data>
</edge>
<edge source="Decode" target="if_15">
  <data key="d6">contains</data>
</edge>
<edge source="Decode" target="if_16">
  <data key="d6">contains</data>
</edge>
<edge source="Decode" target="if_17">
  <data key="d6">contains</data>
</edge>
<edge source="Decode" target="if_18">
  <data key="d6">contains</data>
</edge>
<edge source="Decode" target="if_19">
  <data key="d6">contains</data>
</edge>
<edge source="Decode" target="if_20">
  <data key="d6">contains</data>
</edge>
<edge source="Decode" target="if_21">
  <data key="d6">contains</data>
</edge>
<edge source="Decode" target="if_22">
  <data key="d6">contains</data>
</edge>
<edge source="Decode" target="if_23">
  <data key="d6">contains</data>
</edge>
<edge source="Decode" target="for_24">
  <data key="d6">contains</data>
</edge>
<edge source="Decode" target="while_25">
  <data key="d6">contains</data>
</edge>
<edge source="Decode" target="while_26">
  <data key="d6">contains</data>
</edge>
<edge source="Decode" target="while_27">
  <data key="d6">contains</data>
</edge>
<edge source="Decode" target="while_28">
  <data key="d6">contains</data>
</edge>
<edge source="Decode" target="while_29">
  <data key="d6">contains</data>
</edge>
<edge source="Decode" target="while_30">
  <data key="d6">contains</data>
</edge>
<edge source="length" target="Decode">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="length" target="buffer16">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="length" target="buffer">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="count" target="if_8">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="count" target="if_9">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="count" target="if_20">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="count" target="if_21">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="count" target="DecodeNonASCIISequence">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="count" target="if_2">
  <data key="d6">used_in_body</data>
</edge>
<edge source="count" target="if_11">
  <data key="d6">used_in_body</data>
</edge>
<edge source="count" target="if_12">
  <data key="d6">used_in_body</data>
</edge>
<edge source="count" target="if_14">
  <data key="d6">used_in_body</data>
</edge>
<edge source="count" target="for_24">
  <data key="d6">used_in_body</data>
</edge>
<edge source="count" target="while_25">
  <data key="d6">used_in_body</data>
</edge>
<edge source="count" target="while_27">
  <data key="d6">used_in_body</data>
</edge>
<edge source="count" target="while_28">
  <data key="d6">used_in_body</data>
</edge>
<edge source="character" target="if_10">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="character" target="if_12">
  <data key="d6">used_in_body</data>
</edge>
<edge source="character" target="if_22">
  <data key="d6">used_in_body</data>
</edge>
<edge source="character" target="AppendCharacter">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="character" target="if_2">
  <data key="d6">used_in_body</data>
</edge>
<edge source="character" target="if_5">
  <data key="d6">used_in_body</data>
</edge>
<edge source="character" target="if_6">
  <data key="d6">used_in_body</data>
</edge>
<edge source="character" target="if_7">
  <data key="d6">used_in_body</data>
</edge>
<edge source="character" target="if_8">
  <data key="d6">used_in_body</data>
</edge>
<edge source="character" target="if_11">
  <data key="d6">used_in_body</data>
</edge>
<edge source="character" target="if_14">
  <data key="d6">used_in_body</data>
</edge>
<edge source="character" target="if_17">
  <data key="d6">used_in_body</data>
</edge>
<edge source="character" target="if_18">
  <data key="d6">used_in_body</data>
</edge>
<edge source="character" target="if_19">
  <data key="d6">used_in_body</data>
</edge>
<edge source="character" target="if_20">
  <data key="d6">used_in_body</data>
</edge>
<edge source="character" target="for_24">
  <data key="d6">used_in_body</data>
</edge>
<edge source="character" target="while_25">
  <data key="d6">used_in_body</data>
</edge>
<edge source="character" target="while_27">
  <data key="d6">used_in_body</data>
</edge>
<edge source="character" target="while_28">
  <data key="d6">used_in_body</data>
</edge>
</graph></graphml>