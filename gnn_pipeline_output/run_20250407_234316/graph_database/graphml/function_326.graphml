<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"><key id="d7" for="edge" attr.name="type" attr.type="string"/>
<key id="d6" for="node" attr.name="condition" attr.type="string"/>
<key id="d5" for="node" attr.name="type" attr.type="string"/>
<key id="d4" for="graph" attr.name="severity" attr.type="string"/>
<key id="d3" for="graph" attr.name="cvss" attr.type="string"/>
<key id="d2" for="graph" attr.name="cve" attr.type="string"/>
<key id="d1" for="graph" attr.name="pointer_arithmetic" attr.type="boolean"/>
<key id="d0" for="graph" attr.name="potential_buffer_overflow" attr.type="boolean"/>
<graph edgedefault="directed"><data key="d0">True</data>
<data key="d1">True</data>
<data key="d2">CVE-2013-4244</data>
<data key="d3">6.8</data>
<data key="d4">MEDIUM</data>
<node id="process">
  <data key="d5">FunctionDefinition</data>
</node>
<node id="incode">
  <data key="d5">Variable</data>
</node>
<node id="code">
  <data key="d5">Variable</data>
</node>
<node id="char">
  <data key="d5">Variable</data>
</node>
<node id="firstchar">
  <data key="d5">Variable</data>
</node>
<node id="fprintf">
  <data key="d5">FunctionCall</data>
</node>
<node id="if_0">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">code == clear</data>
</node>
<node id="if_1">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">oldcode == -1</data>
</node>
<node id="if_2">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">code &gt; avail</data>
</node>
<node id="if_3">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">code == avail</data>
</node>
<node id="if_4">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">((avail &amp; codemask</data>
</node>
<node id="while_5">
  <data key="d5">ControlStructure_while</data>
  <data key="d6">code &gt; clear</data>
</node>
<node id="while_6">
  <data key="d5">ControlStructure_while</data>
  <data key="d6">stackp &gt; stack</data>
</node>
<edge source="process" target="incode">
  <data key="d7">declares</data>
</edge>
<edge source="process" target="code">
  <data key="d7">declares</data>
</edge>
<edge source="process" target="char">
  <data key="d7">declares</data>
</edge>
<edge source="process" target="firstchar">
  <data key="d7">declares</data>
</edge>
<edge source="process" target="fprintf">
  <data key="d7">calls</data>
</edge>
<edge source="process" target="if_0">
  <data key="d7">contains</data>
</edge>
<edge source="process" target="if_1">
  <data key="d7">contains</data>
</edge>
<edge source="process" target="if_2">
  <data key="d7">contains</data>
</edge>
<edge source="process" target="if_3">
  <data key="d7">contains</data>
</edge>
<edge source="process" target="if_4">
  <data key="d7">contains</data>
</edge>
<edge source="process" target="while_5">
  <data key="d7">contains</data>
</edge>
<edge source="process" target="while_6">
  <data key="d7">contains</data>
</edge>
<edge source="code" target="if_0">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="code" target="if_1">
  <data key="d7">used_in_body</data>
</edge>
<edge source="code" target="if_2">
  <data key="d7">used_in_body</data>
</edge>
<edge source="code" target="if_3">
  <data key="d7">used_in_body</data>
</edge>
<edge source="code" target="if_4">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="code" target="while_5">
  <data key="d7">used_in_body</data>
</edge>
<edge source="code" target="fprintf">
  <data key="d7">used_as_parameter</data>
</edge>
<edge source="code" target="process">
  <data key="d7">used_as_parameter</data>
</edge>
<edge source="char" target="process">
  <data key="d7">used_as_parameter</data>
</edge>
<edge source="firstchar" target="if_1">
  <data key="d7">used_in_body</data>
</edge>
<edge source="firstchar" target="if_3">
  <data key="d7">used_in_body</data>
</edge>
</graph></graphml>