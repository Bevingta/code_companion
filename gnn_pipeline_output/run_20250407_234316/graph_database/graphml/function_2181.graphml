<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"><key id="d6" for="edge" attr.name="type" attr.type="string"/>
<key id="d5" for="node" attr.name="condition" attr.type="string"/>
<key id="d4" for="node" attr.name="type" attr.type="string"/>
<key id="d3" for="graph" attr.name="severity" attr.type="string"/>
<key id="d2" for="graph" attr.name="cvss" attr.type="string"/>
<key id="d1" for="graph" attr.name="cve" attr.type="string"/>
<key id="d0" for="graph" attr.name="pointer_arithmetic" attr.type="boolean"/>
<graph edgedefault="directed"><data key="d0">True</data>
<data key="d1">CVE-2017-6498</data>
<data key="d2">4.3</data>
<data key="d3">MEDIUM</data>
<node id="WriteTGAImage">
  <data key="d4">FunctionDefinition</data>
</node>
<node id="q">
  <data key="d4">Variable</data>
</node>
<node id="midpoint">
  <data key="d4">Variable</data>
</node>
<node id="x">
  <data key="d4">Variable</data>
</node>
<node id="i">
  <data key="d4">Variable</data>
</node>
<node id="value">
  <data key="d4">Variable</data>
</node>
<node id="file">
  <data key="d4">FunctionCall</data>
</node>
<node id="ScaleQuantumToAny">
  <data key="d4">FunctionCall</data>
</node>
<node id="RelinquishMagickMemory">
  <data key="d4">FunctionCall</data>
</node>
<node id="CloseBlob">
  <data key="d4">FunctionCall</data>
</node>
<node id="GetQuantumRange">
  <data key="d4">FunctionCall</data>
</node>
<node id="GetImageProperty">
  <data key="d4">FunctionCall</data>
</node>
<node id="assert">
  <data key="d4">FunctionCall</data>
</node>
<node id="WriteBlobLSBShort">
  <data key="d4">FunctionCall</data>
</node>
<node id="GetVirtualPixels">
  <data key="d4">FunctionCall</data>
</node>
<node id="SetImageProgress">
  <data key="d4">FunctionCall</data>
</node>
<node id="GetImageArtifact">
  <data key="d4">FunctionCall</data>
</node>
<node id="WriteBlobByte">
  <data key="d4">FunctionCall</data>
</node>
<node id="WriteTGAPixel">
  <data key="d4">FunctionCall</data>
</node>
<node id="ScaleQuantumToChar">
  <data key="d4">FunctionCall</data>
</node>
<node id="TransformImageColorspace">
  <data key="d4">FunctionCall</data>
</node>
<node id="ParseCommandOption">
  <data key="d4">FunctionCall</data>
</node>
<node id="OpenBlob">
  <data key="d4">FunctionCall</data>
</node>
<node id="GetVirtualIndexQueue">
  <data key="d4">FunctionCall</data>
</node>
<node id="WriteBlob">
  <data key="d4">FunctionCall</data>
</node>
<node id="if_0">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">image-&gt;debug != MagickFalse</data>
</node>
<node id="if_1">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">status == MagickFalse</data>
</node>
<node id="if_2">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">(image-&gt;columns &gt; 65535L</data>
</node>
<node id="if_3">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">image_info-&gt;compression != UndefinedCompression</data>
</node>
<node id="if_4">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">value != (const char *</data>
</node>
<node id="if_5">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">(image_info-&gt;type != TrueColorType</data>
</node>
<node id="if_6">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">(image-&gt;storage_class == DirectClass</data>
</node>
<node id="if_7">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">image_info-&gt;depth == 5</data>
</node>
<node id="if_8">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">image-&gt;matte != MagickFalse</data>
</node>
<node id="if_9">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">image-&gt;matte != MagickFalse</data>
</node>
<node id="if_10">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">image_info-&gt;depth == 5</data>
</node>
<node id="if_11">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">value != (const char *</data>
</node>
<node id="if_12">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">origin == BottomRightOrientation || origin == TopRightOrientation</data>
</node>
<node id="if_13">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">origin == TopLeftOrientation || origin == TopRightOrientation</data>
</node>
<node id="if_14">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">tga_info.id_length != 0</data>
</node>
<node id="if_15">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">tga_info.colormap_type != 0</data>
</node>
<node id="if_16">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">targa_colormap == (unsigned char *</data>
</node>
<node id="if_17">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">image_info-&gt;depth == 5</data>
</node>
<node id="if_18">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">p == (const PixelPacket *</data>
</node>
<node id="if_19">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">compression == RLECompression</data>
</node>
<node id="if_20">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">tga_info.image_type == TGARLEColormap</data>
</node>
<node id="if_21">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">GetPixelIndex(indexes+i</data>
</node>
<node id="if_22">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">tga_info.image_type == TGARLEMonochrome</data>
</node>
<node id="if_23">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">GetPixelLuma(image,p+i</data>
</node>
<node id="if_24">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">(GetPixelBlue(p+i</data>
</node>
<node id="if_25">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">(image-&gt;matte != MagickFalse</data>
</node>
<node id="if_26">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">i &lt; 3</data>
</node>
<node id="if_27">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">(i &gt;= 3</data>
</node>
<node id="if_28">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">count &gt; 0</data>
</node>
<node id="if_29">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">i &gt;= 3</data>
</node>
<node id="if_30">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">image-&gt;previous == (Image *</data>
</node>
<node id="if_31">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">status == MagickFalse</data>
</node>
<node id="for_32">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">i=0; i &lt; (ssize_t</data>
</node>
<node id="for_33">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">y=(ssize_t</data>
</node>
<node id="for_34">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">x=0; x &lt; (ssize_t</data>
</node>
<node id="while_35">
  <data key="d4">ControlStructure_while</data>
  <data key="d5">x &lt; (ssize_t</data>
</node>
<node id="while_36">
  <data key="d4">ControlStructure_while</data>
  <data key="d5">(i &lt; 128</data>
</node>
<node id="while_37">
  <data key="d4">ControlStructure_while</data>
  <data key="d5">count &gt;= 0</data>
</node>
<edge source="WriteTGAImage" target="q">
  <data key="d6">declares</data>
</edge>
<edge source="WriteTGAImage" target="midpoint">
  <data key="d6">declares</data>
</edge>
<edge source="WriteTGAImage" target="x">
  <data key="d6">declares</data>
</edge>
<edge source="WriteTGAImage" target="i">
  <data key="d6">declares</data>
</edge>
<edge source="WriteTGAImage" target="value">
  <data key="d6">declares</data>
</edge>
<edge source="WriteTGAImage" target="file">
  <data key="d6">calls</data>
</edge>
<edge source="WriteTGAImage" target="ScaleQuantumToAny">
  <data key="d6">calls</data>
</edge>
<edge source="WriteTGAImage" target="RelinquishMagickMemory">
  <data key="d6">calls</data>
</edge>
<edge source="WriteTGAImage" target="CloseBlob">
  <data key="d6">calls</data>
</edge>
<edge source="WriteTGAImage" target="GetQuantumRange">
  <data key="d6">calls</data>
</edge>
<edge source="WriteTGAImage" target="GetImageProperty">
  <data key="d6">calls</data>
</edge>
<edge source="WriteTGAImage" target="assert">
  <data key="d6">calls</data>
</edge>
<edge source="WriteTGAImage" target="WriteBlobLSBShort">
  <data key="d6">calls</data>
</edge>
<edge source="WriteTGAImage" target="GetVirtualPixels">
  <data key="d6">calls</data>
</edge>
<edge source="WriteTGAImage" target="SetImageProgress">
  <data key="d6">calls</data>
</edge>
<edge source="WriteTGAImage" target="GetImageArtifact">
  <data key="d6">calls</data>
</edge>
<edge source="WriteTGAImage" target="WriteBlobByte">
  <data key="d6">calls</data>
</edge>
<edge source="WriteTGAImage" target="WriteTGAPixel">
  <data key="d6">calls</data>
</edge>
<edge source="WriteTGAImage" target="ScaleQuantumToChar">
  <data key="d6">calls</data>
</edge>
<edge source="WriteTGAImage" target="TransformImageColorspace">
  <data key="d6">calls</data>
</edge>
<edge source="WriteTGAImage" target="ParseCommandOption">
  <data key="d6">calls</data>
</edge>
<edge source="WriteTGAImage" target="OpenBlob">
  <data key="d6">calls</data>
</edge>
<edge source="WriteTGAImage" target="GetVirtualIndexQueue">
  <data key="d6">calls</data>
</edge>
<edge source="WriteTGAImage" target="WriteBlob">
  <data key="d6">calls</data>
</edge>
<edge source="WriteTGAImage" target="if_0">
  <data key="d6">contains</data>
</edge>
<edge source="WriteTGAImage" target="if_1">
  <data key="d6">contains</data>
</edge>
<edge source="WriteTGAImage" target="if_2">
  <data key="d6">contains</data>
</edge>
<edge source="WriteTGAImage" target="if_3">
  <data key="d6">contains</data>
</edge>
<edge source="WriteTGAImage" target="if_4">
  <data key="d6">contains</data>
</edge>
<edge source="WriteTGAImage" target="if_5">
  <data key="d6">contains</data>
</edge>
<edge source="WriteTGAImage" target="if_6">
  <data key="d6">contains</data>
</edge>
<edge source="WriteTGAImage" target="if_7">
  <data key="d6">contains</data>
</edge>
<edge source="WriteTGAImage" target="if_8">
  <data key="d6">contains</data>
</edge>
<edge source="WriteTGAImage" target="if_9">
  <data key="d6">contains</data>
</edge>
<edge source="WriteTGAImage" target="if_10">
  <data key="d6">contains</data>
</edge>
<edge source="WriteTGAImage" target="if_11">
  <data key="d6">contains</data>
</edge>
<edge source="WriteTGAImage" target="if_12">
  <data key="d6">contains</data>
</edge>
<edge source="WriteTGAImage" target="if_13">
  <data key="d6">contains</data>
</edge>
<edge source="WriteTGAImage" target="if_14">
  <data key="d6">contains</data>
</edge>
<edge source="WriteTGAImage" target="if_15">
  <data key="d6">contains</data>
</edge>
<edge source="WriteTGAImage" target="if_16">
  <data key="d6">contains</data>
</edge>
<edge source="WriteTGAImage" target="if_17">
  <data key="d6">contains</data>
</edge>
<edge source="WriteTGAImage" target="if_18">
  <data key="d6">contains</data>
</edge>
<edge source="WriteTGAImage" target="if_19">
  <data key="d6">contains</data>
</edge>
<edge source="WriteTGAImage" target="if_20">
  <data key="d6">contains</data>
</edge>
<edge source="WriteTGAImage" target="if_21">
  <data key="d6">contains</data>
</edge>
<edge source="WriteTGAImage" target="if_22">
  <data key="d6">contains</data>
</edge>
<edge source="WriteTGAImage" target="if_23">
  <data key="d6">contains</data>
</edge>
<edge source="WriteTGAImage" target="if_24">
  <data key="d6">contains</data>
</edge>
<edge source="WriteTGAImage" target="if_25">
  <data key="d6">contains</data>
</edge>
<edge source="WriteTGAImage" target="if_26">
  <data key="d6">contains</data>
</edge>
<edge source="WriteTGAImage" target="if_27">
  <data key="d6">contains</data>
</edge>
<edge source="WriteTGAImage" target="if_28">
  <data key="d6">contains</data>
</edge>
<edge source="WriteTGAImage" target="if_29">
  <data key="d6">contains</data>
</edge>
<edge source="WriteTGAImage" target="if_30">
  <data key="d6">contains</data>
</edge>
<edge source="WriteTGAImage" target="if_31">
  <data key="d6">contains</data>
</edge>
<edge source="WriteTGAImage" target="for_32">
  <data key="d6">contains</data>
</edge>
<edge source="WriteTGAImage" target="for_33">
  <data key="d6">contains</data>
</edge>
<edge source="WriteTGAImage" target="for_34">
  <data key="d6">contains</data>
</edge>
<edge source="WriteTGAImage" target="while_35">
  <data key="d6">contains</data>
</edge>
<edge source="WriteTGAImage" target="while_36">
  <data key="d6">contains</data>
</edge>
<edge source="WriteTGAImage" target="while_37">
  <data key="d6">contains</data>
</edge>
<edge source="midpoint" target="WriteTGAPixel">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="midpoint" target="if_12">
  <data key="d6">used_in_body</data>
</edge>
<edge source="midpoint" target="if_13">
  <data key="d6">used_in_body</data>
</edge>
<edge source="midpoint" target="if_14">
  <data key="d6">used_in_body</data>
</edge>
<edge source="midpoint" target="if_15">
  <data key="d6">used_in_body</data>
</edge>
<edge source="midpoint" target="if_16">
  <data key="d6">used_in_body</data>
</edge>
<edge source="midpoint" target="if_17">
  <data key="d6">used_in_body</data>
</edge>
<edge source="midpoint" target="if_18">
  <data key="d6">used_in_body</data>
</edge>
<edge source="midpoint" target="if_19">
  <data key="d6">used_in_body</data>
</edge>
<edge source="midpoint" target="if_27">
  <data key="d6">used_in_body</data>
</edge>
<edge source="midpoint" target="if_28">
  <data key="d6">used_in_body</data>
</edge>
<edge source="midpoint" target="if_29">
  <data key="d6">used_in_body</data>
</edge>
<edge source="midpoint" target="for_32">
  <data key="d6">used_in_body</data>
</edge>
<edge source="midpoint" target="for_33">
  <data key="d6">used_in_body</data>
</edge>
<edge source="midpoint" target="while_35">
  <data key="d6">used_in_body</data>
</edge>
<edge source="midpoint" target="while_37">
  <data key="d6">used_in_body</data>
</edge>
<edge source="x" target="if_18">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="x" target="if_21">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="x" target="if_23">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="x" target="if_24">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="x" target="for_34">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="x" target="while_35">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_0">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_1">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_2">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_3">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_5">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_6">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_7">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_8">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_9">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_10">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_12">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_13">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_14">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_15">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_16">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_17">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_18">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_19">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_20">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_21">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_22">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_23">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_24">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_25">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_26">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_27">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_29">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_30">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_31">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="for_32">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="for_33">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="for_34">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="while_35">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="while_36">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="value" target="if_4">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="value" target="if_11">
  <data key="d6">used_in_body</data>
</edge>
<edge source="value" target="ParseCommandOption">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="value" target="if_10">
  <data key="d6">used_in_body</data>
</edge>
</graph></graphml>