<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"><key id="d5" for="edge" attr.name="type" attr.type="string"/>
<key id="d4" for="node" attr.name="condition" attr.type="string"/>
<key id="d3" for="node" attr.name="type" attr.type="string"/>
<key id="d2" for="graph" attr.name="severity" attr.type="string"/>
<key id="d1" for="graph" attr.name="cvss" attr.type="string"/>
<key id="d0" for="graph" attr.name="cve" attr.type="string"/>
<graph edgedefault="directed"><data key="d0">CVE-2018-18021</data>
<data key="d1">3.6</data>
<data key="d2">LOW</data>
<node id="set_core_reg">
  <data key="d3">FunctionDefinition</data>
</node>
<node id="regs">
  <data key="d3">Variable</data>
</node>
<node id="nr_regs">
  <data key="d3">Variable</data>
</node>
<node id="err">
  <data key="d3">Variable</data>
</node>
<node id="tmp">
  <data key="d3">Variable</data>
</node>
<node id="vcpu">
  <data key="d3">Variable</data>
</node>
<node id="reg">
  <data key="d3">Variable</data>
</node>
<node id="valp">
  <data key="d3">Variable</data>
</node>
<node id="vcpu_gp_regs">
  <data key="d3">FunctionCall</data>
</node>
<node id="sizeof">
  <data key="d3">FunctionCall</data>
</node>
<node id="core_reg_offset_from_id">
  <data key="d3">FunctionCall</data>
</node>
<node id="memcpy">
  <data key="d3">FunctionCall</data>
</node>
<node id="if_0">
  <data key="d3">ControlStructure_if</data>
  <data key="d4">off &gt;= nr_regs ||
	    (off + (KVM_REG_SIZE(reg-&gt;id</data>
</node>
<node id="if_1">
  <data key="d3">ControlStructure_if</data>
  <data key="d4">validate_core_offset(reg</data>
</node>
<node id="if_2">
  <data key="d3">ControlStructure_if</data>
  <data key="d4">KVM_REG_SIZE(reg-&gt;id</data>
</node>
<node id="if_3">
  <data key="d3">ControlStructure_if</data>
  <data key="d4">copy_from_user(valp, uaddr, KVM_REG_SIZE(reg-&gt;id</data>
</node>
<node id="if_4">
  <data key="d3">ControlStructure_if</data>
  <data key="d4">off == KVM_REG_ARM_CORE_REG(regs.pstate</data>
</node>
<node id="switch_5">
  <data key="d3">ControlStructure_switch</data>
  <data key="d4">mode</data>
</node>
<edge source="set_core_reg" target="regs">
  <data key="d5">declares</data>
</edge>
<edge source="set_core_reg" target="nr_regs">
  <data key="d5">declares</data>
</edge>
<edge source="set_core_reg" target="err">
  <data key="d5">declares</data>
</edge>
<edge source="set_core_reg" target="tmp">
  <data key="d5">declares</data>
</edge>
<edge source="set_core_reg" target="vcpu">
  <data key="d5">declares</data>
</edge>
<edge source="set_core_reg" target="reg">
  <data key="d5">declares</data>
</edge>
<edge source="set_core_reg" target="valp">
  <data key="d5">declares</data>
</edge>
<edge source="set_core_reg" target="vcpu_gp_regs">
  <data key="d5">calls</data>
</edge>
<edge source="set_core_reg" target="sizeof">
  <data key="d5">calls</data>
</edge>
<edge source="set_core_reg" target="core_reg_offset_from_id">
  <data key="d5">calls</data>
</edge>
<edge source="set_core_reg" target="memcpy">
  <data key="d5">calls</data>
</edge>
<edge source="set_core_reg" target="if_0">
  <data key="d5">contains</data>
</edge>
<edge source="set_core_reg" target="if_1">
  <data key="d5">contains</data>
</edge>
<edge source="set_core_reg" target="if_2">
  <data key="d5">contains</data>
</edge>
<edge source="set_core_reg" target="if_3">
  <data key="d5">contains</data>
</edge>
<edge source="set_core_reg" target="if_4">
  <data key="d5">contains</data>
</edge>
<edge source="set_core_reg" target="switch_5">
  <data key="d5">contains</data>
</edge>
<edge source="regs" target="if_0">
  <data key="d5">used_in_condition</data>
</edge>
<edge source="regs" target="if_4">
  <data key="d5">used_in_condition</data>
</edge>
<edge source="regs" target="sizeof">
  <data key="d5">used_as_parameter</data>
</edge>
<edge source="nr_regs" target="if_0">
  <data key="d5">used_in_condition</data>
</edge>
<edge source="err" target="if_0">
  <data key="d5">used_in_body</data>
</edge>
<edge source="err" target="if_1">
  <data key="d5">used_in_body</data>
</edge>
<edge source="err" target="if_2">
  <data key="d5">used_in_body</data>
</edge>
<edge source="err" target="if_3">
  <data key="d5">used_in_body</data>
</edge>
<edge source="err" target="if_4">
  <data key="d5">used_in_body</data>
</edge>
<edge source="err" target="switch_5">
  <data key="d5">used_in_body</data>
</edge>
<edge source="tmp" target="sizeof">
  <data key="d5">used_as_parameter</data>
</edge>
<edge source="vcpu" target="vcpu_gp_regs">
  <data key="d5">used_as_parameter</data>
</edge>
<edge source="vcpu" target="set_core_reg">
  <data key="d5">used_as_parameter</data>
</edge>
<edge source="reg" target="if_0">
  <data key="d5">used_in_condition</data>
</edge>
<edge source="reg" target="if_1">
  <data key="d5">used_in_condition</data>
</edge>
<edge source="reg" target="if_2">
  <data key="d5">used_in_condition</data>
</edge>
<edge source="reg" target="if_3">
  <data key="d5">used_in_condition</data>
</edge>
<edge source="reg" target="if_4">
  <data key="d5">used_in_condition</data>
</edge>
<edge source="reg" target="set_core_reg">
  <data key="d5">used_as_parameter</data>
</edge>
<edge source="reg" target="sizeof">
  <data key="d5">used_as_parameter</data>
</edge>
<edge source="reg" target="core_reg_offset_from_id">
  <data key="d5">used_as_parameter</data>
</edge>
<edge source="valp" target="if_3">
  <data key="d5">used_in_condition</data>
</edge>
<edge source="valp" target="if_4">
  <data key="d5">used_in_body</data>
</edge>
</graph></graphml>