<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"><key id="d6" for="edge" attr.name="type" attr.type="string"/>
<key id="d5" for="node" attr.name="condition" attr.type="string"/>
<key id="d4" for="node" attr.name="type" attr.type="string"/>
<key id="d3" for="graph" attr.name="severity" attr.type="string"/>
<key id="d2" for="graph" attr.name="cvss" attr.type="string"/>
<key id="d1" for="graph" attr.name="cve" attr.type="string"/>
<key id="d0" for="graph" attr.name="pointer_arithmetic" attr.type="boolean"/>
<graph edgedefault="directed"><data key="d0">True</data>
<data key="d1">CVE-2017-0381</data>
<data key="d2">9.3</data>
<data key="d3">HIGH</data>
<node id="silk_NLSF_stabilize">
  <data key="d4">FunctionDefinition</data>
</node>
<node id="L">
  <data key="d4">Variable</data>
</node>
<node id="silk_RSHIFT">
  <data key="d4">FunctionCall</data>
</node>
<node id="silk_LIMIT_32">
  <data key="d4">FunctionCall</data>
</node>
<node id="silk_assert">
  <data key="d4">FunctionCall</data>
</node>
<node id="silk_min_int">
  <data key="d4">FunctionCall</data>
</node>
<node id="silk_max_int">
  <data key="d4">FunctionCall</data>
</node>
<node id="sort">
  <data key="d4">FunctionCall</data>
</node>
<node id="if_0">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> diff_Q15 &lt; min_diff_Q15 </data>
</node>
<node id="if_1">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> diff_Q15 &lt; min_diff_Q15 </data>
</node>
<node id="if_2">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> min_diff_Q15 &gt;= 0 </data>
</node>
<node id="if_3">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> I == 0 </data>
</node>
<node id="if_4">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> I == L</data>
</node>
<node id="if_5">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> loops == MAX_LOOPS </data>
</node>
<node id="for_6">
  <data key="d4">ControlStructure_for</data>
  <data key="d5"> loops = 0; loops &lt; MAX_LOOPS; loops++ </data>
</node>
<node id="for_7">
  <data key="d4">ControlStructure_for</data>
  <data key="d5"> i = 1; i &lt;= L-1; i++ </data>
</node>
<node id="for_8">
  <data key="d4">ControlStructure_for</data>
  <data key="d5"> k = 0; k &lt; I; k++ </data>
</node>
<node id="for_9">
  <data key="d4">ControlStructure_for</data>
  <data key="d5"> k = L; k &gt; I; k-- </data>
</node>
<node id="for_10">
  <data key="d4">ControlStructure_for</data>
  <data key="d5"> i = 1; i &lt; L; i++ </data>
</node>
<node id="for_11">
  <data key="d4">ControlStructure_for</data>
  <data key="d5"> i = L-2; i &gt;= 0; i-- </data>
</node>
<edge source="silk_NLSF_stabilize" target="L">
  <data key="d6">declares</data>
</edge>
<edge source="silk_NLSF_stabilize" target="silk_RSHIFT">
  <data key="d6">calls</data>
</edge>
<edge source="silk_NLSF_stabilize" target="silk_LIMIT_32">
  <data key="d6">calls</data>
</edge>
<edge source="silk_NLSF_stabilize" target="silk_assert">
  <data key="d6">calls</data>
</edge>
<edge source="silk_NLSF_stabilize" target="silk_min_int">
  <data key="d6">calls</data>
</edge>
<edge source="silk_NLSF_stabilize" target="silk_max_int">
  <data key="d6">calls</data>
</edge>
<edge source="silk_NLSF_stabilize" target="sort">
  <data key="d6">calls</data>
</edge>
<edge source="silk_NLSF_stabilize" target="if_0">
  <data key="d6">contains</data>
</edge>
<edge source="silk_NLSF_stabilize" target="if_1">
  <data key="d6">contains</data>
</edge>
<edge source="silk_NLSF_stabilize" target="if_2">
  <data key="d6">contains</data>
</edge>
<edge source="silk_NLSF_stabilize" target="if_3">
  <data key="d6">contains</data>
</edge>
<edge source="silk_NLSF_stabilize" target="if_4">
  <data key="d6">contains</data>
</edge>
<edge source="silk_NLSF_stabilize" target="if_5">
  <data key="d6">contains</data>
</edge>
<edge source="silk_NLSF_stabilize" target="for_6">
  <data key="d6">contains</data>
</edge>
<edge source="silk_NLSF_stabilize" target="for_7">
  <data key="d6">contains</data>
</edge>
<edge source="silk_NLSF_stabilize" target="for_8">
  <data key="d6">contains</data>
</edge>
<edge source="silk_NLSF_stabilize" target="for_9">
  <data key="d6">contains</data>
</edge>
<edge source="silk_NLSF_stabilize" target="for_10">
  <data key="d6">contains</data>
</edge>
<edge source="silk_NLSF_stabilize" target="for_11">
  <data key="d6">contains</data>
</edge>
<edge source="L" target="if_4">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="L" target="if_5">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="L" target="for_6">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="L" target="for_7">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="L" target="for_9">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="L" target="for_10">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="L" target="for_11">
  <data key="d6">used_in_condition</data>
</edge>
</graph></graphml>