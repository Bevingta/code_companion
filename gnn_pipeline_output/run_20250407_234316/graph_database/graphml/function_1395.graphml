<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"><key id="d6" for="edge" attr.name="type" attr.type="string"/>
<key id="d5" for="node" attr.name="condition" attr.type="string"/>
<key id="d4" for="node" attr.name="type" attr.type="string"/>
<key id="d3" for="graph" attr.name="severity" attr.type="string"/>
<key id="d2" for="graph" attr.name="cvss" attr.type="string"/>
<key id="d1" for="graph" attr.name="cve" attr.type="string"/>
<key id="d0" for="graph" attr.name="pointer_arithmetic" attr.type="boolean"/>
<graph edgedefault="directed"><data key="d0">True</data>
<data key="d1">CVE-2017-18187</data>
<data key="d2">7.5</data>
<data key="d3">HIGH</data>
<node id="ssl_parse_client_psk_identity">
  <data key="d4">FunctionDefinition</data>
</node>
<node id="char">
  <data key="d4">Variable</data>
</node>
<node id="n">
  <data key="d4">Variable</data>
</node>
<node id="ret">
  <data key="d4">Variable</data>
</node>
<node id="MBEDTLS_SSL_DEBUG_MSG">
  <data key="d4">FunctionCall</data>
</node>
<node id="mbedtls_ssl_send_alert_message">
  <data key="d4">FunctionCall</data>
</node>
<node id="MBEDTLS_SSL_DEBUG_BUF">
  <data key="d4">FunctionCall</data>
</node>
<node id="if_0">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> ssl-&gt;conf-&gt;f_psk == NULL &amp;&amp;
        ( ssl-&gt;conf-&gt;psk == NULL || ssl-&gt;conf-&gt;psk_identity == NULL ||
          ssl-&gt;conf-&gt;psk_identity_len == 0 || ssl-&gt;conf-&gt;psk_len == 0 </data>
</node>
<node id="if_1">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> *p + 2 &gt; end </data>
</node>
<node id="if_2">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> n &lt; 1 || n &gt; 65535 || *p + n &gt; end </data>
</node>
<node id="if_3">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> ssl-&gt;conf-&gt;f_psk != NULL </data>
</node>
<node id="if_4">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> ssl-&gt;conf-&gt;f_psk( ssl-&gt;conf-&gt;p_psk, ssl, *p, n </data>
</node>
<node id="if_5">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> n != ssl-&gt;conf-&gt;psk_identity_len ||
            mbedtls_ssl_safer_memcmp( ssl-&gt;conf-&gt;psk_identity, *p, n </data>
</node>
<node id="if_6">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> ret == MBEDTLS_ERR_SSL_UNKNOWN_IDENTITY </data>
</node>
<edge source="ssl_parse_client_psk_identity" target="char">
  <data key="d6">declares</data>
</edge>
<edge source="ssl_parse_client_psk_identity" target="n">
  <data key="d6">declares</data>
</edge>
<edge source="ssl_parse_client_psk_identity" target="ret">
  <data key="d6">declares</data>
</edge>
<edge source="ssl_parse_client_psk_identity" target="MBEDTLS_SSL_DEBUG_MSG">
  <data key="d6">calls</data>
</edge>
<edge source="ssl_parse_client_psk_identity" target="mbedtls_ssl_send_alert_message">
  <data key="d6">calls</data>
</edge>
<edge source="ssl_parse_client_psk_identity" target="MBEDTLS_SSL_DEBUG_BUF">
  <data key="d6">calls</data>
</edge>
<edge source="ssl_parse_client_psk_identity" target="if_0">
  <data key="d6">contains</data>
</edge>
<edge source="ssl_parse_client_psk_identity" target="if_1">
  <data key="d6">contains</data>
</edge>
<edge source="ssl_parse_client_psk_identity" target="if_2">
  <data key="d6">contains</data>
</edge>
<edge source="ssl_parse_client_psk_identity" target="if_3">
  <data key="d6">contains</data>
</edge>
<edge source="ssl_parse_client_psk_identity" target="if_4">
  <data key="d6">contains</data>
</edge>
<edge source="ssl_parse_client_psk_identity" target="if_5">
  <data key="d6">contains</data>
</edge>
<edge source="ssl_parse_client_psk_identity" target="if_6">
  <data key="d6">contains</data>
</edge>
<edge source="char" target="ssl_parse_client_psk_identity">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="n" target="if_0">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="n" target="if_1">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="n" target="if_2">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="n" target="if_3">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="n" target="if_4">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="n" target="if_5">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="ret" target="if_6">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="ret" target="if_3">
  <data key="d6">used_in_body</data>
</edge>
<edge source="ret" target="if_4">
  <data key="d6">used_in_body</data>
</edge>
<edge source="ret" target="if_5">
  <data key="d6">used_in_body</data>
</edge>
</graph></graphml>