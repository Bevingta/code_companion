<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"><key id="d6" for="edge" attr.name="type" attr.type="string"/>
<key id="d5" for="node" attr.name="condition" attr.type="string"/>
<key id="d4" for="node" attr.name="type" attr.type="string"/>
<key id="d3" for="graph" attr.name="severity" attr.type="string"/>
<key id="d2" for="graph" attr.name="cvss" attr.type="string"/>
<key id="d1" for="graph" attr.name="cve" attr.type="string"/>
<key id="d0" for="graph" attr.name="pointer_arithmetic" attr.type="boolean"/>
<graph edgedefault="directed"><data key="d0">True</data>
<data key="d1">CVE-2016-7529</data>
<data key="d2">4.3</data>
<data key="d3">MEDIUM</data>
<node id="load_tile">
  <data key="d4">FunctionDefinition</data>
</node>
<node id="count">
  <data key="d4">Variable</data>
</node>
<node id="y">
  <data key="d4">Variable</data>
</node>
<node id="x">
  <data key="d4">Variable</data>
</node>
<node id="data_length">
  <data key="d4">Variable</data>
</node>
<node id="graydata">
  <data key="d4">Variable</data>
</node>
<node id="GetPixelChannels">
  <data key="d4">FunctionCall</data>
</node>
<node id="RelinquishMagickMemory">
  <data key="d4">FunctionCall</data>
</node>
<node id="SetPixelGreen">
  <data key="d4">FunctionCall</data>
</node>
<node id="SetPixelGray">
  <data key="d4">FunctionCall</data>
</node>
<node id="GetAuthenticPixels">
  <data key="d4">FunctionCall</data>
</node>
<node id="SetPixelRed">
  <data key="d4">FunctionCall</data>
</node>
<node id="SetPixelAlpha">
  <data key="d4">FunctionCall</data>
</node>
<node id="AcquireQuantumMemory">
  <data key="d4">FunctionCall</data>
</node>
<node id="SetPixelBlue">
  <data key="d4">FunctionCall</data>
</node>
<node id="ReadBlob">
  <data key="d4">FunctionCall</data>
</node>
<node id="if_0">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">xcfdata == (XCFPixelInfo *</data>
</node>
<node id="if_1">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">count != (ssize_t</data>
</node>
<node id="if_2">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">q == (Quantum *</data>
</node>
<node id="if_3">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">inDocInfo-&gt;image_type == GIMP_GRAY</data>
</node>
<node id="if_4">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">inDocInfo-&gt;image_type == GIMP_RGB</data>
</node>
<node id="if_5">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">SyncAuthenticPixels(tile_image,exception</data>
</node>
<node id="for_6">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">y=0; y &lt; (ssize_t</data>
</node>
<node id="for_7">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">x=0; x &lt; (ssize_t</data>
</node>
<node id="for_8">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">x=0; x &lt; (ssize_t</data>
</node>
<edge source="load_tile" target="count">
  <data key="d6">declares</data>
</edge>
<edge source="load_tile" target="y">
  <data key="d6">declares</data>
</edge>
<edge source="load_tile" target="x">
  <data key="d6">declares</data>
</edge>
<edge source="load_tile" target="data_length">
  <data key="d6">declares</data>
</edge>
<edge source="load_tile" target="graydata">
  <data key="d6">declares</data>
</edge>
<edge source="load_tile" target="GetPixelChannels">
  <data key="d6">calls</data>
</edge>
<edge source="load_tile" target="RelinquishMagickMemory">
  <data key="d6">calls</data>
</edge>
<edge source="load_tile" target="SetPixelGreen">
  <data key="d6">calls</data>
</edge>
<edge source="load_tile" target="SetPixelGray">
  <data key="d6">calls</data>
</edge>
<edge source="load_tile" target="GetAuthenticPixels">
  <data key="d6">calls</data>
</edge>
<edge source="load_tile" target="SetPixelRed">
  <data key="d6">calls</data>
</edge>
<edge source="load_tile" target="SetPixelAlpha">
  <data key="d6">calls</data>
</edge>
<edge source="load_tile" target="AcquireQuantumMemory">
  <data key="d6">calls</data>
</edge>
<edge source="load_tile" target="SetPixelBlue">
  <data key="d6">calls</data>
</edge>
<edge source="load_tile" target="ReadBlob">
  <data key="d6">calls</data>
</edge>
<edge source="load_tile" target="if_0">
  <data key="d6">contains</data>
</edge>
<edge source="load_tile" target="if_1">
  <data key="d6">contains</data>
</edge>
<edge source="load_tile" target="if_2">
  <data key="d6">contains</data>
</edge>
<edge source="load_tile" target="if_3">
  <data key="d6">contains</data>
</edge>
<edge source="load_tile" target="if_4">
  <data key="d6">contains</data>
</edge>
<edge source="load_tile" target="if_5">
  <data key="d6">contains</data>
</edge>
<edge source="load_tile" target="for_6">
  <data key="d6">contains</data>
</edge>
<edge source="load_tile" target="for_7">
  <data key="d6">contains</data>
</edge>
<edge source="load_tile" target="for_8">
  <data key="d6">contains</data>
</edge>
<edge source="count" target="if_1">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="y" target="if_3">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="y" target="if_4">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="y" target="if_5">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="y" target="for_6">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="x" target="if_0">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="x" target="if_5">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="x" target="for_7">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="x" target="for_8">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="data_length" target="AcquireQuantumMemory">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="data_length" target="ReadBlob">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="data_length" target="load_tile">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="graydata" target="SetPixelGray">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="graydata" target="if_0">
  <data key="d6">used_in_body</data>
</edge>
<edge source="graydata" target="if_1">
  <data key="d6">used_in_body</data>
</edge>
<edge source="graydata" target="if_2">
  <data key="d6">used_in_body</data>
</edge>
<edge source="graydata" target="if_3">
  <data key="d6">used_in_body</data>
</edge>
<edge source="graydata" target="for_6">
  <data key="d6">used_in_body</data>
</edge>
<edge source="graydata" target="for_7">
  <data key="d6">used_in_body</data>
</edge>
</graph></graphml>