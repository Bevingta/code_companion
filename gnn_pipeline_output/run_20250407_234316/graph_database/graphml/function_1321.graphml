<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"><key id="d6" for="edge" attr.name="type" attr.type="string"/>
<key id="d5" for="node" attr.name="condition" attr.type="string"/>
<key id="d4" for="node" attr.name="type" attr.type="string"/>
<key id="d3" for="graph" attr.name="severity" attr.type="string"/>
<key id="d2" for="graph" attr.name="cvss" attr.type="string"/>
<key id="d1" for="graph" attr.name="cve" attr.type="string"/>
<key id="d0" for="graph" attr.name="pointer_arithmetic" attr.type="boolean"/>
<graph edgedefault="directed"><data key="d0">True</data>
<data key="d1">CVE-2018-11596</data>
<data key="d2">4.3</data>
<data key="d3">MEDIUM</data>
<node id="jsvGetString">
  <data key="d4">FunctionDefinition</data>
</node>
<node id="s">
  <data key="d4">Variable</data>
</node>
<node id="str">
  <data key="d4">Variable</data>
</node>
<node id="l">
  <data key="d4">Variable</data>
</node>
<node id="len">
  <data key="d4">Variable</data>
</node>
<node id="jsExceptionHere">
  <data key="d4">FunctionCall</data>
</node>
<node id="jsvUnLock">
  <data key="d4">FunctionCall</data>
</node>
<node id="itostr">
  <data key="d4">FunctionCall</data>
</node>
<node id="jsvStringIteratorNewConst">
  <data key="d4">FunctionCall</data>
</node>
<node id="strlen">
  <data key="d4">FunctionCall</data>
</node>
<node id="ftoa_bounded">
  <data key="d4">FunctionCall</data>
</node>
<node id="jsvStringIteratorFree">
  <data key="d4">FunctionCall</data>
</node>
<node id="jsvAsString">
  <data key="d4">FunctionCall</data>
</node>
<node id="jsvStringIteratorGetChar">
  <data key="d4">FunctionCall</data>
</node>
<node id="jsvGetConstString">
  <data key="d4">FunctionCall</data>
</node>
<node id="jsvStringIteratorNext">
  <data key="d4">FunctionCall</data>
</node>
<node id="assert">
  <data key="d4">FunctionCall</data>
</node>
<node id="if_0">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">s</data>
</node>
<node id="if_1">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">jsvIsInt(v</data>
</node>
<node id="if_2">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">jsvIsFloat(v</data>
</node>
<node id="if_3">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">jsvHasCharacterData(v</data>
</node>
<node id="if_4">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">l--&lt;=1</data>
</node>
<node id="if_5">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">stringVar</data>
</node>
<node id="while_6">
  <data key="d4">ControlStructure_while</data>
  <data key="d5">*s &amp;&amp; l&lt;len</data>
</node>
<node id="while_7">
  <data key="d4">ControlStructure_while</data>
  <data key="d5">jsvStringIteratorHasChar(&amp;it</data>
</node>
<edge source="jsvGetString" target="s">
  <data key="d6">declares</data>
</edge>
<edge source="jsvGetString" target="str">
  <data key="d6">declares</data>
</edge>
<edge source="jsvGetString" target="l">
  <data key="d6">declares</data>
</edge>
<edge source="jsvGetString" target="len">
  <data key="d6">declares</data>
</edge>
<edge source="jsvGetString" target="jsExceptionHere">
  <data key="d6">calls</data>
</edge>
<edge source="jsvGetString" target="jsvUnLock">
  <data key="d6">calls</data>
</edge>
<edge source="jsvGetString" target="itostr">
  <data key="d6">calls</data>
</edge>
<edge source="jsvGetString" target="jsvStringIteratorNewConst">
  <data key="d6">calls</data>
</edge>
<edge source="jsvGetString" target="strlen">
  <data key="d6">calls</data>
</edge>
<edge source="jsvGetString" target="ftoa_bounded">
  <data key="d6">calls</data>
</edge>
<edge source="jsvGetString" target="jsvStringIteratorFree">
  <data key="d6">calls</data>
</edge>
<edge source="jsvGetString" target="jsvAsString">
  <data key="d6">calls</data>
</edge>
<edge source="jsvGetString" target="jsvStringIteratorGetChar">
  <data key="d6">calls</data>
</edge>
<edge source="jsvGetString" target="jsvGetConstString">
  <data key="d6">calls</data>
</edge>
<edge source="jsvGetString" target="jsvStringIteratorNext">
  <data key="d6">calls</data>
</edge>
<edge source="jsvGetString" target="assert">
  <data key="d6">calls</data>
</edge>
<edge source="jsvGetString" target="if_0">
  <data key="d6">contains</data>
</edge>
<edge source="jsvGetString" target="if_1">
  <data key="d6">contains</data>
</edge>
<edge source="jsvGetString" target="if_2">
  <data key="d6">contains</data>
</edge>
<edge source="jsvGetString" target="if_3">
  <data key="d6">contains</data>
</edge>
<edge source="jsvGetString" target="if_4">
  <data key="d6">contains</data>
</edge>
<edge source="jsvGetString" target="if_5">
  <data key="d6">contains</data>
</edge>
<edge source="jsvGetString" target="while_6">
  <data key="d6">contains</data>
</edge>
<edge source="jsvGetString" target="while_7">
  <data key="d6">contains</data>
</edge>
<edge source="s" target="if_0">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="s" target="if_1">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="s" target="if_2">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="s" target="if_3">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="s" target="if_5">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="s" target="while_6">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="s" target="while_7">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="str" target="if_5">
  <data key="d6">used_in_body</data>
</edge>
<edge source="str" target="jsExceptionHere">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="str" target="jsvUnLock">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="str" target="jsvGetString">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="str" target="itostr">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="str" target="strlen">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="str" target="ftoa_bounded">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="str" target="if_0">
  <data key="d6">used_in_body</data>
</edge>
<edge source="str" target="if_1">
  <data key="d6">used_in_body</data>
</edge>
<edge source="str" target="if_2">
  <data key="d6">used_in_body</data>
</edge>
<edge source="str" target="if_3">
  <data key="d6">used_in_body</data>
</edge>
<edge source="str" target="if_4">
  <data key="d6">used_in_body</data>
</edge>
<edge source="str" target="while_6">
  <data key="d6">used_in_body</data>
</edge>
<edge source="str" target="while_7">
  <data key="d6">used_in_body</data>
</edge>
<edge source="l" target="if_2">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="l" target="if_4">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="l" target="while_6">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="len" target="while_6">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="len" target="jsvGetString">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="len" target="ftoa_bounded">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="len" target="assert">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="len" target="if_0">
  <data key="d6">used_in_body</data>
</edge>
<edge source="len" target="if_2">
  <data key="d6">used_in_body</data>
</edge>
<edge source="len" target="if_3">
  <data key="d6">used_in_body</data>
</edge>
<edge source="len" target="if_4">
  <data key="d6">used_in_body</data>
</edge>
<edge source="len" target="if_5">
  <data key="d6">used_in_body</data>
</edge>
<edge source="len" target="while_7">
  <data key="d6">used_in_body</data>
</edge>
</graph></graphml>