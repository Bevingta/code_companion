<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"><key id="d7" for="edge" attr.name="type" attr.type="string"/>
<key id="d6" for="node" attr.name="condition" attr.type="string"/>
<key id="d5" for="node" attr.name="type" attr.type="string"/>
<key id="d4" for="graph" attr.name="severity" attr.type="string"/>
<key id="d3" for="graph" attr.name="cvss" attr.type="string"/>
<key id="d2" for="graph" attr.name="cve" attr.type="string"/>
<key id="d1" for="graph" attr.name="pointer_arithmetic" attr.type="boolean"/>
<key id="d0" for="graph" attr.name="potential_buffer_overflow" attr.type="boolean"/>
<graph edgedefault="directed"><data key="d0">True</data>
<data key="d1">True</data>
<data key="d2">CVE-2017-11144</data>
<data key="d3">5.0</data>
<data key="d4">MEDIUM</data>
<node id="PHP_FUNCTION">
  <data key="d5">FunctionDefinition</data>
</node>
<node id="method">
  <data key="d5">Variable</data>
</node>
<node id="data_len">
  <data key="d5">Variable</data>
</node>
<node id="method_len">
  <data key="d5">Variable</data>
</node>
<node id="ZEND_HASH_FOREACH_VAL">
  <data key="d5">FunctionCall</data>
</node>
<node id="EVP_CIPHER_CTX_free">
  <data key="d5">FunctionCall</data>
</node>
<node id="PHP_OPENSSL_CHECK_SIZE_T_TO_INT">
  <data key="d5">FunctionCall</data>
</node>
<node id="memset">
  <data key="d5">FunctionCall</data>
</node>
<node id="php_error_docref">
  <data key="d5">FunctionCall</data>
</node>
<node id="php_openssl_evp_from_zval">
  <data key="d5">FunctionCall</data>
</node>
<node id="zval_dtor">
  <data key="d5">FunctionCall</data>
</node>
<node id="EVP_CIPHER_CTX_new">
  <data key="d5">FunctionCall</data>
</node>
<node id="add_next_index_stringl">
  <data key="d5">FunctionCall</data>
</node>
<node id="EVP_CIPHER_iv_length">
  <data key="d5">FunctionCall</data>
</node>
<node id="ZEND_HASH_FOREACH_END">
  <data key="d5">FunctionCall</data>
</node>
<node id="safe_emalloc">
  <data key="d5">FunctionCall</data>
</node>
<node id="EVP_get_cipherbyname">
  <data key="d5">FunctionCall</data>
</node>
<node id="EVP_rc4">
  <data key="d5">FunctionCall</data>
</node>
<node id="EVP_PKEY_free">
  <data key="d5">FunctionCall</data>
</node>
<node id="array_init">
  <data key="d5">FunctionCall</data>
</node>
<node id="zend_hash_num_elements">
  <data key="d5">FunctionCall</data>
</node>
<node id="RETVAL_LONG">
  <data key="d5">FunctionCall</data>
</node>
<node id="EVP_CIPHER_CTX_cleanup">
  <data key="d5">FunctionCall</data>
</node>
<node id="efree">
  <data key="d5">FunctionCall</data>
</node>
<node id="Z_ARRVAL_P">
  <data key="d5">FunctionCall</data>
</node>
<node id="ZVAL_NEW_STR">
  <data key="d5">FunctionCall</data>
</node>
<node id="emalloc">
  <data key="d5">FunctionCall</data>
</node>
<node id="if_0">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">zend_parse_parameters(ZEND_NUM_ARGS(</data>
</node>
<node id="if_1">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">!nkeys</data>
</node>
<node id="if_2">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">method</data>
</node>
<node id="if_3">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">!cipher</data>
</node>
<node id="if_4">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">!iv &amp;&amp; iv_len &gt; 0</data>
</node>
<node id="if_5">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">pkeys[i] == NULL</data>
</node>
<node id="if_6">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">ctx == NULL || !EVP_EncryptInit(ctx,cipher,NULL,NULL</data>
</node>
<node id="if_7">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">!EVP_SealInit(ctx, cipher, eks, eksl, &amp;iv_buf[0], pkeys, nkeys</data>
</node>
<node id="if_8">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">len1 + len2 &gt; 0</data>
</node>
<node id="if_9">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">iv</data>
</node>
<node id="if_10">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">key_resources[i] == NULL &amp;&amp; pkeys[i] != NULL</data>
</node>
<node id="if_11">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">eks[i]</data>
</node>
<node id="for_12">
  <data key="d5">ControlStructure_for</data>
  <data key="d6">i=0; i&lt;nkeys; i++</data>
</node>
<node id="for_13">
  <data key="d5">ControlStructure_for</data>
  <data key="d6">i=0; i&lt;nkeys; i++</data>
</node>
<edge source="PHP_FUNCTION" target="method">
  <data key="d7">declares</data>
</edge>
<edge source="PHP_FUNCTION" target="data_len">
  <data key="d7">declares</data>
</edge>
<edge source="PHP_FUNCTION" target="method_len">
  <data key="d7">declares</data>
</edge>
<edge source="PHP_FUNCTION" target="ZEND_HASH_FOREACH_VAL">
  <data key="d7">calls</data>
</edge>
<edge source="PHP_FUNCTION" target="EVP_CIPHER_CTX_free">
  <data key="d7">calls</data>
</edge>
<edge source="PHP_FUNCTION" target="PHP_OPENSSL_CHECK_SIZE_T_TO_INT">
  <data key="d7">calls</data>
</edge>
<edge source="PHP_FUNCTION" target="memset">
  <data key="d7">calls</data>
</edge>
<edge source="PHP_FUNCTION" target="php_error_docref">
  <data key="d7">calls</data>
</edge>
<edge source="PHP_FUNCTION" target="php_openssl_evp_from_zval">
  <data key="d7">calls</data>
</edge>
<edge source="PHP_FUNCTION" target="zval_dtor">
  <data key="d7">calls</data>
</edge>
<edge source="PHP_FUNCTION" target="EVP_CIPHER_CTX_new">
  <data key="d7">calls</data>
</edge>
<edge source="PHP_FUNCTION" target="add_next_index_stringl">
  <data key="d7">calls</data>
</edge>
<edge source="PHP_FUNCTION" target="EVP_CIPHER_iv_length">
  <data key="d7">calls</data>
</edge>
<edge source="PHP_FUNCTION" target="ZEND_HASH_FOREACH_END">
  <data key="d7">calls</data>
</edge>
<edge source="PHP_FUNCTION" target="safe_emalloc">
  <data key="d7">calls</data>
</edge>
<edge source="PHP_FUNCTION" target="EVP_get_cipherbyname">
  <data key="d7">calls</data>
</edge>
<edge source="PHP_FUNCTION" target="EVP_rc4">
  <data key="d7">calls</data>
</edge>
<edge source="PHP_FUNCTION" target="EVP_PKEY_free">
  <data key="d7">calls</data>
</edge>
<edge source="PHP_FUNCTION" target="array_init">
  <data key="d7">calls</data>
</edge>
<edge source="PHP_FUNCTION" target="zend_hash_num_elements">
  <data key="d7">calls</data>
</edge>
<edge source="PHP_FUNCTION" target="RETVAL_LONG">
  <data key="d7">calls</data>
</edge>
<edge source="PHP_FUNCTION" target="EVP_CIPHER_CTX_cleanup">
  <data key="d7">calls</data>
</edge>
<edge source="PHP_FUNCTION" target="efree">
  <data key="d7">calls</data>
</edge>
<edge source="PHP_FUNCTION" target="Z_ARRVAL_P">
  <data key="d7">calls</data>
</edge>
<edge source="PHP_FUNCTION" target="ZVAL_NEW_STR">
  <data key="d7">calls</data>
</edge>
<edge source="PHP_FUNCTION" target="emalloc">
  <data key="d7">calls</data>
</edge>
<edge source="PHP_FUNCTION" target="if_0">
  <data key="d7">contains</data>
</edge>
<edge source="PHP_FUNCTION" target="if_1">
  <data key="d7">contains</data>
</edge>
<edge source="PHP_FUNCTION" target="if_2">
  <data key="d7">contains</data>
</edge>
<edge source="PHP_FUNCTION" target="if_3">
  <data key="d7">contains</data>
</edge>
<edge source="PHP_FUNCTION" target="if_4">
  <data key="d7">contains</data>
</edge>
<edge source="PHP_FUNCTION" target="if_5">
  <data key="d7">contains</data>
</edge>
<edge source="PHP_FUNCTION" target="if_6">
  <data key="d7">contains</data>
</edge>
<edge source="PHP_FUNCTION" target="if_7">
  <data key="d7">contains</data>
</edge>
<edge source="PHP_FUNCTION" target="if_8">
  <data key="d7">contains</data>
</edge>
<edge source="PHP_FUNCTION" target="if_9">
  <data key="d7">contains</data>
</edge>
<edge source="PHP_FUNCTION" target="if_10">
  <data key="d7">contains</data>
</edge>
<edge source="PHP_FUNCTION" target="if_11">
  <data key="d7">contains</data>
</edge>
<edge source="PHP_FUNCTION" target="for_12">
  <data key="d7">contains</data>
</edge>
<edge source="PHP_FUNCTION" target="for_13">
  <data key="d7">contains</data>
</edge>
<edge source="method" target="if_2">
  <data key="d7">used_in_body</data>
</edge>
<edge source="method" target="EVP_get_cipherbyname">
  <data key="d7">used_as_parameter</data>
</edge>
<edge source="data_len" target="PHP_OPENSSL_CHECK_SIZE_T_TO_INT">
  <data key="d7">used_as_parameter</data>
</edge>
<edge source="data_len" target="emalloc">
  <data key="d7">used_as_parameter</data>
</edge>
</graph></graphml>