<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"><key id="d7" for="edge" attr.name="type" attr.type="string"/>
<key id="d6" for="node" attr.name="condition" attr.type="string"/>
<key id="d5" for="node" attr.name="type" attr.type="string"/>
<key id="d4" for="graph" attr.name="severity" attr.type="string"/>
<key id="d3" for="graph" attr.name="cvss" attr.type="string"/>
<key id="d2" for="graph" attr.name="cve" attr.type="string"/>
<key id="d1" for="graph" attr.name="format_string_vulnerability" attr.type="boolean"/>
<key id="d0" for="graph" attr.name="potential_buffer_overflow" attr.type="boolean"/>
<graph edgedefault="directed"><data key="d0">True</data>
<data key="d1">True</data>
<data key="d2">CVE-2016-10369</data>
<data key="d3">4.6</data>
<data key="d4">MEDIUM</data>
<node id="lxterminal_socket_initialize">
  <data key="d5">FunctionDefinition</data>
</node>
<node id="fd">
  <data key="d5">Variable</data>
</node>
<node id="i">
  <data key="d5">Variable</data>
</node>
<node id="argc">
  <data key="d5">Variable</data>
</node>
<node id="sock_addr">
  <data key="d5">Variable</data>
</node>
<node id="socket">
  <data key="d5">FunctionCall</data>
</node>
<node id="g_io_channel_write_chars">
  <data key="d5">FunctionCall</data>
</node>
<node id="g_io_channel_set_encoding">
  <data key="d5">FunctionCall</data>
</node>
<node id="unlink">
  <data key="d5">FunctionCall</data>
</node>
<node id="memset">
  <data key="d5">FunctionCall</data>
</node>
<node id="report">
  <data key="d5">FunctionCall</data>
</node>
<node id="snprintf">
  <data key="d5">FunctionCall</data>
</node>
<node id="g_free">
  <data key="d5">FunctionCall</data>
</node>
<node id="g_get_current_dir">
  <data key="d5">FunctionCall</data>
</node>
<node id="g_io_channel_unref">
  <data key="d5">FunctionCall</data>
</node>
<node id="g_io_channel_set_close_on_unref">
  <data key="d5">FunctionCall</data>
</node>
<node id="g_warning">
  <data key="d5">FunctionCall</data>
</node>
<node id="g_io_channel_unix_new">
  <data key="d5">FunctionCall</data>
</node>
<node id="close">
  <data key="d5">FunctionCall</data>
</node>
<node id="g_io_channel_flush">
  <data key="d5">FunctionCall</data>
</node>
<node id="g_io_channel_set_buffered">
  <data key="d5">FunctionCall</data>
</node>
<node id="if_0">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">connect(fd, (struct sockaddr *</data>
</node>
<node id="if_1">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">bind(fd, (struct sockaddr *</data>
</node>
<node id="if_2">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">listen(fd, 5</data>
</node>
<node id="if_3">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">gio == NULL</data>
</node>
<node id="if_4">
  <data key="d5">ControlStructure_if</data>
  <data key="d6"> ! g_io_add_watch(gio, G_IO_IN | G_IO_HUP, (GIOFunc</data>
</node>
<node id="for_5">
  <data key="d5">ControlStructure_for</data>
  <data key="d6">i = 0; i &lt; argc; i ++</data>
</node>
<edge source="lxterminal_socket_initialize" target="fd">
  <data key="d7">declares</data>
</edge>
<edge source="lxterminal_socket_initialize" target="i">
  <data key="d7">declares</data>
</edge>
<edge source="lxterminal_socket_initialize" target="argc">
  <data key="d7">declares</data>
</edge>
<edge source="lxterminal_socket_initialize" target="sock_addr">
  <data key="d7">declares</data>
</edge>
<edge source="lxterminal_socket_initialize" target="socket">
  <data key="d7">calls</data>
</edge>
<edge source="lxterminal_socket_initialize" target="g_io_channel_write_chars">
  <data key="d7">calls</data>
</edge>
<edge source="lxterminal_socket_initialize" target="g_io_channel_set_encoding">
  <data key="d7">calls</data>
</edge>
<edge source="lxterminal_socket_initialize" target="unlink">
  <data key="d7">calls</data>
</edge>
<edge source="lxterminal_socket_initialize" target="memset">
  <data key="d7">calls</data>
</edge>
<edge source="lxterminal_socket_initialize" target="report">
  <data key="d7">calls</data>
</edge>
<edge source="lxterminal_socket_initialize" target="snprintf">
  <data key="d7">calls</data>
</edge>
<edge source="lxterminal_socket_initialize" target="g_free">
  <data key="d7">calls</data>
</edge>
<edge source="lxterminal_socket_initialize" target="g_get_current_dir">
  <data key="d7">calls</data>
</edge>
<edge source="lxterminal_socket_initialize" target="g_io_channel_unref">
  <data key="d7">calls</data>
</edge>
<edge source="lxterminal_socket_initialize" target="g_io_channel_set_close_on_unref">
  <data key="d7">calls</data>
</edge>
<edge source="lxterminal_socket_initialize" target="g_warning">
  <data key="d7">calls</data>
</edge>
<edge source="lxterminal_socket_initialize" target="g_io_channel_unix_new">
  <data key="d7">calls</data>
</edge>
<edge source="lxterminal_socket_initialize" target="close">
  <data key="d7">calls</data>
</edge>
<edge source="lxterminal_socket_initialize" target="g_io_channel_flush">
  <data key="d7">calls</data>
</edge>
<edge source="lxterminal_socket_initialize" target="g_io_channel_set_buffered">
  <data key="d7">calls</data>
</edge>
<edge source="lxterminal_socket_initialize" target="if_0">
  <data key="d7">contains</data>
</edge>
<edge source="lxterminal_socket_initialize" target="if_1">
  <data key="d7">contains</data>
</edge>
<edge source="lxterminal_socket_initialize" target="if_2">
  <data key="d7">contains</data>
</edge>
<edge source="lxterminal_socket_initialize" target="if_3">
  <data key="d7">contains</data>
</edge>
<edge source="lxterminal_socket_initialize" target="if_4">
  <data key="d7">contains</data>
</edge>
<edge source="lxterminal_socket_initialize" target="for_5">
  <data key="d7">contains</data>
</edge>
<edge source="fd" target="if_0">
  <data key="d7">used_in_body</data>
</edge>
<edge source="fd" target="if_1">
  <data key="d7">used_in_body</data>
</edge>
<edge source="fd" target="if_2">
  <data key="d7">used_in_body</data>
</edge>
<edge source="fd" target="g_io_channel_unix_new">
  <data key="d7">used_as_parameter</data>
</edge>
<edge source="fd" target="close">
  <data key="d7">used_as_parameter</data>
</edge>
<edge source="fd" target="if_3">
  <data key="d7">used_in_body</data>
</edge>
<edge source="fd" target="if_4">
  <data key="d7">used_in_body</data>
</edge>
<edge source="i" target="if_1">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="i" target="if_2">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="i" target="if_3">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="i" target="if_4">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="i" target="for_5">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="argc" target="for_5">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="argc" target="lxterminal_socket_initialize">
  <data key="d7">used_as_parameter</data>
</edge>
<edge source="sock_addr" target="memset">
  <data key="d7">used_as_parameter</data>
</edge>
<edge source="sock_addr" target="snprintf">
  <data key="d7">used_as_parameter</data>
</edge>
<edge source="sock_addr" target="if_0">
  <data key="d7">used_in_body</data>
</edge>
</graph></graphml>