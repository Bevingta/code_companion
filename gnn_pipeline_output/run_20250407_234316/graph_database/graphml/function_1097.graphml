<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"><key id="d6" for="edge" attr.name="type" attr.type="string"/>
<key id="d5" for="node" attr.name="condition" attr.type="string"/>
<key id="d4" for="node" attr.name="type" attr.type="string"/>
<key id="d3" for="graph" attr.name="severity" attr.type="string"/>
<key id="d2" for="graph" attr.name="cvss" attr.type="string"/>
<key id="d1" for="graph" attr.name="cve" attr.type="string"/>
<key id="d0" for="graph" attr.name="potential_buffer_overflow" attr.type="boolean"/>
<graph edgedefault="directed"><data key="d0">True</data>
<data key="d1">CVE-2016-10197</data>
<data key="d2">5.0</data>
<data key="d3">MEDIUM</data>
<node id="search_make_new">
  <data key="d4">FunctionDefinition</data>
</node>
<node id="const">
  <data key="d4">Variable</data>
</node>
<node id="postfix_len">
  <data key="d4">Variable</data>
</node>
<node id="base_len">
  <data key="d4">Variable</data>
</node>
<node id="dom">
  <data key="d4">Variable</data>
</node>
<node id="need_to_append_dot">
  <data key="d4">Variable</data>
</node>
<node id="n">
  <data key="d4">Variable</data>
</node>
<node id="sizeof">
  <data key="d4">FunctionCall</data>
</node>
<node id="EVUTIL_ASSERT">
  <data key="d4">FunctionCall</data>
</node>
<node id="strlen">
  <data key="d4">FunctionCall</data>
</node>
<node id="mm_malloc">
  <data key="d4">FunctionCall</data>
</node>
<node id="memcpy">
  <data key="d4">FunctionCall</data>
</node>
<node id="if_0">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!n--</data>
</node>
<node id="if_1">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!newname</data>
</node>
<node id="if_2">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">need_to_append_dot</data>
</node>
<node id="for_3">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">dom = state-&gt;head; dom; dom = dom-&gt;next</data>
</node>
<edge source="search_make_new" target="const">
  <data key="d6">declares</data>
</edge>
<edge source="search_make_new" target="postfix_len">
  <data key="d6">declares</data>
</edge>
<edge source="search_make_new" target="base_len">
  <data key="d6">declares</data>
</edge>
<edge source="search_make_new" target="dom">
  <data key="d6">declares</data>
</edge>
<edge source="search_make_new" target="need_to_append_dot">
  <data key="d6">declares</data>
</edge>
<edge source="search_make_new" target="n">
  <data key="d6">declares</data>
</edge>
<edge source="search_make_new" target="sizeof">
  <data key="d6">calls</data>
</edge>
<edge source="search_make_new" target="EVUTIL_ASSERT">
  <data key="d6">calls</data>
</edge>
<edge source="search_make_new" target="strlen">
  <data key="d6">calls</data>
</edge>
<edge source="search_make_new" target="mm_malloc">
  <data key="d6">calls</data>
</edge>
<edge source="search_make_new" target="memcpy">
  <data key="d6">calls</data>
</edge>
<edge source="search_make_new" target="if_0">
  <data key="d6">contains</data>
</edge>
<edge source="search_make_new" target="if_1">
  <data key="d6">contains</data>
</edge>
<edge source="search_make_new" target="if_2">
  <data key="d6">contains</data>
</edge>
<edge source="search_make_new" target="for_3">
  <data key="d6">contains</data>
</edge>
<edge source="const" target="search_make_new">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="const" target="if_0">
  <data key="d6">used_in_body</data>
</edge>
<edge source="const" target="for_3">
  <data key="d6">used_in_body</data>
</edge>
<edge source="postfix_len" target="mm_malloc">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="postfix_len" target="memcpy">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="postfix_len" target="if_0">
  <data key="d6">used_in_body</data>
</edge>
<edge source="postfix_len" target="for_3">
  <data key="d6">used_in_body</data>
</edge>
<edge source="base_len" target="mm_malloc">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="base_len" target="memcpy">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="base_len" target="if_0">
  <data key="d6">used_in_body</data>
</edge>
<edge source="base_len" target="for_3">
  <data key="d6">used_in_body</data>
</edge>
<edge source="dom" target="for_3">
  <data key="d6">used_in_body</data>
</edge>
<edge source="dom" target="sizeof">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="dom" target="if_0">
  <data key="d6">used_in_body</data>
</edge>
<edge source="need_to_append_dot" target="if_2">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="need_to_append_dot" target="mm_malloc">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="need_to_append_dot" target="memcpy">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="need_to_append_dot" target="if_0">
  <data key="d6">used_in_body</data>
</edge>
<edge source="need_to_append_dot" target="for_3">
  <data key="d6">used_in_body</data>
</edge>
<edge source="n" target="if_0">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="n" target="if_1">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="n" target="if_2">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="n" target="for_3">
  <data key="d6">used_in_condition</data>
</edge>
</graph></graphml>