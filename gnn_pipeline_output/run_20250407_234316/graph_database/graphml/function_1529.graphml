<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"><key id="d6" for="edge" attr.name="type" attr.type="string"/>
<key id="d5" for="node" attr.name="condition" attr.type="string"/>
<key id="d4" for="node" attr.name="type" attr.type="string"/>
<key id="d3" for="graph" attr.name="severity" attr.type="string"/>
<key id="d2" for="graph" attr.name="cvss" attr.type="string"/>
<key id="d1" for="graph" attr.name="cve" attr.type="string"/>
<key id="d0" for="graph" attr.name="potential_buffer_overflow" attr.type="boolean"/>
<graph edgedefault="directed"><data key="d0">True</data>
<data key="d1">CVE-2018-20784</data>
<data key="d2">7.5</data>
<data key="d3">HIGH</data>
<node id="update_blocked_averages">
  <data key="d4">FunctionDefinition</data>
</node>
<node id="curr_class">
  <data key="d4">Variable</data>
</node>
<node id="se">
  <data key="d4">Variable</data>
</node>
<node id="cpu">
  <data key="d4">Variable</data>
</node>
<node id="rf">
  <data key="d4">Variable</data>
</node>
<node id="rq">
  <data key="d4">Variable</data>
</node>
<node id="rq_lock_irqsave">
  <data key="d4">FunctionCall</data>
</node>
<node id="update_irq_load_avg">
  <data key="d4">FunctionCall</data>
</node>
<node id="cpu_rq">
  <data key="d4">FunctionCall</data>
</node>
<node id="update_rt_rq_load_avg">
  <data key="d4">FunctionCall</data>
</node>
<node id="rq_unlock_irqrestore">
  <data key="d4">FunctionCall</data>
</node>
<node id="list_add_leaf_cfs_rq">
  <data key="d4">FunctionCall</data>
</node>
<node id="update_rq_clock">
  <data key="d4">FunctionCall</data>
</node>
<node id="update_dl_rq_load_avg">
  <data key="d4">FunctionCall</data>
</node>
<node id="if_0">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">throttled_hierarchy(cfs_rq</data>
</node>
<node id="if_1">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">update_cfs_rq_load_avg(cfs_rq_clock_task(cfs_rq</data>
</node>
<node id="if_2">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">se &amp;&amp; !skip_blocked_update(se</data>
</node>
<node id="if_3">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">cfs_rq_is_decayed(cfs_rq</data>
</node>
<node id="if_4">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">cfs_rq_has_blocked(cfs_rq</data>
</node>
<node id="if_5">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">others_have_blocked(rq</data>
</node>
<node id="if_6">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">done</data>
</node>
<edge source="update_blocked_averages" target="curr_class">
  <data key="d6">declares</data>
</edge>
<edge source="update_blocked_averages" target="se">
  <data key="d6">declares</data>
</edge>
<edge source="update_blocked_averages" target="cpu">
  <data key="d6">declares</data>
</edge>
<edge source="update_blocked_averages" target="rf">
  <data key="d6">declares</data>
</edge>
<edge source="update_blocked_averages" target="rq">
  <data key="d6">declares</data>
</edge>
<edge source="update_blocked_averages" target="rq_lock_irqsave">
  <data key="d6">calls</data>
</edge>
<edge source="update_blocked_averages" target="update_irq_load_avg">
  <data key="d6">calls</data>
</edge>
<edge source="update_blocked_averages" target="cpu_rq">
  <data key="d6">calls</data>
</edge>
<edge source="update_blocked_averages" target="update_rt_rq_load_avg">
  <data key="d6">calls</data>
</edge>
<edge source="update_blocked_averages" target="rq_unlock_irqrestore">
  <data key="d6">calls</data>
</edge>
<edge source="update_blocked_averages" target="list_add_leaf_cfs_rq">
  <data key="d6">calls</data>
</edge>
<edge source="update_blocked_averages" target="update_rq_clock">
  <data key="d6">calls</data>
</edge>
<edge source="update_blocked_averages" target="update_dl_rq_load_avg">
  <data key="d6">calls</data>
</edge>
<edge source="update_blocked_averages" target="if_0">
  <data key="d6">contains</data>
</edge>
<edge source="update_blocked_averages" target="if_1">
  <data key="d6">contains</data>
</edge>
<edge source="update_blocked_averages" target="if_2">
  <data key="d6">contains</data>
</edge>
<edge source="update_blocked_averages" target="if_3">
  <data key="d6">contains</data>
</edge>
<edge source="update_blocked_averages" target="if_4">
  <data key="d6">contains</data>
</edge>
<edge source="update_blocked_averages" target="if_5">
  <data key="d6">contains</data>
</edge>
<edge source="update_blocked_averages" target="if_6">
  <data key="d6">contains</data>
</edge>
<edge source="se" target="if_2">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="cpu" target="cpu_rq">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="cpu" target="update_blocked_averages">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="rf" target="rq_lock_irqsave">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="rf" target="rq_unlock_irqrestore">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="rq" target="if_0">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="rq" target="if_1">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="rq" target="if_3">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="rq" target="if_4">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="rq" target="if_5">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="rq" target="rq_lock_irqsave">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="rq" target="update_irq_load_avg">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="rq" target="update_rt_rq_load_avg">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="rq" target="rq_unlock_irqrestore">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="rq" target="update_rq_clock">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="rq" target="update_dl_rq_load_avg">
  <data key="d6">used_as_parameter</data>
</edge>
</graph></graphml>