<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"><key id="d6" for="edge" attr.name="type" attr.type="string"/>
<key id="d5" for="node" attr.name="condition" attr.type="string"/>
<key id="d4" for="node" attr.name="type" attr.type="string"/>
<key id="d3" for="graph" attr.name="severity" attr.type="string"/>
<key id="d2" for="graph" attr.name="cvss" attr.type="string"/>
<key id="d1" for="graph" attr.name="cve" attr.type="string"/>
<key id="d0" for="graph" attr.name="pointer_arithmetic" attr.type="boolean"/>
<graph edgedefault="directed"><data key="d0">True</data>
<data key="d1">CVE-2019-14981</data>
<data key="d2">4.3</data>
<data key="d3">MEDIUM</data>
<node id="MeanShiftImage">
  <data key="d4">FunctionDefinition</data>
</node>
<node id="y">
  <data key="d4">Variable</data>
</node>
<node id="width">
  <data key="d4">Variable</data>
</node>
<node id="height">
  <data key="d4">Variable</data>
</node>
<node id="x">
  <data key="d4">Variable</data>
</node>
<node id="color_distance">
  <data key="d4">Variable</data>
</node>
<node id="i">
  <data key="d4">Variable</data>
</node>
<node id="u">
  <data key="d4">Variable</data>
</node>
<node id="defined">
  <data key="d4">FunctionCall</data>
</node>
<node id="DestroyImage">
  <data key="d4">FunctionCall</data>
</node>
<node id="assert">
  <data key="d4">FunctionCall</data>
</node>
<node id="GetOneCacheViewVirtualPixelInfo">
  <data key="d4">FunctionCall</data>
</node>
<node id="AcquireAuthenticCacheView">
  <data key="d4">FunctionCall</data>
</node>
<node id="SetPixelGreen">
  <data key="d4">FunctionCall</data>
</node>
<node id="SetPixelAlpha">
  <data key="d4">FunctionCall</data>
</node>
<node id="SetImageProgress">
  <data key="d4">FunctionCall</data>
</node>
<node id="GetCacheViewAuthenticPixels">
  <data key="d4">FunctionCall</data>
</node>
<node id="GetPixelChannels">
  <data key="d4">FunctionCall</data>
</node>
<node id="GetPixelInfoPixel">
  <data key="d4">FunctionCall</data>
</node>
<node id="DestroyCacheView">
  <data key="d4">FunctionCall</data>
</node>
<node id="CloneImage">
  <data key="d4">FunctionCall</data>
</node>
<node id="SetPixelRed">
  <data key="d4">FunctionCall</data>
</node>
<node id="SetPixelBlue">
  <data key="d4">FunctionCall</data>
</node>
<node id="AcquireVirtualCacheView">
  <data key="d4">FunctionCall</data>
</node>
<node id="GetCacheViewVirtualPixels">
  <data key="d4">FunctionCall</data>
</node>
<node id="GetPixelInfo">
  <data key="d4">FunctionCall</data>
</node>
<node id="if_0">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">image-&gt;debug != MagickFalse</data>
</node>
<node id="if_1">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">mean_image == (Image *</data>
</node>
<node id="if_2">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">SetImageStorageClass(mean_image,DirectClass,exception</data>
</node>
<node id="if_3">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">status == MagickFalse</data>
</node>
<node id="if_4">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">(p == (const Quantum *</data>
</node>
<node id="if_5">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">(v*v+u*u</data>
</node>
<node id="if_6">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">distance &lt;= (color_distance*color_distance</data>
</node>
<node id="if_7">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">distance &lt;= 3.0</data>
</node>
<node id="if_8">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">SyncCacheViewAuthenticPixels(mean_view,exception</data>
</node>
<node id="if_9">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">image-&gt;progress_monitor != (MagickProgressMonitor</data>
</node>
<node id="if_10">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">proceed == MagickFalse</data>
</node>
<node id="for_11">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">y=0; y &lt; (ssize_t</data>
</node>
<node id="for_12">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">x=0; x &lt; (ssize_t</data>
</node>
<node id="for_13">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">i=0; i &lt; MaxMeanShiftIterations; i++</data>
</node>
<node id="for_14">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">v=(-((ssize_t</data>
</node>
<node id="for_15">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">u=(-((ssize_t</data>
</node>
<edge source="MeanShiftImage" target="y">
  <data key="d6">declares</data>
</edge>
<edge source="MeanShiftImage" target="width">
  <data key="d6">declares</data>
</edge>
<edge source="MeanShiftImage" target="height">
  <data key="d6">declares</data>
</edge>
<edge source="MeanShiftImage" target="x">
  <data key="d6">declares</data>
</edge>
<edge source="MeanShiftImage" target="color_distance">
  <data key="d6">declares</data>
</edge>
<edge source="MeanShiftImage" target="i">
  <data key="d6">declares</data>
</edge>
<edge source="MeanShiftImage" target="u">
  <data key="d6">declares</data>
</edge>
<edge source="MeanShiftImage" target="defined">
  <data key="d6">calls</data>
</edge>
<edge source="MeanShiftImage" target="DestroyImage">
  <data key="d6">calls</data>
</edge>
<edge source="MeanShiftImage" target="assert">
  <data key="d6">calls</data>
</edge>
<edge source="MeanShiftImage" target="GetOneCacheViewVirtualPixelInfo">
  <data key="d6">calls</data>
</edge>
<edge source="MeanShiftImage" target="AcquireAuthenticCacheView">
  <data key="d6">calls</data>
</edge>
<edge source="MeanShiftImage" target="SetPixelGreen">
  <data key="d6">calls</data>
</edge>
<edge source="MeanShiftImage" target="SetPixelAlpha">
  <data key="d6">calls</data>
</edge>
<edge source="MeanShiftImage" target="SetImageProgress">
  <data key="d6">calls</data>
</edge>
<edge source="MeanShiftImage" target="GetCacheViewAuthenticPixels">
  <data key="d6">calls</data>
</edge>
<edge source="MeanShiftImage" target="GetPixelChannels">
  <data key="d6">calls</data>
</edge>
<edge source="MeanShiftImage" target="GetPixelInfoPixel">
  <data key="d6">calls</data>
</edge>
<edge source="MeanShiftImage" target="DestroyCacheView">
  <data key="d6">calls</data>
</edge>
<edge source="MeanShiftImage" target="CloneImage">
  <data key="d6">calls</data>
</edge>
<edge source="MeanShiftImage" target="SetPixelRed">
  <data key="d6">calls</data>
</edge>
<edge source="MeanShiftImage" target="SetPixelBlue">
  <data key="d6">calls</data>
</edge>
<edge source="MeanShiftImage" target="AcquireVirtualCacheView">
  <data key="d6">calls</data>
</edge>
<edge source="MeanShiftImage" target="GetCacheViewVirtualPixels">
  <data key="d6">calls</data>
</edge>
<edge source="MeanShiftImage" target="GetPixelInfo">
  <data key="d6">calls</data>
</edge>
<edge source="MeanShiftImage" target="if_0">
  <data key="d6">contains</data>
</edge>
<edge source="MeanShiftImage" target="if_1">
  <data key="d6">contains</data>
</edge>
<edge source="MeanShiftImage" target="if_2">
  <data key="d6">contains</data>
</edge>
<edge source="MeanShiftImage" target="if_3">
  <data key="d6">contains</data>
</edge>
<edge source="MeanShiftImage" target="if_4">
  <data key="d6">contains</data>
</edge>
<edge source="MeanShiftImage" target="if_5">
  <data key="d6">contains</data>
</edge>
<edge source="MeanShiftImage" target="if_6">
  <data key="d6">contains</data>
</edge>
<edge source="MeanShiftImage" target="if_7">
  <data key="d6">contains</data>
</edge>
<edge source="MeanShiftImage" target="if_8">
  <data key="d6">contains</data>
</edge>
<edge source="MeanShiftImage" target="if_9">
  <data key="d6">contains</data>
</edge>
<edge source="MeanShiftImage" target="if_10">
  <data key="d6">contains</data>
</edge>
<edge source="MeanShiftImage" target="for_11">
  <data key="d6">contains</data>
</edge>
<edge source="MeanShiftImage" target="for_12">
  <data key="d6">contains</data>
</edge>
<edge source="MeanShiftImage" target="for_13">
  <data key="d6">contains</data>
</edge>
<edge source="MeanShiftImage" target="for_14">
  <data key="d6">contains</data>
</edge>
<edge source="MeanShiftImage" target="for_15">
  <data key="d6">contains</data>
</edge>
<edge source="y" target="if_8">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="y" target="for_11">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="width" target="MeanShiftImage">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="width" target="for_11">
  <data key="d6">used_in_body</data>
</edge>
<edge source="width" target="for_12">
  <data key="d6">used_in_body</data>
</edge>
<edge source="width" target="for_13">
  <data key="d6">used_in_body</data>
</edge>
<edge source="width" target="for_14">
  <data key="d6">used_in_body</data>
</edge>
<edge source="width" target="for_15">
  <data key="d6">used_in_body</data>
</edge>
<edge source="height" target="MeanShiftImage">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="height" target="for_11">
  <data key="d6">used_in_body</data>
</edge>
<edge source="height" target="for_12">
  <data key="d6">used_in_body</data>
</edge>
<edge source="height" target="for_13">
  <data key="d6">used_in_body</data>
</edge>
<edge source="height" target="for_14">
  <data key="d6">used_in_body</data>
</edge>
<edge source="height" target="for_15">
  <data key="d6">used_in_body</data>
</edge>
<edge source="x" target="if_2">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="x" target="if_8">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="x" target="for_12">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="x" target="for_13">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="color_distance" target="if_6">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="color_distance" target="MeanShiftImage">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="color_distance" target="if_5">
  <data key="d6">used_in_body</data>
</edge>
<edge source="color_distance" target="for_11">
  <data key="d6">used_in_body</data>
</edge>
<edge source="color_distance" target="for_12">
  <data key="d6">used_in_body</data>
</edge>
<edge source="color_distance" target="for_13">
  <data key="d6">used_in_body</data>
</edge>
<edge source="color_distance" target="for_14">
  <data key="d6">used_in_body</data>
</edge>
<edge source="color_distance" target="for_15">
  <data key="d6">used_in_body</data>
</edge>
<edge source="i" target="if_0">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_1">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_2">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_3">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_6">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_7">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_8">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_9">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_10">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="for_11">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="for_12">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="for_13">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="for_14">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="for_15">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="u" target="if_0">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="u" target="if_3">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="u" target="if_4">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="u" target="if_5">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="u" target="if_8">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="u" target="for_15">
  <data key="d6">used_in_condition</data>
</edge>
</graph></graphml>