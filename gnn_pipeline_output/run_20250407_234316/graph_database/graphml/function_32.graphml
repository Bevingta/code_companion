<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"><key id="d6" for="edge" attr.name="type" attr.type="string"/>
<key id="d5" for="node" attr.name="condition" attr.type="string"/>
<key id="d4" for="node" attr.name="type" attr.type="string"/>
<key id="d3" for="graph" attr.name="severity" attr.type="string"/>
<key id="d2" for="graph" attr.name="cvss" attr.type="string"/>
<key id="d1" for="graph" attr.name="cve" attr.type="string"/>
<key id="d0" for="graph" attr.name="pointer_arithmetic" attr.type="boolean"/>
<graph edgedefault="directed"><data key="d0">True</data>
<data key="d1">CVE-2018-17961</data>
<data key="d2">6.8</data>
<data key="d3">MEDIUM</data>
<node id="gs_call_interp">
  <data key="d4">FunctionDefinition</data>
</node>
<node id="count">
  <data key="d4">Variable</data>
</node>
<node id="epref_root">
  <data key="d4">Variable</data>
</node>
<node id="i_ctx_p">
  <data key="d4">Variable</data>
</node>
<node id="skip">
  <data key="d4">Variable</data>
</node>
<node id="unknownstr">
  <data key="d4">Variable</data>
</node>
<node id="pexit_code">
  <data key="d4">Variable</data>
</node>
<node id="limit">
  <data key="d4">Variable</data>
</node>
<node id="gc_signal">
  <data key="d4">Variable</data>
</node>
<node id="i">
  <data key="d4">Variable</data>
</node>
<node id="user_errors">
  <data key="d4">Variable</data>
</node>
<node id="set_gc_signal">
  <data key="d4">FunctionCall</data>
</node>
<node id="ref_stack_max_count">
  <data key="d4">FunctionCall</data>
</node>
<node id="ref_stack_pop_to">
  <data key="d4">FunctionCall</data>
</node>
<node id="ialloc_reset_requested">
  <data key="d4">FunctionCall</data>
</node>
<node id="ref_stack_clear">
  <data key="d4">FunctionCall</data>
</node>
<node id="dict_set_top">
  <data key="d4">FunctionCall</data>
</node>
<node id="memcpy">
  <data key="d4">FunctionCall</data>
</node>
<node id="ref_stack_pop_block">
  <data key="d4">FunctionCall</data>
</node>
<node id="errorexec_find">
  <data key="d4">FunctionCall</data>
</node>
<node id="obj_cvs">
  <data key="d4">FunctionCall</data>
</node>
<node id="make_t">
  <data key="d4">FunctionCall</data>
</node>
<node id="copy_stack">
  <data key="d4">FunctionCall</data>
</node>
<node id="ref_stack_count">
  <data key="d4">FunctionCall</data>
</node>
<node id="gs_unregister_root">
  <data key="d4">FunctionCall</data>
</node>
<node id="make_null_proc">
  <data key="d4">FunctionCall</data>
</node>
<node id="make_null">
  <data key="d4">FunctionCall</data>
</node>
<node id="name_ref">
  <data key="d4">FunctionCall</data>
</node>
<node id="interp">
  <data key="d4">FunctionCall</data>
</node>
<node id="ref_stack_index">
  <data key="d4">FunctionCall</data>
</node>
<node id="make_oper">
  <data key="d4">FunctionCall</data>
</node>
<node id="strlen">
  <data key="d4">FunctionCall</data>
</node>
<node id="gs_register_ref_root">
  <data key="d4">FunctionCall</data>
</node>
<node id="pop_estack">
  <data key="d4">FunctionCall</data>
</node>
<node id="interp_reclaim">
  <data key="d4">FunctionCall</data>
</node>
<node id="if_0">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">code &lt; 0</data>
</node>
<node id="if_1">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!r_has_type(&amp;i_ctx_p-&gt;error_object, t__invalid</data>
</node>
<node id="if_2">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">esp &lt; esbot</data>
</node>
<node id="if_3">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">osp &lt; osbot - 1</data>
</node>
<node id="if_4">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">osp &gt;= ostop</data>
</node>
<node id="if_5">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">(ccode = ref_stack_extend(&amp;o_stack, 1</data>
</node>
<node id="if_6">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">ccode &lt; 0</data>
</node>
<node id="if_7">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">ref_stack_pop_block(&amp;d_stack</data>
</node>
<node id="if_8">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">osp &gt;= ostop</data>
</node>
<node id="if_9">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">(ccode = ref_stack_extend(&amp;o_stack, 1</data>
</node>
<node id="if_10">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">ccode &lt; 0</data>
</node>
<node id="if_11">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">count &gt; limit</data>
</node>
<node id="if_12">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">r_has_type_attrs(ep, t_null, a_executable</data>
</node>
<node id="if_13">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">ref_stack_extend(&amp;o_stack, o_stack.requested</data>
</node>
<node id="if_14">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">r_is_proc(&amp;doref</data>
</node>
<node id="if_15">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">ccode &lt; 0</data>
</node>
<node id="if_16">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">ref_stack_pop_block(&amp;o_stack</data>
</node>
<node id="if_17">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">user_errors &lt; 0</data>
</node>
<node id="if_18">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">gs_errorname(i_ctx_p, code, &amp;error_name</data>
</node>
<node id="if_19">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">dict_find_string(systemdict, "gserrordict", &amp;perrordict</data>
</node>
<node id="if_20">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!GS_ERROR_IS_INTERRUPT(code</data>
</node>
<node id="if_21">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">osp &gt;= ostop</data>
</node>
<node id="if_22">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">i_ctx_p-&gt;LockFilePermissions</data>
</node>
<node id="if_23">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">code &lt; 0</data>
</node>
<node id="if_24">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">code &lt; 0</data>
</node>
<node id="for_25">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">i = skip; i &lt; skip + MIN_BLOCK_ESTACK; ++i</data>
</node>
<node id="while_26">
  <data key="d4">ControlStructure_while</data>
  <data key="d5">*gc_signal</data>
</node>
<node id="switch_27">
  <data key="d4">ControlStructure_switch</data>
  <data key="d5">code</data>
</node>
<node id="switch_28">
  <data key="d4">ControlStructure_switch</data>
  <data key="d5">code</data>
</node>
<edge source="gs_call_interp" target="count">
  <data key="d6">declares</data>
</edge>
<edge source="gs_call_interp" target="epref_root">
  <data key="d6">declares</data>
</edge>
<edge source="gs_call_interp" target="i_ctx_p">
  <data key="d6">declares</data>
</edge>
<edge source="gs_call_interp" target="skip">
  <data key="d6">declares</data>
</edge>
<edge source="gs_call_interp" target="unknownstr">
  <data key="d6">declares</data>
</edge>
<edge source="gs_call_interp" target="pexit_code">
  <data key="d6">declares</data>
</edge>
<edge source="gs_call_interp" target="limit">
  <data key="d6">declares</data>
</edge>
<edge source="gs_call_interp" target="gc_signal">
  <data key="d6">declares</data>
</edge>
<edge source="gs_call_interp" target="i">
  <data key="d6">declares</data>
</edge>
<edge source="gs_call_interp" target="user_errors">
  <data key="d6">declares</data>
</edge>
<edge source="gs_call_interp" target="set_gc_signal">
  <data key="d6">calls</data>
</edge>
<edge source="gs_call_interp" target="ref_stack_max_count">
  <data key="d6">calls</data>
</edge>
<edge source="gs_call_interp" target="ref_stack_pop_to">
  <data key="d6">calls</data>
</edge>
<edge source="gs_call_interp" target="ialloc_reset_requested">
  <data key="d6">calls</data>
</edge>
<edge source="gs_call_interp" target="ref_stack_clear">
  <data key="d6">calls</data>
</edge>
<edge source="gs_call_interp" target="dict_set_top">
  <data key="d6">calls</data>
</edge>
<edge source="gs_call_interp" target="memcpy">
  <data key="d6">calls</data>
</edge>
<edge source="gs_call_interp" target="ref_stack_pop_block">
  <data key="d6">calls</data>
</edge>
<edge source="gs_call_interp" target="errorexec_find">
  <data key="d6">calls</data>
</edge>
<edge source="gs_call_interp" target="obj_cvs">
  <data key="d6">calls</data>
</edge>
<edge source="gs_call_interp" target="make_t">
  <data key="d6">calls</data>
</edge>
<edge source="gs_call_interp" target="copy_stack">
  <data key="d6">calls</data>
</edge>
<edge source="gs_call_interp" target="ref_stack_count">
  <data key="d6">calls</data>
</edge>
<edge source="gs_call_interp" target="gs_unregister_root">
  <data key="d6">calls</data>
</edge>
<edge source="gs_call_interp" target="make_null_proc">
  <data key="d6">calls</data>
</edge>
<edge source="gs_call_interp" target="make_null">
  <data key="d6">calls</data>
</edge>
<edge source="gs_call_interp" target="name_ref">
  <data key="d6">calls</data>
</edge>
<edge source="gs_call_interp" target="interp">
  <data key="d6">calls</data>
</edge>
<edge source="gs_call_interp" target="ref_stack_index">
  <data key="d6">calls</data>
</edge>
<edge source="gs_call_interp" target="make_oper">
  <data key="d6">calls</data>
</edge>
<edge source="gs_call_interp" target="strlen">
  <data key="d6">calls</data>
</edge>
<edge source="gs_call_interp" target="gs_register_ref_root">
  <data key="d6">calls</data>
</edge>
<edge source="gs_call_interp" target="pop_estack">
  <data key="d6">calls</data>
</edge>
<edge source="gs_call_interp" target="interp_reclaim">
  <data key="d6">calls</data>
</edge>
<edge source="gs_call_interp" target="if_0">
  <data key="d6">contains</data>
</edge>
<edge source="gs_call_interp" target="if_1">
  <data key="d6">contains</data>
</edge>
<edge source="gs_call_interp" target="if_2">
  <data key="d6">contains</data>
</edge>
<edge source="gs_call_interp" target="if_3">
  <data key="d6">contains</data>
</edge>
<edge source="gs_call_interp" target="if_4">
  <data key="d6">contains</data>
</edge>
<edge source="gs_call_interp" target="if_5">
  <data key="d6">contains</data>
</edge>
<edge source="gs_call_interp" target="if_6">
  <data key="d6">contains</data>
</edge>
<edge source="gs_call_interp" target="if_7">
  <data key="d6">contains</data>
</edge>
<edge source="gs_call_interp" target="if_8">
  <data key="d6">contains</data>
</edge>
<edge source="gs_call_interp" target="if_9">
  <data key="d6">contains</data>
</edge>
<edge source="gs_call_interp" target="if_10">
  <data key="d6">contains</data>
</edge>
<edge source="gs_call_interp" target="if_11">
  <data key="d6">contains</data>
</edge>
<edge source="gs_call_interp" target="if_12">
  <data key="d6">contains</data>
</edge>
<edge source="gs_call_interp" target="if_13">
  <data key="d6">contains</data>
</edge>
<edge source="gs_call_interp" target="if_14">
  <data key="d6">contains</data>
</edge>
<edge source="gs_call_interp" target="if_15">
  <data key="d6">contains</data>
</edge>
<edge source="gs_call_interp" target="if_16">
  <data key="d6">contains</data>
</edge>
<edge source="gs_call_interp" target="if_17">
  <data key="d6">contains</data>
</edge>
<edge source="gs_call_interp" target="if_18">
  <data key="d6">contains</data>
</edge>
<edge source="gs_call_interp" target="if_19">
  <data key="d6">contains</data>
</edge>
<edge source="gs_call_interp" target="if_20">
  <data key="d6">contains</data>
</edge>
<edge source="gs_call_interp" target="if_21">
  <data key="d6">contains</data>
</edge>
<edge source="gs_call_interp" target="if_22">
  <data key="d6">contains</data>
</edge>
<edge source="gs_call_interp" target="if_23">
  <data key="d6">contains</data>
</edge>
<edge source="gs_call_interp" target="if_24">
  <data key="d6">contains</data>
</edge>
<edge source="gs_call_interp" target="for_25">
  <data key="d6">contains</data>
</edge>
<edge source="gs_call_interp" target="while_26">
  <data key="d6">contains</data>
</edge>
<edge source="gs_call_interp" target="switch_27">
  <data key="d6">contains</data>
</edge>
<edge source="gs_call_interp" target="switch_28">
  <data key="d6">contains</data>
</edge>
<edge source="count" target="if_11">
  <data key="d6">used_in_body</data>
</edge>
<edge source="count" target="if_3">
  <data key="d6">used_in_body</data>
</edge>
<edge source="count" target="if_9">
  <data key="d6">used_in_body</data>
</edge>
<edge source="count" target="if_10">
  <data key="d6">used_in_body</data>
</edge>
<edge source="count" target="switch_28">
  <data key="d6">used_in_body</data>
</edge>
<edge source="epref_root" target="gs_unregister_root">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="epref_root" target="gs_register_ref_root">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="epref_root" target="while_26">
  <data key="d6">used_in_body</data>
</edge>
<edge source="i_ctx_p" target="if_1">
  <data key="d6">used_in_body</data>
</edge>
<edge source="i_ctx_p" target="if_18">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i_ctx_p" target="if_22">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i_ctx_p" target="set_gc_signal">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="i_ctx_p" target="gs_call_interp">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="i_ctx_p" target="errorexec_find">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="i_ctx_p" target="make_t">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="i_ctx_p" target="copy_stack">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="i_ctx_p" target="interp">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="i_ctx_p" target="pop_estack">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="i_ctx_p" target="interp_reclaim">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="i_ctx_p" target="if_0">
  <data key="d6">used_in_body</data>
</edge>
<edge source="i_ctx_p" target="if_2">
  <data key="d6">used_in_body</data>
</edge>
<edge source="i_ctx_p" target="if_3">
  <data key="d6">used_in_body</data>
</edge>
<edge source="i_ctx_p" target="if_9">
  <data key="d6">used_in_body</data>
</edge>
<edge source="i_ctx_p" target="if_10">
  <data key="d6">used_in_body</data>
</edge>
<edge source="i_ctx_p" target="if_11">
  <data key="d6">used_in_body</data>
</edge>
<edge source="i_ctx_p" target="while_26">
  <data key="d6">used_in_body</data>
</edge>
<edge source="i_ctx_p" target="switch_27">
  <data key="d6">used_in_body</data>
</edge>
<edge source="i_ctx_p" target="switch_28">
  <data key="d6">used_in_body</data>
</edge>
<edge source="skip" target="for_25">
  <data key="d6">used_in_body</data>
</edge>
<edge source="skip" target="pop_estack">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="skip" target="if_3">
  <data key="d6">used_in_body</data>
</edge>
<edge source="skip" target="if_9">
  <data key="d6">used_in_body</data>
</edge>
<edge source="skip" target="if_10">
  <data key="d6">used_in_body</data>
</edge>
<edge source="skip" target="if_11">
  <data key="d6">used_in_body</data>
</edge>
<edge source="skip" target="if_12">
  <data key="d6">used_in_body</data>
</edge>
<edge source="skip" target="switch_28">
  <data key="d6">used_in_body</data>
</edge>
<edge source="unknownstr" target="memcpy">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="unknownstr" target="strlen">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="unknownstr" target="if_22">
  <data key="d6">used_in_body</data>
</edge>
<edge source="unknownstr" target="if_23">
  <data key="d6">used_in_body</data>
</edge>
<edge source="pexit_code" target="gs_call_interp">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="pexit_code" target="interp">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="pexit_code" target="if_2">
  <data key="d6">used_in_body</data>
</edge>
<edge source="pexit_code" target="switch_27">
  <data key="d6">used_in_body</data>
</edge>
<edge source="limit" target="if_11">
  <data key="d6">used_in_body</data>
</edge>
<edge source="limit" target="if_3">
  <data key="d6">used_in_body</data>
</edge>
<edge source="limit" target="if_9">
  <data key="d6">used_in_body</data>
</edge>
<edge source="limit" target="if_10">
  <data key="d6">used_in_body</data>
</edge>
<edge source="limit" target="switch_28">
  <data key="d6">used_in_body</data>
</edge>
<edge source="gc_signal" target="while_26">
  <data key="d6">used_in_body</data>
</edge>
<edge source="i" target="if_1">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_11">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_14">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_18">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_19">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_22">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="for_25">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="while_26">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="user_errors" target="if_17">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="user_errors" target="gs_call_interp">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="user_errors" target="interp">
  <data key="d6">used_as_parameter</data>
</edge>
</graph></graphml>