<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"><key id="d5" for="edge" attr.name="type" attr.type="string"/>
<key id="d4" for="node" attr.name="condition" attr.type="string"/>
<key id="d3" for="node" attr.name="type" attr.type="string"/>
<key id="d2" for="graph" attr.name="severity" attr.type="string"/>
<key id="d1" for="graph" attr.name="cvss" attr.type="string"/>
<key id="d0" for="graph" attr.name="cve" attr.type="string"/>
<graph edgedefault="directed"><data key="d0">CVE-2018-7731</data>
<data key="d1">4.3</data>
<data key="d2">MEDIUM</data>
<node id="VP8XChunk">
  <data key="d3">FunctionDefinition</data>
</node>
<node id="i">
  <data key="d3">Variable</data>
</node>
<node id="push_back">
  <data key="d3">FunctionCall</data>
</node>
<node id="size">
  <data key="d3">FunctionCall</data>
</node>
<node id="PutLE24">
  <data key="d3">FunctionCall</data>
</node>
<node id="xmp">
  <data key="d3">FunctionCall</data>
</node>
<node id="Rewind">
  <data key="d3">FunctionCall</data>
</node>
<node id="resize">
  <data key="d3">FunctionCall</data>
</node>
<node id="Offset">
  <data key="d3">FunctionCall</data>
</node>
<node id="at">
  <data key="d3">FunctionCall</data>
</node>
<node id="write">
  <data key="d3">FunctionCall</data>
</node>
<node id="pop_back">
  <data key="d3">FunctionCall</data>
</node>
<node id="PutLE32">
  <data key="d3">FunctionCall</data>
</node>
<node id="WriteUns32_LE">
  <data key="d3">FunctionCall</data>
</node>
<node id="assign">
  <data key="d3">FunctionCall</data>
</node>
<node id="GetLE24">
  <data key="d3">FunctionCall</data>
</node>
<node id="height">
  <data key="d3">FunctionCall</data>
</node>
<node id="Seek">
  <data key="d3">FunctionCall</data>
</node>
<node id="getExifChunk">
  <data key="d3">FunctionCall</data>
</node>
<node id="width">
  <data key="d3">FunctionCall</data>
</node>
<node id="Container">
  <data key="d3">FunctionCall</data>
</node>
<node id="data">
  <data key="d3">FunctionCall</data>
</node>
<node id="catch">
  <data key="d3">FunctionCall</data>
</node>
<node id="Truncate">
  <data key="d3">FunctionCall</data>
</node>
<node id="XMP_Throw">
  <data key="d3">FunctionCall</data>
</node>
<node id="addChunk">
  <data key="d3">FunctionCall</data>
</node>
<node id="GetLE32">
  <data key="d3">FunctionCall</data>
</node>
<node id="PeekUns32_LE">
  <data key="d3">FunctionCall</data>
</node>
<node id="back">
  <data key="d3">FunctionCall</data>
</node>
<node id="XMPChunk">
  <data key="d3">FunctionCall</data>
</node>
<node id="if_0">
  <data key="d3">ControlStructure_if</data>
  <data key="d4">this-&gt;chunks[WEBP_CHUNK_IMAGE].size(</data>
</node>
<node id="if_1">
  <data key="d3">ControlStructure_if</data>
  <data key="d4">this-&gt;chunks[WEBP_CHUNK_VP8X].size(</data>
</node>
<node id="if_2">
  <data key="d3">ControlStructure_if</data>
  <data key="d4">this-&gt;chunks[WEBP_CHUNK_XMP].size(</data>
</node>
<node id="if_3">
  <data key="d3">ControlStructure_if</data>
  <data key="d4">this-&gt;chunks[WEBP::WEBP_CHUNK_EXIF].size(</data>
</node>
<node id="if_4">
  <data key="d3">ControlStructure_if</data>
  <data key="d4">lastOffset &lt; handler-&gt;initialFileSize</data>
</node>
<node id="for_5">
  <data key="d3">ControlStructure_for</data>
  <data key="d4">i = 0; i &lt; WEBP_CHUNK_NIL; i++</data>
</node>
<node id="for_6">
  <data key="d3">ControlStructure_for</data>
  <data key="d4">j = 0; j &lt; chunkVect.size(</data>
</node>
<node id="for_7">
  <data key="d3">ControlStructure_for</data>
  <data key="d4">i = 0; i &lt; WEBP_CHUNK_NIL; i++</data>
</node>
<node id="while_8">
  <data key="d3">ControlStructure_while</data>
  <data key="d4">file-&gt;Offset(</data>
</node>
<node id="while_9">
  <data key="d3">ControlStructure_while</data>
  <data key="d4">!chunkVect.empty(</data>
</node>
<node id="switch_10">
  <data key="d3">ControlStructure_switch</data>
  <data key="d4">peek</data>
</node>
<edge source="VP8XChunk" target="i">
  <data key="d5">declares</data>
</edge>
<edge source="VP8XChunk" target="push_back">
  <data key="d5">calls</data>
</edge>
<edge source="VP8XChunk" target="size">
  <data key="d5">calls</data>
</edge>
<edge source="VP8XChunk" target="PutLE24">
  <data key="d5">calls</data>
</edge>
<edge source="VP8XChunk" target="xmp">
  <data key="d5">calls</data>
</edge>
<edge source="VP8XChunk" target="Rewind">
  <data key="d5">calls</data>
</edge>
<edge source="VP8XChunk" target="resize">
  <data key="d5">calls</data>
</edge>
<edge source="VP8XChunk" target="Offset">
  <data key="d5">calls</data>
</edge>
<edge source="VP8XChunk" target="at">
  <data key="d5">calls</data>
</edge>
<edge source="VP8XChunk" target="write">
  <data key="d5">calls</data>
</edge>
<edge source="VP8XChunk" target="pop_back">
  <data key="d5">calls</data>
</edge>
<edge source="VP8XChunk" target="PutLE32">
  <data key="d5">calls</data>
</edge>
<edge source="VP8XChunk" target="WriteUns32_LE">
  <data key="d5">calls</data>
</edge>
<edge source="VP8XChunk" target="assign">
  <data key="d5">calls</data>
</edge>
<edge source="VP8XChunk" target="GetLE24">
  <data key="d5">calls</data>
</edge>
<edge source="VP8XChunk" target="height">
  <data key="d5">calls</data>
</edge>
<edge source="VP8XChunk" target="Seek">
  <data key="d5">calls</data>
</edge>
<edge source="VP8XChunk" target="getExifChunk">
  <data key="d5">calls</data>
</edge>
<edge source="VP8XChunk" target="width">
  <data key="d5">calls</data>
</edge>
<edge source="VP8XChunk" target="Container">
  <data key="d5">calls</data>
</edge>
<edge source="VP8XChunk" target="data">
  <data key="d5">calls</data>
</edge>
<edge source="VP8XChunk" target="catch">
  <data key="d5">calls</data>
</edge>
<edge source="VP8XChunk" target="Truncate">
  <data key="d5">calls</data>
</edge>
<edge source="VP8XChunk" target="XMP_Throw">
  <data key="d5">calls</data>
</edge>
<edge source="VP8XChunk" target="addChunk">
  <data key="d5">calls</data>
</edge>
<edge source="VP8XChunk" target="GetLE32">
  <data key="d5">calls</data>
</edge>
<edge source="VP8XChunk" target="PeekUns32_LE">
  <data key="d5">calls</data>
</edge>
<edge source="VP8XChunk" target="back">
  <data key="d5">calls</data>
</edge>
<edge source="VP8XChunk" target="XMPChunk">
  <data key="d5">calls</data>
</edge>
<edge source="VP8XChunk" target="if_0">
  <data key="d5">contains</data>
</edge>
<edge source="VP8XChunk" target="if_1">
  <data key="d5">contains</data>
</edge>
<edge source="VP8XChunk" target="if_2">
  <data key="d5">contains</data>
</edge>
<edge source="VP8XChunk" target="if_3">
  <data key="d5">contains</data>
</edge>
<edge source="VP8XChunk" target="if_4">
  <data key="d5">contains</data>
</edge>
<edge source="VP8XChunk" target="for_5">
  <data key="d5">contains</data>
</edge>
<edge source="VP8XChunk" target="for_6">
  <data key="d5">contains</data>
</edge>
<edge source="VP8XChunk" target="for_7">
  <data key="d5">contains</data>
</edge>
<edge source="VP8XChunk" target="while_8">
  <data key="d5">contains</data>
</edge>
<edge source="VP8XChunk" target="while_9">
  <data key="d5">contains</data>
</edge>
<edge source="VP8XChunk" target="switch_10">
  <data key="d5">contains</data>
</edge>
<edge source="i" target="if_0">
  <data key="d5">used_in_condition</data>
</edge>
<edge source="i" target="if_1">
  <data key="d5">used_in_condition</data>
</edge>
<edge source="i" target="if_2">
  <data key="d5">used_in_condition</data>
</edge>
<edge source="i" target="if_3">
  <data key="d5">used_in_condition</data>
</edge>
<edge source="i" target="if_4">
  <data key="d5">used_in_condition</data>
</edge>
<edge source="i" target="for_5">
  <data key="d5">used_in_condition</data>
</edge>
<edge source="i" target="for_6">
  <data key="d5">used_in_condition</data>
</edge>
<edge source="i" target="for_7">
  <data key="d5">used_in_condition</data>
</edge>
<edge source="i" target="while_8">
  <data key="d5">used_in_condition</data>
</edge>
</graph></graphml>