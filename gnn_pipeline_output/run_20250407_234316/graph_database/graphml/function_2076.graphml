<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"><key id="d6" for="edge" attr.name="type" attr.type="string"/>
<key id="d5" for="node" attr.name="condition" attr.type="string"/>
<key id="d4" for="node" attr.name="type" attr.type="string"/>
<key id="d3" for="graph" attr.name="severity" attr.type="string"/>
<key id="d2" for="graph" attr.name="cvss" attr.type="string"/>
<key id="d1" for="graph" attr.name="cve" attr.type="string"/>
<key id="d0" for="graph" attr.name="pointer_arithmetic" attr.type="boolean"/>
<graph edgedefault="directed"><data key="d0">True</data>
<data key="d1">CVE-2016-10328</data>
<data key="d2">7.5</data>
<data key="d3">HIGH</data>
<node id="cff_parser_run">
  <data key="d4">FunctionDefinition</data>
</node>
<node id="cff_parse_num">
  <data key="d4">FunctionCall</data>
</node>
<node id="cff_decoder_parse_charstrings">
  <data key="d4">FunctionCall</data>
</node>
<node id="FT_THROW">
  <data key="d4">FunctionCall</data>
</node>
<node id="FT_ZERO">
  <data key="d4">FunctionCall</data>
</node>
<node id="cff_parse_fixed">
  <data key="d4">FunctionCall</data>
</node>
<node id="FT_UNUSED">
  <data key="d4">FunctionCall</data>
</node>
<node id="case">
  <data key="d4">FunctionCall</data>
</node>
<node id="FT_TRACE4">
  <data key="d4">FunctionCall</data>
</node>
<node id="reader">
  <data key="d4">FunctionCall</data>
</node>
<node id="cff_parse_fixed_scaled">
  <data key="d4">FunctionCall</data>
</node>
<node id="if_0">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> v &gt;= 27 &amp;&amp; v != 31 &amp;&amp; v != 255 </data>
</node>
<node id="if_1">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> (FT_UInt</data>
</node>
<node id="if_2">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> v == 30 </data>
</node>
<node id="if_3">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> p &gt;= limit </data>
</node>
<node id="if_4">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> v == 15 </data>
</node>
<node id="if_5">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> v == 15 </data>
</node>
<node id="if_6">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> v == 28 </data>
</node>
<node id="if_7">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> v == 29 </data>
</node>
<node id="if_8">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> v &gt; 246 </data>
</node>
<node id="if_9">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> v == 31 </data>
</node>
<node id="if_10">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> p &gt;= limit </data>
</node>
<node id="if_11">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> *p == 14 </data>
</node>
<node id="if_12">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> (FT_UInt</data>
</node>
<node id="if_13">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> *stack &lt; 0 </data>
</node>
<node id="if_14">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> num &amp; 0xFFFFU </data>
</node>
<node id="if_15">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> neg </data>
</node>
<node id="if_16">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> neg </data>
</node>
<node id="if_17">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> num &lt;= 107 </data>
</node>
<node id="if_18">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> num &lt;= 1131 </data>
</node>
<node id="if_19">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> num &lt;= 107 </data>
</node>
<node id="if_20">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> num &lt;= 1131 </data>
</node>
<node id="if_21">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> v == 12 </data>
</node>
<node id="if_22">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> field-&gt;code == (FT_Int</data>
</node>
<node id="if_23">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> field-&gt;kind != cff_kind_delta &amp;&amp; num_args &lt; 1 </data>
</node>
<node id="if_24">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> num_args &gt; field-&gt;array_max </data>
</node>
<node id="if_25">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> error </data>
</node>
<node id="if_26">
  <data key="d4">ControlStructure_if</data>
  <data key="d5"> field-&gt;kind != cff_kind_blend </data>
</node>
<node id="for_27">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">;;</data>
</node>
<node id="for_28">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">;;</data>
</node>
<node id="for_29">
  <data key="d4">ControlStructure_for</data>
  <data key="d5"> field = CFF_FIELD_HANDLERS_GET; field-&gt;kind; field++ </data>
</node>
<node id="while_30">
  <data key="d4">ControlStructure_while</data>
  <data key="d5"> p &lt; limit </data>
</node>
<node id="while_31">
  <data key="d4">ControlStructure_while</data>
  <data key="d5"> stack &lt; decoder.top </data>
</node>
<node id="while_32">
  <data key="d4">ControlStructure_while</data>
  <data key="d5"> num_args &gt; 0 </data>
</node>
<node id="switch_33">
  <data key="d4">ControlStructure_switch</data>
  <data key="d5"> field-&gt;kind </data>
</node>
<node id="switch_34">
  <data key="d4">ControlStructure_switch</data>
  <data key="d5"> field-&gt;size </data>
</node>
<node id="switch_35">
  <data key="d4">ControlStructure_switch</data>
  <data key="d5"> field-&gt;kind </data>
</node>
<node id="switch_36">
  <data key="d4">ControlStructure_switch</data>
  <data key="d5"> field-&gt;size </data>
</node>
<edge source="cff_parser_run" target="cff_parse_num">
  <data key="d6">calls</data>
</edge>
<edge source="cff_parser_run" target="cff_decoder_parse_charstrings">
  <data key="d6">calls</data>
</edge>
<edge source="cff_parser_run" target="FT_THROW">
  <data key="d6">calls</data>
</edge>
<edge source="cff_parser_run" target="FT_ZERO">
  <data key="d6">calls</data>
</edge>
<edge source="cff_parser_run" target="cff_parse_fixed">
  <data key="d6">calls</data>
</edge>
<edge source="cff_parser_run" target="FT_UNUSED">
  <data key="d6">calls</data>
</edge>
<edge source="cff_parser_run" target="case">
  <data key="d6">calls</data>
</edge>
<edge source="cff_parser_run" target="FT_TRACE4">
  <data key="d6">calls</data>
</edge>
<edge source="cff_parser_run" target="reader">
  <data key="d6">calls</data>
</edge>
<edge source="cff_parser_run" target="cff_parse_fixed_scaled">
  <data key="d6">calls</data>
</edge>
<edge source="cff_parser_run" target="if_0">
  <data key="d6">contains</data>
</edge>
<edge source="cff_parser_run" target="if_1">
  <data key="d6">contains</data>
</edge>
<edge source="cff_parser_run" target="if_2">
  <data key="d6">contains</data>
</edge>
<edge source="cff_parser_run" target="if_3">
  <data key="d6">contains</data>
</edge>
<edge source="cff_parser_run" target="if_4">
  <data key="d6">contains</data>
</edge>
<edge source="cff_parser_run" target="if_5">
  <data key="d6">contains</data>
</edge>
<edge source="cff_parser_run" target="if_6">
  <data key="d6">contains</data>
</edge>
<edge source="cff_parser_run" target="if_7">
  <data key="d6">contains</data>
</edge>
<edge source="cff_parser_run" target="if_8">
  <data key="d6">contains</data>
</edge>
<edge source="cff_parser_run" target="if_9">
  <data key="d6">contains</data>
</edge>
<edge source="cff_parser_run" target="if_10">
  <data key="d6">contains</data>
</edge>
<edge source="cff_parser_run" target="if_11">
  <data key="d6">contains</data>
</edge>
<edge source="cff_parser_run" target="if_12">
  <data key="d6">contains</data>
</edge>
<edge source="cff_parser_run" target="if_13">
  <data key="d6">contains</data>
</edge>
<edge source="cff_parser_run" target="if_14">
  <data key="d6">contains</data>
</edge>
<edge source="cff_parser_run" target="if_15">
  <data key="d6">contains</data>
</edge>
<edge source="cff_parser_run" target="if_16">
  <data key="d6">contains</data>
</edge>
<edge source="cff_parser_run" target="if_17">
  <data key="d6">contains</data>
</edge>
<edge source="cff_parser_run" target="if_18">
  <data key="d6">contains</data>
</edge>
<edge source="cff_parser_run" target="if_19">
  <data key="d6">contains</data>
</edge>
<edge source="cff_parser_run" target="if_20">
  <data key="d6">contains</data>
</edge>
<edge source="cff_parser_run" target="if_21">
  <data key="d6">contains</data>
</edge>
<edge source="cff_parser_run" target="if_22">
  <data key="d6">contains</data>
</edge>
<edge source="cff_parser_run" target="if_23">
  <data key="d6">contains</data>
</edge>
<edge source="cff_parser_run" target="if_24">
  <data key="d6">contains</data>
</edge>
<edge source="cff_parser_run" target="if_25">
  <data key="d6">contains</data>
</edge>
<edge source="cff_parser_run" target="if_26">
  <data key="d6">contains</data>
</edge>
<edge source="cff_parser_run" target="for_27">
  <data key="d6">contains</data>
</edge>
<edge source="cff_parser_run" target="for_28">
  <data key="d6">contains</data>
</edge>
<edge source="cff_parser_run" target="for_29">
  <data key="d6">contains</data>
</edge>
<edge source="cff_parser_run" target="while_30">
  <data key="d6">contains</data>
</edge>
<edge source="cff_parser_run" target="while_31">
  <data key="d6">contains</data>
</edge>
<edge source="cff_parser_run" target="while_32">
  <data key="d6">contains</data>
</edge>
<edge source="cff_parser_run" target="switch_33">
  <data key="d6">contains</data>
</edge>
<edge source="cff_parser_run" target="switch_34">
  <data key="d6">contains</data>
</edge>
<edge source="cff_parser_run" target="switch_35">
  <data key="d6">contains</data>
</edge>
<edge source="cff_parser_run" target="switch_36">
  <data key="d6">contains</data>
</edge>
</graph></graphml>