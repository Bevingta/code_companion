<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"><key id="d6" for="edge" attr.name="type" attr.type="string"/>
<key id="d5" for="node" attr.name="condition" attr.type="string"/>
<key id="d4" for="node" attr.name="type" attr.type="string"/>
<key id="d3" for="graph" attr.name="severity" attr.type="string"/>
<key id="d2" for="graph" attr.name="cvss" attr.type="string"/>
<key id="d1" for="graph" attr.name="cve" attr.type="string"/>
<key id="d0" for="graph" attr.name="potential_buffer_overflow" attr.type="boolean"/>
<graph edgedefault="directed"><data key="d0">True</data>
<data key="d1">CVE-2017-12666</data>
<data key="d2">6.8</data>
<data key="d3">MEDIUM</data>
<node id="WriteINLINEImage">
  <data key="d4">FunctionDefinition</data>
</node>
<node id="blob">
  <data key="d4">Variable</data>
</node>
<node id="CloneImageInfo">
  <data key="d4">FunctionCall</data>
</node>
<node id="ImageToBlob">
  <data key="d4">FunctionCall</data>
</node>
<node id="RelinquishMagickMemory">
  <data key="d4">FunctionCall</data>
</node>
<node id="WriteBlobString">
  <data key="d4">FunctionCall</data>
</node>
<node id="GetMagickInfo">
  <data key="d4">FunctionCall</data>
</node>
<node id="SetImageInfo">
  <data key="d4">FunctionCall</data>
</node>
<node id="CloneImage">
  <data key="d4">FunctionCall</data>
</node>
<node id="CopyMagickString">
  <data key="d4">FunctionCall</data>
</node>
<node id="OpenBlob">
  <data key="d4">FunctionCall</data>
</node>
<node id="GetMagickMimeType">
  <data key="d4">FunctionCall</data>
</node>
<node id="Base64Encode">
  <data key="d4">FunctionCall</data>
</node>
<node id="DestroyString">
  <data key="d4">FunctionCall</data>
</node>
<node id="DestroyImage">
  <data key="d4">FunctionCall</data>
</node>
<node id="DestroyImageInfo">
  <data key="d4">FunctionCall</data>
</node>
<node id="assert">
  <data key="d4">FunctionCall</data>
</node>
<node id="if_0">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">image-&gt;debug != MagickFalse</data>
</node>
<node id="if_1">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">LocaleCompare(write_info-&gt;magick,"INLINE"</data>
</node>
<node id="if_2">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">(magick_info == (const MagickInfo *</data>
</node>
<node id="if_3">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">write_image == (Image *</data>
</node>
<node id="if_4">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">blob == (unsigned char *</data>
</node>
<node id="if_5">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">base64 == (char *</data>
</node>
<node id="if_6">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">status == MagickFalse</data>
</node>
<edge source="WriteINLINEImage" target="blob">
  <data key="d6">declares</data>
</edge>
<edge source="WriteINLINEImage" target="CloneImageInfo">
  <data key="d6">calls</data>
</edge>
<edge source="WriteINLINEImage" target="ImageToBlob">
  <data key="d6">calls</data>
</edge>
<edge source="WriteINLINEImage" target="RelinquishMagickMemory">
  <data key="d6">calls</data>
</edge>
<edge source="WriteINLINEImage" target="WriteBlobString">
  <data key="d6">calls</data>
</edge>
<edge source="WriteINLINEImage" target="GetMagickInfo">
  <data key="d6">calls</data>
</edge>
<edge source="WriteINLINEImage" target="SetImageInfo">
  <data key="d6">calls</data>
</edge>
<edge source="WriteINLINEImage" target="CloneImage">
  <data key="d6">calls</data>
</edge>
<edge source="WriteINLINEImage" target="CopyMagickString">
  <data key="d6">calls</data>
</edge>
<edge source="WriteINLINEImage" target="OpenBlob">
  <data key="d6">calls</data>
</edge>
<edge source="WriteINLINEImage" target="GetMagickMimeType">
  <data key="d6">calls</data>
</edge>
<edge source="WriteINLINEImage" target="Base64Encode">
  <data key="d6">calls</data>
</edge>
<edge source="WriteINLINEImage" target="DestroyString">
  <data key="d6">calls</data>
</edge>
<edge source="WriteINLINEImage" target="DestroyImage">
  <data key="d6">calls</data>
</edge>
<edge source="WriteINLINEImage" target="DestroyImageInfo">
  <data key="d6">calls</data>
</edge>
<edge source="WriteINLINEImage" target="assert">
  <data key="d6">calls</data>
</edge>
<edge source="WriteINLINEImage" target="if_0">
  <data key="d6">contains</data>
</edge>
<edge source="WriteINLINEImage" target="if_1">
  <data key="d6">contains</data>
</edge>
<edge source="WriteINLINEImage" target="if_2">
  <data key="d6">contains</data>
</edge>
<edge source="WriteINLINEImage" target="if_3">
  <data key="d6">contains</data>
</edge>
<edge source="WriteINLINEImage" target="if_4">
  <data key="d6">contains</data>
</edge>
<edge source="WriteINLINEImage" target="if_5">
  <data key="d6">contains</data>
</edge>
<edge source="WriteINLINEImage" target="if_6">
  <data key="d6">contains</data>
</edge>
<edge source="blob" target="if_4">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="blob" target="ImageToBlob">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="blob" target="RelinquishMagickMemory">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="blob" target="Base64Encode">
  <data key="d6">used_as_parameter</data>
</edge>
</graph></graphml>