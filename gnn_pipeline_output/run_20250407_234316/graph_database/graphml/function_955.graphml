<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"><key id="d6" for="edge" attr.name="type" attr.type="string"/>
<key id="d5" for="node" attr.name="condition" attr.type="string"/>
<key id="d4" for="node" attr.name="type" attr.type="string"/>
<key id="d3" for="graph" attr.name="severity" attr.type="string"/>
<key id="d2" for="graph" attr.name="cvss" attr.type="string"/>
<key id="d1" for="graph" attr.name="cve" attr.type="string"/>
<key id="d0" for="graph" attr.name="pointer_arithmetic" attr.type="boolean"/>
<graph edgedefault="directed"><data key="d0">True</data>
<data key="d1">CVE-2017-11447</data>
<data key="d2">4.3</data>
<data key="d3">MEDIUM</data>
<node id="ReadSCREENSHOTImage">
  <data key="d4">FunctionDefinition</data>
</node>
<node id="i">
  <data key="d4">Variable</data>
</node>
<node id="x">
  <data key="d4">Variable</data>
</node>
<node id="y">
  <data key="d4">Variable</data>
</node>
<node id="option">
  <data key="d4">Variable</data>
</node>
<node id="CreateDC">
  <data key="d4">FunctionCall</data>
</node>
<node id="sizeof">
  <data key="d4">FunctionCall</data>
</node>
<node id="defined">
  <data key="d4">FunctionCall</data>
</node>
<node id="CreateDIBSection">
  <data key="d4">FunctionCall</data>
</node>
<node id="SetImageExtent">
  <data key="d4">FunctionCall</data>
</node>
<node id="ThrowReaderException">
  <data key="d4">FunctionCall</data>
</node>
<node id="DeleteDC">
  <data key="d4">FunctionCall</data>
</node>
<node id="CreateCompatibleDC">
  <data key="d4">FunctionCall</data>
</node>
<node id="assert">
  <data key="d4">FunctionCall</data>
</node>
<node id="QueueAuthenticPixels">
  <data key="d4">FunctionCall</data>
</node>
<node id="XGetImportInfo">
  <data key="d4">FunctionCall</data>
</node>
<node id="SetPixelGreen">
  <data key="d4">FunctionCall</data>
</node>
<node id="XImportImage">
  <data key="d4">FunctionCall</data>
</node>
<node id="SelectObject">
  <data key="d4">FunctionCall</data>
</node>
<node id="AppendImageToList">
  <data key="d4">FunctionCall</data>
</node>
<node id="GetImageOption">
  <data key="d4">FunctionCall</data>
</node>
<node id="SetPixelRed">
  <data key="d4">FunctionCall</data>
</node>
<node id="ResetMagickMemory">
  <data key="d4">FunctionCall</data>
</node>
<node id="GetDeviceCaps">
  <data key="d4">FunctionCall</data>
</node>
<node id="InheritException">
  <data key="d4">FunctionCall</data>
</node>
<node id="SetPixelBlue">
  <data key="d4">FunctionCall</data>
</node>
<node id="AcquireImage">
  <data key="d4">FunctionCall</data>
</node>
<node id="SetPixelOpacity">
  <data key="d4">FunctionCall</data>
</node>
<node id="BitBlt">
  <data key="d4">FunctionCall</data>
</node>
<node id="DeleteObject">
  <data key="d4">FunctionCall</data>
</node>
<node id="if_0">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">image_info-&gt;debug != MagickFalse</data>
</node>
<node id="if_1">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">(device.StateFlags &amp; DISPLAY_DEVICE_ACTIVE</data>
</node>
<node id="if_2">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">hDC == (HDC</data>
</node>
<node id="if_3">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">status == MagickFalse</data>
</node>
<node id="if_4">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">image == (Image *</data>
</node>
<node id="if_5">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">bitmapDC == (HDC</data>
</node>
<node id="if_6">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">bitmap == (HBITMAP</data>
</node>
<node id="if_7">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">bitmapOld == (HBITMAP</data>
</node>
<node id="if_8">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">q == (PixelPacket *</data>
</node>
<node id="if_9">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">SyncAuthenticPixels(screen,exception</data>
</node>
<node id="if_10">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">option != (const char *</data>
</node>
<node id="if_11">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">option != (const char *</data>
</node>
<node id="for_12">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">y=0; y &lt; (ssize_t</data>
</node>
<node id="for_13">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">x=0; x &lt; (ssize_t</data>
</node>
<node id="while_14">
  <data key="d4">ControlStructure_while</data>
  <data key="d5">EnumDisplayDevices(NULL,i,&amp;device,0</data>
</node>
<edge source="ReadSCREENSHOTImage" target="i">
  <data key="d6">declares</data>
</edge>
<edge source="ReadSCREENSHOTImage" target="x">
  <data key="d6">declares</data>
</edge>
<edge source="ReadSCREENSHOTImage" target="y">
  <data key="d6">declares</data>
</edge>
<edge source="ReadSCREENSHOTImage" target="option">
  <data key="d6">declares</data>
</edge>
<edge source="ReadSCREENSHOTImage" target="CreateDC">
  <data key="d6">calls</data>
</edge>
<edge source="ReadSCREENSHOTImage" target="sizeof">
  <data key="d6">calls</data>
</edge>
<edge source="ReadSCREENSHOTImage" target="defined">
  <data key="d6">calls</data>
</edge>
<edge source="ReadSCREENSHOTImage" target="CreateDIBSection">
  <data key="d6">calls</data>
</edge>
<edge source="ReadSCREENSHOTImage" target="SetImageExtent">
  <data key="d6">calls</data>
</edge>
<edge source="ReadSCREENSHOTImage" target="ThrowReaderException">
  <data key="d6">calls</data>
</edge>
<edge source="ReadSCREENSHOTImage" target="DeleteDC">
  <data key="d6">calls</data>
</edge>
<edge source="ReadSCREENSHOTImage" target="CreateCompatibleDC">
  <data key="d6">calls</data>
</edge>
<edge source="ReadSCREENSHOTImage" target="assert">
  <data key="d6">calls</data>
</edge>
<edge source="ReadSCREENSHOTImage" target="QueueAuthenticPixels">
  <data key="d6">calls</data>
</edge>
<edge source="ReadSCREENSHOTImage" target="XGetImportInfo">
  <data key="d6">calls</data>
</edge>
<edge source="ReadSCREENSHOTImage" target="SetPixelGreen">
  <data key="d6">calls</data>
</edge>
<edge source="ReadSCREENSHOTImage" target="XImportImage">
  <data key="d6">calls</data>
</edge>
<edge source="ReadSCREENSHOTImage" target="SelectObject">
  <data key="d6">calls</data>
</edge>
<edge source="ReadSCREENSHOTImage" target="AppendImageToList">
  <data key="d6">calls</data>
</edge>
<edge source="ReadSCREENSHOTImage" target="GetImageOption">
  <data key="d6">calls</data>
</edge>
<edge source="ReadSCREENSHOTImage" target="SetPixelRed">
  <data key="d6">calls</data>
</edge>
<edge source="ReadSCREENSHOTImage" target="ResetMagickMemory">
  <data key="d6">calls</data>
</edge>
<edge source="ReadSCREENSHOTImage" target="GetDeviceCaps">
  <data key="d6">calls</data>
</edge>
<edge source="ReadSCREENSHOTImage" target="InheritException">
  <data key="d6">calls</data>
</edge>
<edge source="ReadSCREENSHOTImage" target="SetPixelBlue">
  <data key="d6">calls</data>
</edge>
<edge source="ReadSCREENSHOTImage" target="AcquireImage">
  <data key="d6">calls</data>
</edge>
<edge source="ReadSCREENSHOTImage" target="SetPixelOpacity">
  <data key="d6">calls</data>
</edge>
<edge source="ReadSCREENSHOTImage" target="BitBlt">
  <data key="d6">calls</data>
</edge>
<edge source="ReadSCREENSHOTImage" target="DeleteObject">
  <data key="d6">calls</data>
</edge>
<edge source="ReadSCREENSHOTImage" target="if_0">
  <data key="d6">contains</data>
</edge>
<edge source="ReadSCREENSHOTImage" target="if_1">
  <data key="d6">contains</data>
</edge>
<edge source="ReadSCREENSHOTImage" target="if_2">
  <data key="d6">contains</data>
</edge>
<edge source="ReadSCREENSHOTImage" target="if_3">
  <data key="d6">contains</data>
</edge>
<edge source="ReadSCREENSHOTImage" target="if_4">
  <data key="d6">contains</data>
</edge>
<edge source="ReadSCREENSHOTImage" target="if_5">
  <data key="d6">contains</data>
</edge>
<edge source="ReadSCREENSHOTImage" target="if_6">
  <data key="d6">contains</data>
</edge>
<edge source="ReadSCREENSHOTImage" target="if_7">
  <data key="d6">contains</data>
</edge>
<edge source="ReadSCREENSHOTImage" target="if_8">
  <data key="d6">contains</data>
</edge>
<edge source="ReadSCREENSHOTImage" target="if_9">
  <data key="d6">contains</data>
</edge>
<edge source="ReadSCREENSHOTImage" target="if_10">
  <data key="d6">contains</data>
</edge>
<edge source="ReadSCREENSHOTImage" target="if_11">
  <data key="d6">contains</data>
</edge>
<edge source="ReadSCREENSHOTImage" target="for_12">
  <data key="d6">contains</data>
</edge>
<edge source="ReadSCREENSHOTImage" target="for_13">
  <data key="d6">contains</data>
</edge>
<edge source="ReadSCREENSHOTImage" target="while_14">
  <data key="d6">contains</data>
</edge>
<edge source="i" target="if_0">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_1">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_3">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_4">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_5">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_6">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_7">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_8">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_9">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_10">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_11">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="for_12">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="for_13">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="while_14">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="x" target="if_8">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="x" target="if_9">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="x" target="for_13">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="y" target="if_9">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="y" target="for_12">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="y" target="while_14">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="option" target="if_10">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="option" target="if_11">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="option" target="if_9">
  <data key="d6">used_in_body</data>
</edge>
</graph></graphml>