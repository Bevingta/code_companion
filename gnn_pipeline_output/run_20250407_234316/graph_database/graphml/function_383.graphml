<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"><key id="d6" for="edge" attr.name="type" attr.type="string"/>
<key id="d5" for="node" attr.name="condition" attr.type="string"/>
<key id="d4" for="node" attr.name="type" attr.type="string"/>
<key id="d3" for="graph" attr.name="severity" attr.type="string"/>
<key id="d2" for="graph" attr.name="cvss" attr.type="string"/>
<key id="d1" for="graph" attr.name="cve" attr.type="string"/>
<key id="d0" for="graph" attr.name="pointer_arithmetic" attr.type="boolean"/>
<graph edgedefault="directed"><data key="d0">True</data>
<data key="d1">CVE-2013-1774</data>
<data key="d2">4.0</data>
<data key="d3">MEDIUM</data>
<node id="chase_port">
  <data key="d4">FunctionDefinition</data>
</node>
<node id="wait">
  <data key="d4">Variable</data>
</node>
<node id="baud_rate">
  <data key="d4">Variable</data>
</node>
<node id="flush">
  <data key="d4">Variable</data>
</node>
<node id="port">
  <data key="d4">Variable</data>
</node>
<node id="long">
  <data key="d4">Variable</data>
</node>
<node id="serial">
  <data key="d4">Variable</data>
</node>
<node id="tty">
  <data key="d4">Variable</data>
</node>
<node id="flags">
  <data key="d4">Variable</data>
</node>
<node id="remove_wait_queue">
  <data key="d4">FunctionCall</data>
</node>
<node id="set_current_state">
  <data key="d4">FunctionCall</data>
</node>
<node id="tty_kref_put">
  <data key="d4">FunctionCall</data>
</node>
<node id="add_wait_queue">
  <data key="d4">FunctionCall</data>
</node>
<node id="init_waitqueue_entry">
  <data key="d4">FunctionCall</data>
</node>
<node id="schedule_timeout">
  <data key="d4">FunctionCall</data>
</node>
<node id="tty_port_tty_get">
  <data key="d4">FunctionCall</data>
</node>
<node id="msleep">
  <data key="d4">FunctionCall</data>
</node>
<node id="spin_unlock_irqrestore">
  <data key="d4">FunctionCall</data>
</node>
<node id="spin_lock_irqsave">
  <data key="d4">FunctionCall</data>
</node>
<node id="if_0">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!timeout</data>
</node>
<node id="if_1">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">kfifo_len(&amp;port-&gt;write_fifo</data>
</node>
<node id="if_2">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">flush</data>
</node>
<node id="if_3">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!tx_active(port</data>
</node>
<node id="if_4">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">serial-&gt;disconnected</data>
</node>
<node id="if_5">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">baud_rate == 0</data>
</node>
<node id="for_6">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">;;</data>
</node>
<node id="while_7">
  <data key="d4">ControlStructure_while</data>
  <data key="d5">(long</data>
</node>
<edge source="chase_port" target="wait">
  <data key="d6">declares</data>
</edge>
<edge source="chase_port" target="baud_rate">
  <data key="d6">declares</data>
</edge>
<edge source="chase_port" target="flush">
  <data key="d6">declares</data>
</edge>
<edge source="chase_port" target="port">
  <data key="d6">declares</data>
</edge>
<edge source="chase_port" target="long">
  <data key="d6">declares</data>
</edge>
<edge source="chase_port" target="serial">
  <data key="d6">declares</data>
</edge>
<edge source="chase_port" target="tty">
  <data key="d6">declares</data>
</edge>
<edge source="chase_port" target="flags">
  <data key="d6">declares</data>
</edge>
<edge source="chase_port" target="remove_wait_queue">
  <data key="d6">calls</data>
</edge>
<edge source="chase_port" target="set_current_state">
  <data key="d6">calls</data>
</edge>
<edge source="chase_port" target="tty_kref_put">
  <data key="d6">calls</data>
</edge>
<edge source="chase_port" target="add_wait_queue">
  <data key="d6">calls</data>
</edge>
<edge source="chase_port" target="init_waitqueue_entry">
  <data key="d6">calls</data>
</edge>
<edge source="chase_port" target="schedule_timeout">
  <data key="d6">calls</data>
</edge>
<edge source="chase_port" target="tty_port_tty_get">
  <data key="d6">calls</data>
</edge>
<edge source="chase_port" target="msleep">
  <data key="d6">calls</data>
</edge>
<edge source="chase_port" target="spin_unlock_irqrestore">
  <data key="d6">calls</data>
</edge>
<edge source="chase_port" target="spin_lock_irqsave">
  <data key="d6">calls</data>
</edge>
<edge source="chase_port" target="if_0">
  <data key="d6">contains</data>
</edge>
<edge source="chase_port" target="if_1">
  <data key="d6">contains</data>
</edge>
<edge source="chase_port" target="if_2">
  <data key="d6">contains</data>
</edge>
<edge source="chase_port" target="if_3">
  <data key="d6">contains</data>
</edge>
<edge source="chase_port" target="if_4">
  <data key="d6">contains</data>
</edge>
<edge source="chase_port" target="if_5">
  <data key="d6">contains</data>
</edge>
<edge source="chase_port" target="for_6">
  <data key="d6">contains</data>
</edge>
<edge source="chase_port" target="while_7">
  <data key="d6">contains</data>
</edge>
<edge source="wait" target="remove_wait_queue">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="wait" target="add_wait_queue">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="wait" target="init_waitqueue_entry">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="baud_rate" target="if_5">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="baud_rate" target="msleep">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="flush" target="if_2">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="flush" target="chase_port">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="port" target="if_1">
  <data key="d6">used_in_body</data>
</edge>
<edge source="port" target="if_3">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="port" target="tty_port_tty_get">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="port" target="chase_port">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="port" target="spin_unlock_irqrestore">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="port" target="spin_lock_irqsave">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="port" target="if_0">
  <data key="d6">used_in_body</data>
</edge>
<edge source="port" target="if_2">
  <data key="d6">used_in_body</data>
</edge>
<edge source="port" target="for_6">
  <data key="d6">used_in_body</data>
</edge>
<edge source="port" target="while_7">
  <data key="d6">used_in_body</data>
</edge>
<edge source="long" target="while_7">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="long" target="chase_port">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="serial" target="if_4">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="serial" target="if_0">
  <data key="d6">used_in_body</data>
</edge>
<edge source="serial" target="for_6">
  <data key="d6">used_in_body</data>
</edge>
<edge source="tty" target="remove_wait_queue">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="tty" target="tty_kref_put">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="tty" target="add_wait_queue">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="flags" target="spin_unlock_irqrestore">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="flags" target="spin_lock_irqsave">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="flags" target="if_0">
  <data key="d6">used_in_body</data>
</edge>
<edge source="flags" target="for_6">
  <data key="d6">used_in_body</data>
</edge>
</graph></graphml>