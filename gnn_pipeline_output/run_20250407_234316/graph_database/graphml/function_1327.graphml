<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"><key id="d7" for="edge" attr.name="type" attr.type="string"/>
<key id="d6" for="node" attr.name="condition" attr.type="string"/>
<key id="d5" for="node" attr.name="type" attr.type="string"/>
<key id="d4" for="graph" attr.name="severity" attr.type="string"/>
<key id="d3" for="graph" attr.name="cvss" attr.type="string"/>
<key id="d2" for="graph" attr.name="cve" attr.type="string"/>
<key id="d1" for="graph" attr.name="memory_allocation" attr.type="boolean"/>
<key id="d0" for="graph" attr.name="pointer_arithmetic" attr.type="boolean"/>
<graph edgedefault="directed"><data key="d0">True</data>
<data key="d1">True</data>
<data key="d2">CVE-2018-11381</data>
<data key="d3">4.3</data>
<data key="d4">MEDIUM</data>
<node id="string_scan_range">
  <data key="d5">FunctionDefinition</data>
</node>
<node id="count">
  <data key="d5">Variable</data>
</node>
<node id="type">
  <data key="d5">Variable</data>
</node>
<node id="ch">
  <data key="d5">Variable</data>
</node>
<node id="j">
  <data key="d5">Variable</data>
</node>
<node id="w">
  <data key="d5">Variable</data>
</node>
<node id="min">
  <data key="d5">Variable</data>
</node>
<node id="str_type">
  <data key="d5">Variable</data>
</node>
<node id="R_NEW0">
  <data key="d5">FunctionCall</data>
</node>
<node id="calloc">
  <data key="d5">FunctionCall</data>
</node>
<node id="free">
  <data key="d5">FunctionCall</data>
</node>
<node id="sizeof">
  <data key="d5">FunctionCall</data>
</node>
<node id="eprintf">
  <data key="d5">FunctionCall</data>
</node>
<node id="r_list_append">
  <data key="d5">FunctionCall</data>
</node>
<node id="r_buf_read_at">
  <data key="d5">FunctionCall</data>
</node>
<node id="r_str_ndup">
  <data key="d5">FunctionCall</data>
</node>
<node id="r_bin_string_free">
  <data key="d5">FunctionCall</data>
</node>
<node id="r_utf8_decode">
  <data key="d5">FunctionCall</data>
</node>
<node id="print_string">
  <data key="d5">FunctionCall</data>
</node>
<node id="r_utf16le_decode">
  <data key="d5">FunctionCall</data>
</node>
<node id="r_utf8_encode">
  <data key="d5">FunctionCall</data>
</node>
<node id="r_utf32le_decode">
  <data key="d5">FunctionCall</data>
</node>
<node id="if_0">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">type == -1</data>
</node>
<node id="if_1">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">from &gt;= to</data>
</node>
<node id="if_2">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">!buf || !min</data>
</node>
<node id="if_3">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">!rc</data>
</node>
<node id="if_4">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">type == R_STRING_TYPE_DETECT</data>
</node>
<node id="if_5">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">(to - needle</data>
</node>
<node id="if_6">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">is_wide32</data>
</node>
<node id="if_7">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">str_type == R_STRING_TYPE_WIDE32</data>
</node>
<node id="if_8">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">rc</data>
</node>
<node id="if_9">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">str_type == R_STRING_TYPE_WIDE</data>
</node>
<node id="if_10">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">rc == 1</data>
</node>
<node id="if_11">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">rc &gt; 1</data>
</node>
<node id="if_12">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">!rc</data>
</node>
<node id="if_13">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">r_isprint (r</data>
</node>
<node id="if_14">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">str_type == R_STRING_TYPE_WIDE32</data>
</node>
<node id="if_15">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">r == 0xff</data>
</node>
<node id="if_16">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">r &amp;&amp; r &lt; 0x100 &amp;&amp; strchr ("\b\v\f\n\r\t\a\033\\", (char</data>
</node>
<node id="if_17">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">(i + 32</data>
</node>
<node id="if_18">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">runes &gt;= min</data>
</node>
<node id="if_19">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">str_type == R_STRING_TYPE_ASCII</data>
</node>
<node id="if_20">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">ch != '\n' &amp;&amp; ch != '\r' &amp;&amp; ch != '\t'</data>
</node>
<node id="if_21">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">!IS_PRINTABLE (tmp[j]</data>
</node>
<node id="if_22">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">!bs</data>
</node>
<node id="if_23">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">str_start -from&gt; 1</data>
</node>
<node id="if_24">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">p[0] == 0xff &amp;&amp; p[1] == 0xfe</data>
</node>
<node id="if_25">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">str_start -from&gt; 3</data>
</node>
<node id="if_26">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">p[0] == 0xff &amp;&amp; p[1] == 0xfe</data>
</node>
<node id="if_27">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">list</data>
</node>
<node id="for_28">
  <data key="d5">ControlStructure_for</data>
  <data key="d6">rc = i = 0; i &lt; sizeof (tmp</data>
</node>
<node id="for_29">
  <data key="d5">ControlStructure_for</data>
  <data key="d6">j = 0; j &lt; i; j++</data>
</node>
<node id="while_30">
  <data key="d5">ControlStructure_while</data>
  <data key="d6">needle &lt; to</data>
</node>
<node id="switch_31">
  <data key="d5">ControlStructure_switch</data>
  <data key="d6">str_type</data>
</node>
<edge source="string_scan_range" target="count">
  <data key="d7">declares</data>
</edge>
<edge source="string_scan_range" target="type">
  <data key="d7">declares</data>
</edge>
<edge source="string_scan_range" target="ch">
  <data key="d7">declares</data>
</edge>
<edge source="string_scan_range" target="j">
  <data key="d7">declares</data>
</edge>
<edge source="string_scan_range" target="w">
  <data key="d7">declares</data>
</edge>
<edge source="string_scan_range" target="min">
  <data key="d7">declares</data>
</edge>
<edge source="string_scan_range" target="str_type">
  <data key="d7">declares</data>
</edge>
<edge source="string_scan_range" target="R_NEW0">
  <data key="d7">calls</data>
</edge>
<edge source="string_scan_range" target="calloc">
  <data key="d7">calls</data>
</edge>
<edge source="string_scan_range" target="free">
  <data key="d7">calls</data>
</edge>
<edge source="string_scan_range" target="sizeof">
  <data key="d7">calls</data>
</edge>
<edge source="string_scan_range" target="eprintf">
  <data key="d7">calls</data>
</edge>
<edge source="string_scan_range" target="r_list_append">
  <data key="d7">calls</data>
</edge>
<edge source="string_scan_range" target="r_buf_read_at">
  <data key="d7">calls</data>
</edge>
<edge source="string_scan_range" target="r_str_ndup">
  <data key="d7">calls</data>
</edge>
<edge source="string_scan_range" target="r_bin_string_free">
  <data key="d7">calls</data>
</edge>
<edge source="string_scan_range" target="r_utf8_decode">
  <data key="d7">calls</data>
</edge>
<edge source="string_scan_range" target="print_string">
  <data key="d7">calls</data>
</edge>
<edge source="string_scan_range" target="r_utf16le_decode">
  <data key="d7">calls</data>
</edge>
<edge source="string_scan_range" target="r_utf8_encode">
  <data key="d7">calls</data>
</edge>
<edge source="string_scan_range" target="r_utf32le_decode">
  <data key="d7">calls</data>
</edge>
<edge source="string_scan_range" target="if_0">
  <data key="d7">contains</data>
</edge>
<edge source="string_scan_range" target="if_1">
  <data key="d7">contains</data>
</edge>
<edge source="string_scan_range" target="if_2">
  <data key="d7">contains</data>
</edge>
<edge source="string_scan_range" target="if_3">
  <data key="d7">contains</data>
</edge>
<edge source="string_scan_range" target="if_4">
  <data key="d7">contains</data>
</edge>
<edge source="string_scan_range" target="if_5">
  <data key="d7">contains</data>
</edge>
<edge source="string_scan_range" target="if_6">
  <data key="d7">contains</data>
</edge>
<edge source="string_scan_range" target="if_7">
  <data key="d7">contains</data>
</edge>
<edge source="string_scan_range" target="if_8">
  <data key="d7">contains</data>
</edge>
<edge source="string_scan_range" target="if_9">
  <data key="d7">contains</data>
</edge>
<edge source="string_scan_range" target="if_10">
  <data key="d7">contains</data>
</edge>
<edge source="string_scan_range" target="if_11">
  <data key="d7">contains</data>
</edge>
<edge source="string_scan_range" target="if_12">
  <data key="d7">contains</data>
</edge>
<edge source="string_scan_range" target="if_13">
  <data key="d7">contains</data>
</edge>
<edge source="string_scan_range" target="if_14">
  <data key="d7">contains</data>
</edge>
<edge source="string_scan_range" target="if_15">
  <data key="d7">contains</data>
</edge>
<edge source="string_scan_range" target="if_16">
  <data key="d7">contains</data>
</edge>
<edge source="string_scan_range" target="if_17">
  <data key="d7">contains</data>
</edge>
<edge source="string_scan_range" target="if_18">
  <data key="d7">contains</data>
</edge>
<edge source="string_scan_range" target="if_19">
  <data key="d7">contains</data>
</edge>
<edge source="string_scan_range" target="if_20">
  <data key="d7">contains</data>
</edge>
<edge source="string_scan_range" target="if_21">
  <data key="d7">contains</data>
</edge>
<edge source="string_scan_range" target="if_22">
  <data key="d7">contains</data>
</edge>
<edge source="string_scan_range" target="if_23">
  <data key="d7">contains</data>
</edge>
<edge source="string_scan_range" target="if_24">
  <data key="d7">contains</data>
</edge>
<edge source="string_scan_range" target="if_25">
  <data key="d7">contains</data>
</edge>
<edge source="string_scan_range" target="if_26">
  <data key="d7">contains</data>
</edge>
<edge source="string_scan_range" target="if_27">
  <data key="d7">contains</data>
</edge>
<edge source="string_scan_range" target="for_28">
  <data key="d7">contains</data>
</edge>
<edge source="string_scan_range" target="for_29">
  <data key="d7">contains</data>
</edge>
<edge source="string_scan_range" target="while_30">
  <data key="d7">contains</data>
</edge>
<edge source="string_scan_range" target="switch_31">
  <data key="d7">contains</data>
</edge>
<edge source="count" target="if_18">
  <data key="d7">used_in_body</data>
</edge>
<edge source="count" target="while_30">
  <data key="d7">used_in_body</data>
</edge>
<edge source="type" target="if_0">
  <data key="d7">used_in_body</data>
</edge>
<edge source="type" target="if_4">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="type" target="if_7">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="type" target="if_9">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="type" target="if_14">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="type" target="if_19">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="type" target="switch_31">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="type" target="string_scan_range">
  <data key="d7">used_as_parameter</data>
</edge>
<edge source="type" target="if_18">
  <data key="d7">used_in_body</data>
</edge>
<edge source="type" target="while_30">
  <data key="d7">used_in_body</data>
</edge>
<edge source="ch" target="if_16">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="ch" target="if_20">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="ch" target="r_str_ndup">
  <data key="d7">used_as_parameter</data>
</edge>
<edge source="ch" target="if_18">
  <data key="d7">used_in_body</data>
</edge>
<edge source="ch" target="if_19">
  <data key="d7">used_in_body</data>
</edge>
<edge source="ch" target="for_29">
  <data key="d7">used_in_body</data>
</edge>
<edge source="ch" target="while_30">
  <data key="d7">used_in_body</data>
</edge>
<edge source="j" target="if_21">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="j" target="for_29">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="w" target="if_6">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="min" target="if_2">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="min" target="if_18">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="min" target="string_scan_range">
  <data key="d7">used_as_parameter</data>
</edge>
<edge source="min" target="while_30">
  <data key="d7">used_in_body</data>
</edge>
<edge source="str_type" target="if_7">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="str_type" target="if_9">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="str_type" target="if_14">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="str_type" target="if_19">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="str_type" target="switch_31">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="str_type" target="if_4">
  <data key="d7">used_in_body</data>
</edge>
<edge source="str_type" target="if_5">
  <data key="d7">used_in_body</data>
</edge>
<edge source="str_type" target="if_6">
  <data key="d7">used_in_body</data>
</edge>
<edge source="str_type" target="if_11">
  <data key="d7">used_in_body</data>
</edge>
<edge source="str_type" target="if_13">
  <data key="d7">used_in_body</data>
</edge>
<edge source="str_type" target="if_18">
  <data key="d7">used_in_body</data>
</edge>
<edge source="str_type" target="for_28">
  <data key="d7">used_in_body</data>
</edge>
<edge source="str_type" target="while_30">
  <data key="d7">used_in_body</data>
</edge>
</graph></graphml>