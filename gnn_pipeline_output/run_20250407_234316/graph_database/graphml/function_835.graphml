<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"><key id="d6" for="edge" attr.name="type" attr.type="string"/>
<key id="d5" for="node" attr.name="condition" attr.type="string"/>
<key id="d4" for="node" attr.name="type" attr.type="string"/>
<key id="d3" for="graph" attr.name="severity" attr.type="string"/>
<key id="d2" for="graph" attr.name="cvss" attr.type="string"/>
<key id="d1" for="graph" attr.name="cve" attr.type="string"/>
<key id="d0" for="graph" attr.name="pointer_arithmetic" attr.type="boolean"/>
<graph edgedefault="directed"><data key="d0">True</data>
<data key="d1">CVE-2017-15033</data>
<data key="d2">5.0</data>
<data key="d3">MEDIUM</data>
<node id="ReadYUVImage">
  <data key="d4">FunctionDefinition</data>
</node>
<node id="scanline">
  <data key="d4">Variable</data>
</node>
<node id="x">
  <data key="d4">Variable</data>
</node>
<node id="p">
  <data key="d4">Variable</data>
</node>
<node id="CloseBlob">
  <data key="d4">FunctionCall</data>
</node>
<node id="RelinquishMagickMemory">
  <data key="d4">FunctionCall</data>
</node>
<node id="SetImageExtent">
  <data key="d4">FunctionCall</data>
</node>
<node id="GetAuthenticPixels">
  <data key="d4">FunctionCall</data>
</node>
<node id="AcquireQuantumMemory">
  <data key="d4">FunctionCall</data>
</node>
<node id="ReadBlob">
  <data key="d4">FunctionCall</data>
</node>
<node id="DestroyImage">
  <data key="d4">FunctionCall</data>
</node>
<node id="AcquireNextImage">
  <data key="d4">FunctionCall</data>
</node>
<node id="assert">
  <data key="d4">FunctionCall</data>
</node>
<node id="QueueAuthenticPixels">
  <data key="d4">FunctionCall</data>
</node>
<node id="ThrowFileException">
  <data key="d4">FunctionCall</data>
</node>
<node id="SetPixelGreen">
  <data key="d4">FunctionCall</data>
</node>
<node id="ResizeImage">
  <data key="d4">FunctionCall</data>
</node>
<node id="AppendImageFormat">
  <data key="d4">FunctionCall</data>
</node>
<node id="GetVirtualPixels">
  <data key="d4">FunctionCall</data>
</node>
<node id="SetImageProgress">
  <data key="d4">FunctionCall</data>
</node>
<node id="GetPixelChannels">
  <data key="d4">FunctionCall</data>
</node>
<node id="CloneImage">
  <data key="d4">FunctionCall</data>
</node>
<node id="SetPixelRed">
  <data key="d4">FunctionCall</data>
</node>
<node id="SetPixelBlue">
  <data key="d4">FunctionCall</data>
</node>
<node id="AcquireImage">
  <data key="d4">FunctionCall</data>
</node>
<node id="OpenBlob">
  <data key="d4">FunctionCall</data>
</node>
<node id="ParseGeometry">
  <data key="d4">FunctionCall</data>
</node>
<node id="SyncNextImageInList">
  <data key="d4">FunctionCall</data>
</node>
<node id="DestroyImageList">
  <data key="d4">FunctionCall</data>
</node>
<node id="if_0">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">image_info-&gt;debug != MagickFalse</data>
</node>
<node id="if_1">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">(image-&gt;columns == 0</data>
</node>
<node id="if_2">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">status == MagickFalse</data>
</node>
<node id="if_3">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">image_info-&gt;sampling_factor != (char *</data>
</node>
<node id="if_4">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">(flags &amp; SigmaValue</data>
</node>
<node id="if_5">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">(horizontal_factor != 1</data>
</node>
<node id="if_6">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">(interlace == UndefinedInterlace</data>
</node>
<node id="if_7">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">vertical_factor == 2</data>
</node>
<node id="if_8">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">interlace != PartitionInterlace</data>
</node>
<node id="if_9">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">status == MagickFalse</data>
</node>
<node id="if_10">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">DiscardBlobBytes(image,(MagickSizeType</data>
</node>
<node id="if_11">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">interlace == NoInterlace</data>
</node>
<node id="if_12">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">scanline == (unsigned char *</data>
</node>
<node id="if_13">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">chroma_image == (Image *</data>
</node>
<node id="if_14">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">(image_info-&gt;ping != MagickFalse</data>
</node>
<node id="if_15">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">image-&gt;scene &gt;= (image_info-&gt;scene+image_info-&gt;number_scenes-1</data>
</node>
<node id="if_16">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">status == MagickFalse</data>
</node>
<node id="if_17">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">interlace == PartitionInterlace</data>
</node>
<node id="if_18">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">status == MagickFalse</data>
</node>
<node id="if_19">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">interlace == NoInterlace</data>
</node>
<node id="if_20">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">(y &gt; 0</data>
</node>
<node id="if_21">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">count != (ssize_t</data>
</node>
<node id="if_22">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">q == (Quantum *</data>
</node>
<node id="if_23">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">chroma_pixels == (Quantum *</data>
</node>
<node id="if_24">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">quantum == 1</data>
</node>
<node id="if_25">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">quantum == 1</data>
</node>
<node id="if_26">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">quantum == 1</data>
</node>
<node id="if_27">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">quantum == 1</data>
</node>
<node id="if_28">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">(y &gt; 0</data>
</node>
<node id="if_29">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">count != (ssize_t</data>
</node>
<node id="if_30">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">q == (Quantum *</data>
</node>
<node id="if_31">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">quantum == 1</data>
</node>
<node id="if_32">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">SyncAuthenticPixels(image,exception</data>
</node>
<node id="if_33">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">interlace == NoInterlace</data>
</node>
<node id="if_34">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">SyncAuthenticPixels(chroma_image,exception</data>
</node>
<node id="if_35">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">image-&gt;previous == (Image *</data>
</node>
<node id="if_36">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">status == MagickFalse</data>
</node>
<node id="if_37">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">interlace == PartitionInterlace</data>
</node>
<node id="if_38">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">status == MagickFalse</data>
</node>
<node id="if_39">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">interlace != NoInterlace</data>
</node>
<node id="if_40">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">count != (ssize_t</data>
</node>
<node id="if_41">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">q == (Quantum *</data>
</node>
<node id="if_42">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">quantum == 1</data>
</node>
<node id="if_43">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">SyncAuthenticPixels(chroma_image,exception</data>
</node>
<node id="if_44">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">interlace == PartitionInterlace</data>
</node>
<node id="if_45">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">status == MagickFalse</data>
</node>
<node id="if_46">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">count != (ssize_t</data>
</node>
<node id="if_47">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">q == (Quantum *</data>
</node>
<node id="if_48">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">quantum == 1</data>
</node>
<node id="if_49">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">SyncAuthenticPixels(chroma_image,exception</data>
</node>
<node id="if_50">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">resize_image == (Image *</data>
</node>
<node id="if_51">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">(q == (Quantum *</data>
</node>
<node id="if_52">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">SyncAuthenticPixels(image,exception</data>
</node>
<node id="if_53">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">SetImageColorspace(image,YCbCrColorspace,exception</data>
</node>
<node id="if_54">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">interlace == PartitionInterlace</data>
</node>
<node id="if_55">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">EOFBlob(image</data>
</node>
<node id="if_56">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">image_info-&gt;number_scenes != 0</data>
</node>
<node id="if_57">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">image-&gt;scene &gt;= (image_info-&gt;scene+image_info-&gt;number_scenes-1</data>
</node>
<node id="if_58">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">interlace == NoInterlace</data>
</node>
<node id="if_59">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">count != 0</data>
</node>
<node id="if_60">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">GetNextImageInList(image</data>
</node>
<node id="if_61">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">status == MagickFalse</data>
</node>
<node id="if_62">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">status == MagickFalse</data>
</node>
<node id="for_63">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">y=0; y &lt; (ssize_t</data>
</node>
<node id="for_64">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">x=0; x &lt; (ssize_t</data>
</node>
<node id="for_65">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">x=0; x &lt; (ssize_t</data>
</node>
<node id="for_66">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">y=0; y &lt; (ssize_t</data>
</node>
<node id="for_67">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">x=0; x &lt; (ssize_t</data>
</node>
<node id="for_68">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">y=0; y &lt; (ssize_t</data>
</node>
<node id="for_69">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">x=0; x &lt; (ssize_t</data>
</node>
<node id="for_70">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">y=0; y &lt; (ssize_t</data>
</node>
<node id="for_71">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">x=0; x &lt; (ssize_t</data>
</node>
<node id="while_72">
  <data key="d4">ControlStructure_while</data>
  <data key="d5">count != 0</data>
</node>
<edge source="ReadYUVImage" target="scanline">
  <data key="d6">declares</data>
</edge>
<edge source="ReadYUVImage" target="x">
  <data key="d6">declares</data>
</edge>
<edge source="ReadYUVImage" target="p">
  <data key="d6">declares</data>
</edge>
<edge source="ReadYUVImage" target="CloseBlob">
  <data key="d6">calls</data>
</edge>
<edge source="ReadYUVImage" target="RelinquishMagickMemory">
  <data key="d6">calls</data>
</edge>
<edge source="ReadYUVImage" target="SetImageExtent">
  <data key="d6">calls</data>
</edge>
<edge source="ReadYUVImage" target="GetAuthenticPixels">
  <data key="d6">calls</data>
</edge>
<edge source="ReadYUVImage" target="AcquireQuantumMemory">
  <data key="d6">calls</data>
</edge>
<edge source="ReadYUVImage" target="ReadBlob">
  <data key="d6">calls</data>
</edge>
<edge source="ReadYUVImage" target="DestroyImage">
  <data key="d6">calls</data>
</edge>
<edge source="ReadYUVImage" target="AcquireNextImage">
  <data key="d6">calls</data>
</edge>
<edge source="ReadYUVImage" target="assert">
  <data key="d6">calls</data>
</edge>
<edge source="ReadYUVImage" target="QueueAuthenticPixels">
  <data key="d6">calls</data>
</edge>
<edge source="ReadYUVImage" target="ThrowFileException">
  <data key="d6">calls</data>
</edge>
<edge source="ReadYUVImage" target="SetPixelGreen">
  <data key="d6">calls</data>
</edge>
<edge source="ReadYUVImage" target="ResizeImage">
  <data key="d6">calls</data>
</edge>
<edge source="ReadYUVImage" target="AppendImageFormat">
  <data key="d6">calls</data>
</edge>
<edge source="ReadYUVImage" target="GetVirtualPixels">
  <data key="d6">calls</data>
</edge>
<edge source="ReadYUVImage" target="SetImageProgress">
  <data key="d6">calls</data>
</edge>
<edge source="ReadYUVImage" target="GetPixelChannels">
  <data key="d6">calls</data>
</edge>
<edge source="ReadYUVImage" target="CloneImage">
  <data key="d6">calls</data>
</edge>
<edge source="ReadYUVImage" target="SetPixelRed">
  <data key="d6">calls</data>
</edge>
<edge source="ReadYUVImage" target="SetPixelBlue">
  <data key="d6">calls</data>
</edge>
<edge source="ReadYUVImage" target="AcquireImage">
  <data key="d6">calls</data>
</edge>
<edge source="ReadYUVImage" target="OpenBlob">
  <data key="d6">calls</data>
</edge>
<edge source="ReadYUVImage" target="ParseGeometry">
  <data key="d6">calls</data>
</edge>
<edge source="ReadYUVImage" target="SyncNextImageInList">
  <data key="d6">calls</data>
</edge>
<edge source="ReadYUVImage" target="DestroyImageList">
  <data key="d6">calls</data>
</edge>
<edge source="ReadYUVImage" target="if_0">
  <data key="d6">contains</data>
</edge>
<edge source="ReadYUVImage" target="if_1">
  <data key="d6">contains</data>
</edge>
<edge source="ReadYUVImage" target="if_2">
  <data key="d6">contains</data>
</edge>
<edge source="ReadYUVImage" target="if_3">
  <data key="d6">contains</data>
</edge>
<edge source="ReadYUVImage" target="if_4">
  <data key="d6">contains</data>
</edge>
<edge source="ReadYUVImage" target="if_5">
  <data key="d6">contains</data>
</edge>
<edge source="ReadYUVImage" target="if_6">
  <data key="d6">contains</data>
</edge>
<edge source="ReadYUVImage" target="if_7">
  <data key="d6">contains</data>
</edge>
<edge source="ReadYUVImage" target="if_8">
  <data key="d6">contains</data>
</edge>
<edge source="ReadYUVImage" target="if_9">
  <data key="d6">contains</data>
</edge>
<edge source="ReadYUVImage" target="if_10">
  <data key="d6">contains</data>
</edge>
<edge source="ReadYUVImage" target="if_11">
  <data key="d6">contains</data>
</edge>
<edge source="ReadYUVImage" target="if_12">
  <data key="d6">contains</data>
</edge>
<edge source="ReadYUVImage" target="if_13">
  <data key="d6">contains</data>
</edge>
<edge source="ReadYUVImage" target="if_14">
  <data key="d6">contains</data>
</edge>
<edge source="ReadYUVImage" target="if_15">
  <data key="d6">contains</data>
</edge>
<edge source="ReadYUVImage" target="if_16">
  <data key="d6">contains</data>
</edge>
<edge source="ReadYUVImage" target="if_17">
  <data key="d6">contains</data>
</edge>
<edge source="ReadYUVImage" target="if_18">
  <data key="d6">contains</data>
</edge>
<edge source="ReadYUVImage" target="if_19">
  <data key="d6">contains</data>
</edge>
<edge source="ReadYUVImage" target="if_20">
  <data key="d6">contains</data>
</edge>
<edge source="ReadYUVImage" target="if_21">
  <data key="d6">contains</data>
</edge>
<edge source="ReadYUVImage" target="if_22">
  <data key="d6">contains</data>
</edge>
<edge source="ReadYUVImage" target="if_23">
  <data key="d6">contains</data>
</edge>
<edge source="ReadYUVImage" target="if_24">
  <data key="d6">contains</data>
</edge>
<edge source="ReadYUVImage" target="if_25">
  <data key="d6">contains</data>
</edge>
<edge source="ReadYUVImage" target="if_26">
  <data key="d6">contains</data>
</edge>
<edge source="ReadYUVImage" target="if_27">
  <data key="d6">contains</data>
</edge>
<edge source="ReadYUVImage" target="if_28">
  <data key="d6">contains</data>
</edge>
<edge source="ReadYUVImage" target="if_29">
  <data key="d6">contains</data>
</edge>
<edge source="ReadYUVImage" target="if_30">
  <data key="d6">contains</data>
</edge>
<edge source="ReadYUVImage" target="if_31">
  <data key="d6">contains</data>
</edge>
<edge source="ReadYUVImage" target="if_32">
  <data key="d6">contains</data>
</edge>
<edge source="ReadYUVImage" target="if_33">
  <data key="d6">contains</data>
</edge>
<edge source="ReadYUVImage" target="if_34">
  <data key="d6">contains</data>
</edge>
<edge source="ReadYUVImage" target="if_35">
  <data key="d6">contains</data>
</edge>
<edge source="ReadYUVImage" target="if_36">
  <data key="d6">contains</data>
</edge>
<edge source="ReadYUVImage" target="if_37">
  <data key="d6">contains</data>
</edge>
<edge source="ReadYUVImage" target="if_38">
  <data key="d6">contains</data>
</edge>
<edge source="ReadYUVImage" target="if_39">
  <data key="d6">contains</data>
</edge>
<edge source="ReadYUVImage" target="if_40">
  <data key="d6">contains</data>
</edge>
<edge source="ReadYUVImage" target="if_41">
  <data key="d6">contains</data>
</edge>
<edge source="ReadYUVImage" target="if_42">
  <data key="d6">contains</data>
</edge>
<edge source="ReadYUVImage" target="if_43">
  <data key="d6">contains</data>
</edge>
<edge source="ReadYUVImage" target="if_44">
  <data key="d6">contains</data>
</edge>
<edge source="ReadYUVImage" target="if_45">
  <data key="d6">contains</data>
</edge>
<edge source="ReadYUVImage" target="if_46">
  <data key="d6">contains</data>
</edge>
<edge source="ReadYUVImage" target="if_47">
  <data key="d6">contains</data>
</edge>
<edge source="ReadYUVImage" target="if_48">
  <data key="d6">contains</data>
</edge>
<edge source="ReadYUVImage" target="if_49">
  <data key="d6">contains</data>
</edge>
<edge source="ReadYUVImage" target="if_50">
  <data key="d6">contains</data>
</edge>
<edge source="ReadYUVImage" target="if_51">
  <data key="d6">contains</data>
</edge>
<edge source="ReadYUVImage" target="if_52">
  <data key="d6">contains</data>
</edge>
<edge source="ReadYUVImage" target="if_53">
  <data key="d6">contains</data>
</edge>
<edge source="ReadYUVImage" target="if_54">
  <data key="d6">contains</data>
</edge>
<edge source="ReadYUVImage" target="if_55">
  <data key="d6">contains</data>
</edge>
<edge source="ReadYUVImage" target="if_56">
  <data key="d6">contains</data>
</edge>
<edge source="ReadYUVImage" target="if_57">
  <data key="d6">contains</data>
</edge>
<edge source="ReadYUVImage" target="if_58">
  <data key="d6">contains</data>
</edge>
<edge source="ReadYUVImage" target="if_59">
  <data key="d6">contains</data>
</edge>
<edge source="ReadYUVImage" target="if_60">
  <data key="d6">contains</data>
</edge>
<edge source="ReadYUVImage" target="if_61">
  <data key="d6">contains</data>
</edge>
<edge source="ReadYUVImage" target="if_62">
  <data key="d6">contains</data>
</edge>
<edge source="ReadYUVImage" target="for_63">
  <data key="d6">contains</data>
</edge>
<edge source="ReadYUVImage" target="for_64">
  <data key="d6">contains</data>
</edge>
<edge source="ReadYUVImage" target="for_65">
  <data key="d6">contains</data>
</edge>
<edge source="ReadYUVImage" target="for_66">
  <data key="d6">contains</data>
</edge>
<edge source="ReadYUVImage" target="for_67">
  <data key="d6">contains</data>
</edge>
<edge source="ReadYUVImage" target="for_68">
  <data key="d6">contains</data>
</edge>
<edge source="ReadYUVImage" target="for_69">
  <data key="d6">contains</data>
</edge>
<edge source="ReadYUVImage" target="for_70">
  <data key="d6">contains</data>
</edge>
<edge source="ReadYUVImage" target="for_71">
  <data key="d6">contains</data>
</edge>
<edge source="ReadYUVImage" target="while_72">
  <data key="d6">contains</data>
</edge>
<edge source="scanline" target="if_12">
  <data key="d6">used_in_body</data>
</edge>
<edge source="scanline" target="RelinquishMagickMemory">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="scanline" target="ReadBlob">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="scanline" target="if_10">
  <data key="d6">used_in_body</data>
</edge>
<edge source="scanline" target="if_11">
  <data key="d6">used_in_body</data>
</edge>
<edge source="scanline" target="if_19">
  <data key="d6">used_in_body</data>
</edge>
<edge source="scanline" target="if_20">
  <data key="d6">used_in_body</data>
</edge>
<edge source="scanline" target="if_28">
  <data key="d6">used_in_body</data>
</edge>
<edge source="scanline" target="if_39">
  <data key="d6">used_in_body</data>
</edge>
<edge source="scanline" target="for_63">
  <data key="d6">used_in_body</data>
</edge>
<edge source="scanline" target="for_66">
  <data key="d6">used_in_body</data>
</edge>
<edge source="scanline" target="for_68">
  <data key="d6">used_in_body</data>
</edge>
<edge source="x" target="if_23">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="x" target="if_32">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="x" target="if_34">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="x" target="if_43">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="x" target="if_49">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="x" target="if_52">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="x" target="if_53">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="x" target="if_60">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="x" target="for_64">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="x" target="for_65">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="x" target="for_67">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="x" target="for_69">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="x" target="for_71">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="p" target="if_3">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="p" target="if_10">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="p" target="if_14">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="p" target="if_23">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="p" target="if_32">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="p" target="if_34">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="p" target="if_35">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="p" target="if_43">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="p" target="if_49">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="p" target="if_52">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="p" target="if_53">
  <data key="d6">used_in_condition</data>
</edge>
</graph></graphml>