<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"><key id="d6" for="edge" attr.name="type" attr.type="string"/>
<key id="d5" for="node" attr.name="condition" attr.type="string"/>
<key id="d4" for="node" attr.name="type" attr.type="string"/>
<key id="d3" for="graph" attr.name="severity" attr.type="string"/>
<key id="d2" for="graph" attr.name="cvss" attr.type="string"/>
<key id="d1" for="graph" attr.name="cve" attr.type="string"/>
<key id="d0" for="graph" attr.name="pointer_arithmetic" attr.type="boolean"/>
<graph edgedefault="directed"><data key="d0">True</data>
<data key="d1">CVE-2010-1152</data>
<data key="d2">5.0</data>
<data key="d3">MEDIUM</data>
<node id="try_read_command">
  <data key="d4">FunctionDefinition</data>
</node>
<node id="ii">
  <data key="d4">Variable</data>
</node>
<node id="ptr">
  <data key="d4">Variable</data>
</node>
<node id="dispatch_bin_command">
  <data key="d4">FunctionCall</data>
</node>
<node id="memchr">
  <data key="d4">FunctionCall</data>
</node>
<node id="out_string">
  <data key="d4">FunctionCall</data>
</node>
<node id="conn_set_state">
  <data key="d4">FunctionCall</data>
</node>
<node id="sizeof">
  <data key="d4">FunctionCall</data>
</node>
<node id="ntohl">
  <data key="d4">FunctionCall</data>
</node>
<node id="ntohll">
  <data key="d4">FunctionCall</data>
</node>
<node id="process_command">
  <data key="d4">FunctionCall</data>
</node>
<node id="fprintf">
  <data key="d4">FunctionCall</data>
</node>
<node id="memmove">
  <data key="d4">FunctionCall</data>
</node>
<node id="assert">
  <data key="d4">FunctionCall</data>
</node>
<node id="ntohs">
  <data key="d4">FunctionCall</data>
</node>
<node id="if_0">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">c-&gt;protocol == negotiating_prot || c-&gt;transport == udp_transport</data>
</node>
<node id="if_1">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">(unsigned char</data>
</node>
<node id="if_2">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">settings.verbose &gt; 1</data>
</node>
<node id="if_3">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">c-&gt;protocol == binary_prot</data>
</node>
<node id="if_4">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">c-&gt;rbytes &lt; sizeof(c-&gt;binary_header</data>
</node>
<node id="if_5">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">((long</data>
</node>
<node id="if_6">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">settings.verbose &gt; 1</data>
</node>
<node id="if_7">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">settings.verbose &gt; 1</data>
</node>
<node id="if_8">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">ii % 4 == 0</data>
</node>
<node id="if_9">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">c-&gt;binary_header.request.magic != PROTOCOL_BINARY_REQ</data>
</node>
<node id="if_10">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">settings.verbose</data>
</node>
<node id="if_11">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">add_msghdr(c</data>
</node>
<node id="if_12">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">c-&gt;rbytes == 0</data>
</node>
<node id="if_13">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!el</data>
</node>
<node id="if_14">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">c-&gt;rbytes &gt; 1024</data>
</node>
<node id="if_15">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">strcmp(ptr, "get "</data>
</node>
<node id="if_16">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">(el - c-&gt;rcurr</data>
</node>
<node id="for_17">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">ii = 0; ii &lt; sizeof(req-&gt;bytes</data>
</node>
<node id="while_18">
  <data key="d4">ControlStructure_while</data>
  <data key="d5">*ptr == ' '</data>
</node>
<edge source="try_read_command" target="ii">
  <data key="d6">declares</data>
</edge>
<edge source="try_read_command" target="ptr">
  <data key="d6">declares</data>
</edge>
<edge source="try_read_command" target="dispatch_bin_command">
  <data key="d6">calls</data>
</edge>
<edge source="try_read_command" target="memchr">
  <data key="d6">calls</data>
</edge>
<edge source="try_read_command" target="out_string">
  <data key="d6">calls</data>
</edge>
<edge source="try_read_command" target="conn_set_state">
  <data key="d6">calls</data>
</edge>
<edge source="try_read_command" target="sizeof">
  <data key="d6">calls</data>
</edge>
<edge source="try_read_command" target="ntohl">
  <data key="d6">calls</data>
</edge>
<edge source="try_read_command" target="ntohll">
  <data key="d6">calls</data>
</edge>
<edge source="try_read_command" target="process_command">
  <data key="d6">calls</data>
</edge>
<edge source="try_read_command" target="fprintf">
  <data key="d6">calls</data>
</edge>
<edge source="try_read_command" target="memmove">
  <data key="d6">calls</data>
</edge>
<edge source="try_read_command" target="assert">
  <data key="d6">calls</data>
</edge>
<edge source="try_read_command" target="ntohs">
  <data key="d6">calls</data>
</edge>
<edge source="try_read_command" target="if_0">
  <data key="d6">contains</data>
</edge>
<edge source="try_read_command" target="if_1">
  <data key="d6">contains</data>
</edge>
<edge source="try_read_command" target="if_2">
  <data key="d6">contains</data>
</edge>
<edge source="try_read_command" target="if_3">
  <data key="d6">contains</data>
</edge>
<edge source="try_read_command" target="if_4">
  <data key="d6">contains</data>
</edge>
<edge source="try_read_command" target="if_5">
  <data key="d6">contains</data>
</edge>
<edge source="try_read_command" target="if_6">
  <data key="d6">contains</data>
</edge>
<edge source="try_read_command" target="if_7">
  <data key="d6">contains</data>
</edge>
<edge source="try_read_command" target="if_8">
  <data key="d6">contains</data>
</edge>
<edge source="try_read_command" target="if_9">
  <data key="d6">contains</data>
</edge>
<edge source="try_read_command" target="if_10">
  <data key="d6">contains</data>
</edge>
<edge source="try_read_command" target="if_11">
  <data key="d6">contains</data>
</edge>
<edge source="try_read_command" target="if_12">
  <data key="d6">contains</data>
</edge>
<edge source="try_read_command" target="if_13">
  <data key="d6">contains</data>
</edge>
<edge source="try_read_command" target="if_14">
  <data key="d6">contains</data>
</edge>
<edge source="try_read_command" target="if_15">
  <data key="d6">contains</data>
</edge>
<edge source="try_read_command" target="if_16">
  <data key="d6">contains</data>
</edge>
<edge source="try_read_command" target="for_17">
  <data key="d6">contains</data>
</edge>
<edge source="try_read_command" target="while_18">
  <data key="d6">contains</data>
</edge>
<edge source="ii" target="if_8">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="ii" target="for_17">
  <data key="d6">used_in_body</data>
</edge>
<edge source="ii" target="fprintf">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="ii" target="if_3">
  <data key="d6">used_in_body</data>
</edge>
<edge source="ii" target="if_7">
  <data key="d6">used_in_body</data>
</edge>
<edge source="ptr" target="if_15">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="ptr" target="while_18">
  <data key="d6">used_in_body</data>
</edge>
<edge source="ptr" target="if_12">
  <data key="d6">used_in_body</data>
</edge>
<edge source="ptr" target="if_13">
  <data key="d6">used_in_body</data>
</edge>
<edge source="ptr" target="if_14">
  <data key="d6">used_in_body</data>
</edge>
</graph></graphml>