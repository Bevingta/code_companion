<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"><key id="d7" for="edge" attr.name="type" attr.type="string"/>
<key id="d6" for="node" attr.name="condition" attr.type="string"/>
<key id="d5" for="node" attr.name="type" attr.type="string"/>
<key id="d4" for="graph" attr.name="severity" attr.type="string"/>
<key id="d3" for="graph" attr.name="cvss" attr.type="string"/>
<key id="d2" for="graph" attr.name="cve" attr.type="string"/>
<key id="d1" for="graph" attr.name="pointer_arithmetic" attr.type="boolean"/>
<key id="d0" for="graph" attr.name="potential_buffer_overflow" attr.type="boolean"/>
<graph edgedefault="directed"><data key="d0">True</data>
<data key="d1">True</data>
<data key="d2">CVE-2019-13391</data>
<data key="d3">6.8</data>
<data key="d4">MEDIUM</data>
<node id="ComplexImages">
  <data key="d5">FunctionDefinition</data>
</node>
<node id="snr">
  <data key="d5">Variable</data>
</node>
<node id="y">
  <data key="d5">Variable</data>
</node>
<node id="artifact">
  <data key="d5">Variable</data>
</node>
<node id="x">
  <data key="d5">Variable</data>
</node>
<node id="gamma">
  <data key="d5">Variable</data>
</node>
<node id="i">
  <data key="d5">Variable</data>
</node>
<node id="NewImageList">
  <data key="d5">FunctionCall</data>
</node>
<node id="defined">
  <data key="d5">FunctionCall</data>
</node>
<node id="sqrt">
  <data key="d5">FunctionCall</data>
</node>
<node id="assert">
  <data key="d5">FunctionCall</data>
</node>
<node id="sin">
  <data key="d5">FunctionCall</data>
</node>
<node id="atan2">
  <data key="d5">FunctionCall</data>
</node>
<node id="AcquireAuthenticCacheView">
  <data key="d5">FunctionCall</data>
</node>
<node id="ThrowMagickException">
  <data key="d5">FunctionCall</data>
</node>
<node id="SetImageProgress">
  <data key="d5">FunctionCall</data>
</node>
<node id="AppendImageToList">
  <data key="d5">FunctionCall</data>
</node>
<node id="GetImageArtifact">
  <data key="d5">FunctionCall</data>
</node>
<node id="GetPixelChannels">
  <data key="d5">FunctionCall</data>
</node>
<node id="cos">
  <data key="d5">FunctionCall</data>
</node>
<node id="DestroyCacheView">
  <data key="d5">FunctionCall</data>
</node>
<node id="CloneImage">
  <data key="d5">FunctionCall</data>
</node>
<node id="AcquireVirtualCacheView">
  <data key="d5">FunctionCall</data>
</node>
<node id="QueueCacheViewAuthenticPixels">
  <data key="d5">FunctionCall</data>
</node>
<node id="GetCacheViewVirtualPixels">
  <data key="d5">FunctionCall</data>
</node>
<node id="PerceptibleReciprocal">
  <data key="d5">FunctionCall</data>
</node>
<node id="DestroyImageList">
  <data key="d5">FunctionCall</data>
</node>
<node id="if_0">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">images-&gt;debug != MagickFalse</data>
</node>
<node id="if_1">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">images-&gt;next == (Image *</data>
</node>
<node id="if_2">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">image == (Image *</data>
</node>
<node id="if_3">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">SetImageStorageClass(image,DirectClass,exception</data>
</node>
<node id="if_4">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">image == (Image *</data>
</node>
<node id="if_5">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">artifact != (const char *</data>
</node>
<node id="if_6">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">(images-&gt;next-&gt;next != (Image *</data>
</node>
<node id="if_7">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">status == MagickFalse</data>
</node>
<node id="if_8">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">(Ar == (const Quantum *</data>
</node>
<node id="if_9">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">SyncCacheViewAuthenticPixels(Ci_view,exception</data>
</node>
<node id="if_10">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">SyncCacheViewAuthenticPixels(Cr_view,exception</data>
</node>
<node id="if_11">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">images-&gt;progress_monitor != (MagickProgressMonitor</data>
</node>
<node id="if_12">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">proceed == MagickFalse</data>
</node>
<node id="if_13">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">status == MagickFalse</data>
</node>
<node id="for_14">
  <data key="d5">ControlStructure_for</data>
  <data key="d6">y=0; y &lt; (ssize_t</data>
</node>
<node id="for_15">
  <data key="d5">ControlStructure_for</data>
  <data key="d6">x=0; x &lt; (ssize_t</data>
</node>
<node id="for_16">
  <data key="d5">ControlStructure_for</data>
  <data key="d6">i=0; i &lt; (ssize_t</data>
</node>
<node id="switch_17">
  <data key="d5">ControlStructure_switch</data>
  <data key="d6">op</data>
</node>
<edge source="ComplexImages" target="snr">
  <data key="d7">declares</data>
</edge>
<edge source="ComplexImages" target="y">
  <data key="d7">declares</data>
</edge>
<edge source="ComplexImages" target="artifact">
  <data key="d7">declares</data>
</edge>
<edge source="ComplexImages" target="x">
  <data key="d7">declares</data>
</edge>
<edge source="ComplexImages" target="gamma">
  <data key="d7">declares</data>
</edge>
<edge source="ComplexImages" target="i">
  <data key="d7">declares</data>
</edge>
<edge source="ComplexImages" target="NewImageList">
  <data key="d7">calls</data>
</edge>
<edge source="ComplexImages" target="defined">
  <data key="d7">calls</data>
</edge>
<edge source="ComplexImages" target="sqrt">
  <data key="d7">calls</data>
</edge>
<edge source="ComplexImages" target="assert">
  <data key="d7">calls</data>
</edge>
<edge source="ComplexImages" target="sin">
  <data key="d7">calls</data>
</edge>
<edge source="ComplexImages" target="atan2">
  <data key="d7">calls</data>
</edge>
<edge source="ComplexImages" target="AcquireAuthenticCacheView">
  <data key="d7">calls</data>
</edge>
<edge source="ComplexImages" target="ThrowMagickException">
  <data key="d7">calls</data>
</edge>
<edge source="ComplexImages" target="SetImageProgress">
  <data key="d7">calls</data>
</edge>
<edge source="ComplexImages" target="AppendImageToList">
  <data key="d7">calls</data>
</edge>
<edge source="ComplexImages" target="GetImageArtifact">
  <data key="d7">calls</data>
</edge>
<edge source="ComplexImages" target="GetPixelChannels">
  <data key="d7">calls</data>
</edge>
<edge source="ComplexImages" target="cos">
  <data key="d7">calls</data>
</edge>
<edge source="ComplexImages" target="DestroyCacheView">
  <data key="d7">calls</data>
</edge>
<edge source="ComplexImages" target="CloneImage">
  <data key="d7">calls</data>
</edge>
<edge source="ComplexImages" target="AcquireVirtualCacheView">
  <data key="d7">calls</data>
</edge>
<edge source="ComplexImages" target="QueueCacheViewAuthenticPixels">
  <data key="d7">calls</data>
</edge>
<edge source="ComplexImages" target="GetCacheViewVirtualPixels">
  <data key="d7">calls</data>
</edge>
<edge source="ComplexImages" target="PerceptibleReciprocal">
  <data key="d7">calls</data>
</edge>
<edge source="ComplexImages" target="DestroyImageList">
  <data key="d7">calls</data>
</edge>
<edge source="ComplexImages" target="if_0">
  <data key="d7">contains</data>
</edge>
<edge source="ComplexImages" target="if_1">
  <data key="d7">contains</data>
</edge>
<edge source="ComplexImages" target="if_2">
  <data key="d7">contains</data>
</edge>
<edge source="ComplexImages" target="if_3">
  <data key="d7">contains</data>
</edge>
<edge source="ComplexImages" target="if_4">
  <data key="d7">contains</data>
</edge>
<edge source="ComplexImages" target="if_5">
  <data key="d7">contains</data>
</edge>
<edge source="ComplexImages" target="if_6">
  <data key="d7">contains</data>
</edge>
<edge source="ComplexImages" target="if_7">
  <data key="d7">contains</data>
</edge>
<edge source="ComplexImages" target="if_8">
  <data key="d7">contains</data>
</edge>
<edge source="ComplexImages" target="if_9">
  <data key="d7">contains</data>
</edge>
<edge source="ComplexImages" target="if_10">
  <data key="d7">contains</data>
</edge>
<edge source="ComplexImages" target="if_11">
  <data key="d7">contains</data>
</edge>
<edge source="ComplexImages" target="if_12">
  <data key="d7">contains</data>
</edge>
<edge source="ComplexImages" target="if_13">
  <data key="d7">contains</data>
</edge>
<edge source="ComplexImages" target="for_14">
  <data key="d7">contains</data>
</edge>
<edge source="ComplexImages" target="for_15">
  <data key="d7">contains</data>
</edge>
<edge source="ComplexImages" target="for_16">
  <data key="d7">contains</data>
</edge>
<edge source="ComplexImages" target="switch_17">
  <data key="d7">contains</data>
</edge>
<edge source="snr" target="GetImageArtifact">
  <data key="d7">used_as_parameter</data>
</edge>
<edge source="snr" target="PerceptibleReciprocal">
  <data key="d7">used_as_parameter</data>
</edge>
<edge source="snr" target="for_14">
  <data key="d7">used_in_body</data>
</edge>
<edge source="snr" target="for_15">
  <data key="d7">used_in_body</data>
</edge>
<edge source="snr" target="for_16">
  <data key="d7">used_in_body</data>
</edge>
<edge source="snr" target="switch_17">
  <data key="d7">used_in_body</data>
</edge>
<edge source="y" target="if_9">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="y" target="if_10">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="y" target="for_14">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="artifact" target="if_5">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="x" target="if_1">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="x" target="if_3">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="x" target="if_6">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="x" target="if_9">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="x" target="if_10">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="x" target="for_15">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="gamma" target="for_14">
  <data key="d7">used_in_body</data>
</edge>
<edge source="gamma" target="for_15">
  <data key="d7">used_in_body</data>
</edge>
<edge source="gamma" target="for_16">
  <data key="d7">used_in_body</data>
</edge>
<edge source="gamma" target="switch_17">
  <data key="d7">used_in_body</data>
</edge>
<edge source="i" target="if_0">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="i" target="if_1">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="i" target="if_2">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="i" target="if_3">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="i" target="if_4">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="i" target="if_5">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="i" target="if_6">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="i" target="if_7">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="i" target="if_9">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="i" target="if_10">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="i" target="if_11">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="i" target="if_12">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="i" target="if_13">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="i" target="for_14">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="i" target="for_15">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="i" target="for_16">
  <data key="d7">used_in_condition</data>
</edge>
</graph></graphml>