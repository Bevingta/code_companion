<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"><key id="d6" for="edge" attr.name="type" attr.type="string"/>
<key id="d5" for="node" attr.name="condition" attr.type="string"/>
<key id="d4" for="node" attr.name="type" attr.type="string"/>
<key id="d3" for="graph" attr.name="severity" attr.type="string"/>
<key id="d2" for="graph" attr.name="cvss" attr.type="string"/>
<key id="d1" for="graph" attr.name="cve" attr.type="string"/>
<key id="d0" for="graph" attr.name="pointer_arithmetic" attr.type="boolean"/>
<graph edgedefault="directed"><data key="d0">True</data>
<data key="d1">CVE-2016-7163</data>
<data key="d2">6.8</data>
<data key="d3">MEDIUM</data>
<node id="opj_pi_create_decode">
  <data key="d4">FunctionDefinition</data>
</node>
<node id="p_cp">
  <data key="d4">Variable</data>
</node>
<node id="l_tcp">
  <data key="d4">Variable</data>
</node>
<node id="l_tccp">
  <data key="d4">Variable</data>
</node>
<node id="p_image">
  <data key="d4">Variable</data>
</node>
<node id="l_current_comp">
  <data key="d4">Variable</data>
</node>
<node id="l_res">
  <data key="d4">Variable</data>
</node>
<node id="l_pi">
  <data key="d4">Variable</data>
</node>
<node id="opj_pi_create">
  <data key="d4">FunctionCall</data>
</node>
<node id="opj_malloc">
  <data key="d4">FunctionCall</data>
</node>
<node id="opj_pi_update_decode_poc">
  <data key="d4">FunctionCall</data>
</node>
<node id="opj_pi_update_decode_not_poc">
  <data key="d4">FunctionCall</data>
</node>
<node id="opj_pi_destroy">
  <data key="d4">FunctionCall</data>
</node>
<node id="opj_get_all_encoding_parameters">
  <data key="d4">FunctionCall</data>
</node>
<node id="opj_calloc">
  <data key="d4">FunctionCall</data>
</node>
<node id="opj_free">
  <data key="d4">FunctionCall</data>
</node>
<node id="assert">
  <data key="d4">FunctionCall</data>
</node>
<node id="if_0">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">! l_tmp_data</data>
</node>
<node id="if_1">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">! l_tmp_ptr</data>
</node>
<node id="if_2">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!l_pi</data>
</node>
<node id="if_3">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">l_step_l &lt;= (SIZE_MAX / (l_tcp-&gt;numlayers + 1U</data>
</node>
<node id="if_4">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!l_current_pi-&gt;include</data>
</node>
<node id="if_5">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">l_tcp-&gt;POC</data>
</node>
<node id="for_6">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">compno = 0; compno &lt; p_image-&gt;numcomps; ++compno</data>
</node>
<node id="for_7">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">compno = 0; compno &lt; l_current_pi-&gt;numcomps; ++compno</data>
</node>
<node id="for_8">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">resno = 0; resno &lt; l_current_comp-&gt;numresolutions; resno++</data>
</node>
<node id="for_9">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">pino = 1 ; pino&lt;l_bound ; ++pino </data>
</node>
<node id="for_10">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">compno = 0; compno &lt; l_current_pi-&gt;numcomps; ++compno</data>
</node>
<node id="for_11">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">resno = 0; resno &lt; l_current_comp-&gt;numresolutions; resno++</data>
</node>
<edge source="opj_pi_create_decode" target="p_cp">
  <data key="d6">declares</data>
</edge>
<edge source="opj_pi_create_decode" target="l_tcp">
  <data key="d6">declares</data>
</edge>
<edge source="opj_pi_create_decode" target="l_tccp">
  <data key="d6">declares</data>
</edge>
<edge source="opj_pi_create_decode" target="p_image">
  <data key="d6">declares</data>
</edge>
<edge source="opj_pi_create_decode" target="l_current_comp">
  <data key="d6">declares</data>
</edge>
<edge source="opj_pi_create_decode" target="l_res">
  <data key="d6">declares</data>
</edge>
<edge source="opj_pi_create_decode" target="l_pi">
  <data key="d6">declares</data>
</edge>
<edge source="opj_pi_create_decode" target="opj_pi_create">
  <data key="d6">calls</data>
</edge>
<edge source="opj_pi_create_decode" target="opj_malloc">
  <data key="d6">calls</data>
</edge>
<edge source="opj_pi_create_decode" target="opj_pi_update_decode_poc">
  <data key="d6">calls</data>
</edge>
<edge source="opj_pi_create_decode" target="opj_pi_update_decode_not_poc">
  <data key="d6">calls</data>
</edge>
<edge source="opj_pi_create_decode" target="opj_pi_destroy">
  <data key="d6">calls</data>
</edge>
<edge source="opj_pi_create_decode" target="opj_get_all_encoding_parameters">
  <data key="d6">calls</data>
</edge>
<edge source="opj_pi_create_decode" target="opj_calloc">
  <data key="d6">calls</data>
</edge>
<edge source="opj_pi_create_decode" target="opj_free">
  <data key="d6">calls</data>
</edge>
<edge source="opj_pi_create_decode" target="assert">
  <data key="d6">calls</data>
</edge>
<edge source="opj_pi_create_decode" target="if_0">
  <data key="d6">contains</data>
</edge>
<edge source="opj_pi_create_decode" target="if_1">
  <data key="d6">contains</data>
</edge>
<edge source="opj_pi_create_decode" target="if_2">
  <data key="d6">contains</data>
</edge>
<edge source="opj_pi_create_decode" target="if_3">
  <data key="d6">contains</data>
</edge>
<edge source="opj_pi_create_decode" target="if_4">
  <data key="d6">contains</data>
</edge>
<edge source="opj_pi_create_decode" target="if_5">
  <data key="d6">contains</data>
</edge>
<edge source="opj_pi_create_decode" target="for_6">
  <data key="d6">contains</data>
</edge>
<edge source="opj_pi_create_decode" target="for_7">
  <data key="d6">contains</data>
</edge>
<edge source="opj_pi_create_decode" target="for_8">
  <data key="d6">contains</data>
</edge>
<edge source="opj_pi_create_decode" target="for_9">
  <data key="d6">contains</data>
</edge>
<edge source="opj_pi_create_decode" target="for_10">
  <data key="d6">contains</data>
</edge>
<edge source="opj_pi_create_decode" target="for_11">
  <data key="d6">contains</data>
</edge>
<edge source="p_cp" target="opj_pi_create">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="p_cp" target="opj_get_all_encoding_parameters">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="p_cp" target="opj_pi_create_decode">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="p_cp" target="assert">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="l_tcp" target="if_3">
  <data key="d6">used_in_body</data>
</edge>
<edge source="l_tcp" target="if_5">
  <data key="d6">used_in_body</data>
</edge>
<edge source="l_tcp" target="opj_pi_update_decode_poc">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="l_tcp" target="opj_pi_update_decode_not_poc">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="l_tcp" target="opj_calloc">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="l_tcp" target="for_9">
  <data key="d6">used_in_body</data>
</edge>
<edge source="l_tccp" target="for_7">
  <data key="d6">used_in_body</data>
</edge>
<edge source="l_tccp" target="for_9">
  <data key="d6">used_in_body</data>
</edge>
<edge source="l_tccp" target="for_10">
  <data key="d6">used_in_body</data>
</edge>
<edge source="p_image" target="for_6">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="p_image" target="opj_pi_create">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="p_image" target="opj_malloc">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="p_image" target="opj_get_all_encoding_parameters">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="p_image" target="opj_pi_create_decode">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="p_image" target="assert">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="p_image" target="for_9">
  <data key="d6">used_in_body</data>
</edge>
<edge source="l_current_comp" target="for_8">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="l_current_comp" target="for_11">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="l_current_comp" target="for_7">
  <data key="d6">used_in_body</data>
</edge>
<edge source="l_current_comp" target="for_9">
  <data key="d6">used_in_body</data>
</edge>
<edge source="l_current_comp" target="for_10">
  <data key="d6">used_in_body</data>
</edge>
<edge source="l_res" target="for_7">
  <data key="d6">used_in_body</data>
</edge>
<edge source="l_res" target="for_8">
  <data key="d6">used_in_body</data>
</edge>
<edge source="l_res" target="for_9">
  <data key="d6">used_in_body</data>
</edge>
<edge source="l_res" target="for_10">
  <data key="d6">used_in_body</data>
</edge>
<edge source="l_res" target="for_11">
  <data key="d6">used_in_body</data>
</edge>
<edge source="l_pi" target="if_2">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="l_pi" target="opj_pi_update_decode_poc">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="l_pi" target="opj_pi_update_decode_not_poc">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="l_pi" target="opj_pi_destroy">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="l_pi" target="if_4">
  <data key="d6">used_in_body</data>
</edge>
<edge source="l_pi" target="if_5">
  <data key="d6">used_in_body</data>
</edge>
</graph></graphml>