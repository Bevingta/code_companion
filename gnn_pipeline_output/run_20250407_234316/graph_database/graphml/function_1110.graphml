<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"><key id="d6" for="edge" attr.name="type" attr.type="string"/>
<key id="d5" for="node" attr.name="condition" attr.type="string"/>
<key id="d4" for="node" attr.name="type" attr.type="string"/>
<key id="d3" for="graph" attr.name="severity" attr.type="string"/>
<key id="d2" for="graph" attr.name="cvss" attr.type="string"/>
<key id="d1" for="graph" attr.name="cve" attr.type="string"/>
<key id="d0" for="graph" attr.name="pointer_arithmetic" attr.type="boolean"/>
<graph edgedefault="directed"><data key="d0">True</data>
<data key="d1">CVE-2016-10144</data>
<data key="d2">7.5</data>
<data key="d3">HIGH</data>
<node id="WriteIPLImage">
  <data key="d4">FunctionDefinition</data>
</node>
<node id="pixels">
  <data key="d4">Variable</data>
</node>
<node id="y">
  <data key="d4">Variable</data>
</node>
<node id="else">
  <data key="d4">FunctionCall</data>
</node>
<node id="WriteBlob">
  <data key="d4">FunctionCall</data>
</node>
<node id="GetVirtualPixels">
  <data key="d4">FunctionCall</data>
</node>
<node id="Shockingly">
  <data key="d4">FunctionCall</data>
</node>
<node id="DestroyQuantumInfo">
  <data key="d4">FunctionCall</data>
</node>
<node id="WriteBlobLong">
  <data key="d4">FunctionCall</data>
</node>
<node id="CloseBlob">
  <data key="d4">FunctionCall</data>
</node>
<node id="GetAuthenticPixels">
  <data key="d4">FunctionCall</data>
</node>
<node id="AcquireQuantumInfo">
  <data key="d4">FunctionCall</data>
</node>
<node id="GetImageListLength">
  <data key="d4">FunctionCall</data>
</node>
<node id="GetQuantumPixels">
  <data key="d4">FunctionCall</data>
</node>
<node id="TransformImageColorspace">
  <data key="d4">FunctionCall</data>
</node>
<node id="SetImageProgress">
  <data key="d4">FunctionCall</data>
</node>
<node id="SyncNextImageInList">
  <data key="d4">FunctionCall</data>
</node>
<node id="OpenBlob">
  <data key="d4">FunctionCall</data>
</node>
<node id="assert">
  <data key="d4">FunctionCall</data>
</node>
<node id="ExportQuantumPixels">
  <data key="d4">FunctionCall</data>
</node>
<node id="if_0">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">image-&gt;debug != MagickFalse</data>
</node>
<node id="if_1">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">status == MagickFalse</data>
</node>
<node id="if_2">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">(quantum_info-&gt;format == UndefinedQuantumFormat</data>
</node>
<node id="if_3">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">quantum_info-&gt;format == SignedQuantumFormat</data>
</node>
<node id="if_4">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">quantum_info-&gt;format == FloatingPointQuantumFormat</data>
</node>
<node id="if_5">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">IssRGBCompatibleColorspace(image-&gt;colorspace</data>
</node>
<node id="if_6">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">image_info-&gt;endian == MSBEndian</data>
</node>
<node id="if_7">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">image_info-&gt;adjoin == MagickFalse</data>
</node>
<node id="if_8">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">ipl_info.colors == 1</data>
</node>
<node id="if_9">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">p == (PixelPacket *</data>
</node>
<node id="if_10">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">ipl_info.colors == 3</data>
</node>
<node id="if_11">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">p == (PixelPacket *</data>
</node>
<node id="if_12">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">p == (PixelPacket *</data>
</node>
<node id="if_13">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">p == (PixelPacket *</data>
</node>
<node id="if_14">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">image-&gt;previous == (Image *</data>
</node>
<node id="if_15">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">status == MagickFalse</data>
</node>
<node id="if_16">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">GetNextImageInList(image</data>
</node>
<node id="if_17">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">status == MagickFalse</data>
</node>
<node id="for_18">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">y = 0; y &lt; (ssize_t</data>
</node>
<node id="for_19">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">y = 0; y &lt; (ssize_t</data>
</node>
<node id="for_20">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">y = 0; y &lt; (ssize_t</data>
</node>
<node id="for_21">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">y = 0; y &lt; (ssize_t</data>
</node>
<node id="while_22">
  <data key="d4">ControlStructure_while</data>
  <data key="d5">image_info-&gt;adjoin != MagickFalse</data>
</node>
<node id="switch_23">
  <data key="d4">ControlStructure_switch</data>
  <data key="d5">quantum_info-&gt;depth</data>
</node>
<edge source="WriteIPLImage" target="pixels">
  <data key="d6">declares</data>
</edge>
<edge source="WriteIPLImage" target="y">
  <data key="d6">declares</data>
</edge>
<edge source="WriteIPLImage" target="else">
  <data key="d6">calls</data>
</edge>
<edge source="WriteIPLImage" target="WriteBlob">
  <data key="d6">calls</data>
</edge>
<edge source="WriteIPLImage" target="GetVirtualPixels">
  <data key="d6">calls</data>
</edge>
<edge source="WriteIPLImage" target="Shockingly">
  <data key="d6">calls</data>
</edge>
<edge source="WriteIPLImage" target="DestroyQuantumInfo">
  <data key="d6">calls</data>
</edge>
<edge source="WriteIPLImage" target="WriteBlobLong">
  <data key="d6">calls</data>
</edge>
<edge source="WriteIPLImage" target="CloseBlob">
  <data key="d6">calls</data>
</edge>
<edge source="WriteIPLImage" target="GetAuthenticPixels">
  <data key="d6">calls</data>
</edge>
<edge source="WriteIPLImage" target="AcquireQuantumInfo">
  <data key="d6">calls</data>
</edge>
<edge source="WriteIPLImage" target="GetImageListLength">
  <data key="d6">calls</data>
</edge>
<edge source="WriteIPLImage" target="GetQuantumPixels">
  <data key="d6">calls</data>
</edge>
<edge source="WriteIPLImage" target="TransformImageColorspace">
  <data key="d6">calls</data>
</edge>
<edge source="WriteIPLImage" target="SetImageProgress">
  <data key="d6">calls</data>
</edge>
<edge source="WriteIPLImage" target="SyncNextImageInList">
  <data key="d6">calls</data>
</edge>
<edge source="WriteIPLImage" target="OpenBlob">
  <data key="d6">calls</data>
</edge>
<edge source="WriteIPLImage" target="assert">
  <data key="d6">calls</data>
</edge>
<edge source="WriteIPLImage" target="ExportQuantumPixels">
  <data key="d6">calls</data>
</edge>
<edge source="WriteIPLImage" target="if_0">
  <data key="d6">contains</data>
</edge>
<edge source="WriteIPLImage" target="if_1">
  <data key="d6">contains</data>
</edge>
<edge source="WriteIPLImage" target="if_2">
  <data key="d6">contains</data>
</edge>
<edge source="WriteIPLImage" target="if_3">
  <data key="d6">contains</data>
</edge>
<edge source="WriteIPLImage" target="if_4">
  <data key="d6">contains</data>
</edge>
<edge source="WriteIPLImage" target="if_5">
  <data key="d6">contains</data>
</edge>
<edge source="WriteIPLImage" target="if_6">
  <data key="d6">contains</data>
</edge>
<edge source="WriteIPLImage" target="if_7">
  <data key="d6">contains</data>
</edge>
<edge source="WriteIPLImage" target="if_8">
  <data key="d6">contains</data>
</edge>
<edge source="WriteIPLImage" target="if_9">
  <data key="d6">contains</data>
</edge>
<edge source="WriteIPLImage" target="if_10">
  <data key="d6">contains</data>
</edge>
<edge source="WriteIPLImage" target="if_11">
  <data key="d6">contains</data>
</edge>
<edge source="WriteIPLImage" target="if_12">
  <data key="d6">contains</data>
</edge>
<edge source="WriteIPLImage" target="if_13">
  <data key="d6">contains</data>
</edge>
<edge source="WriteIPLImage" target="if_14">
  <data key="d6">contains</data>
</edge>
<edge source="WriteIPLImage" target="if_15">
  <data key="d6">contains</data>
</edge>
<edge source="WriteIPLImage" target="if_16">
  <data key="d6">contains</data>
</edge>
<edge source="WriteIPLImage" target="if_17">
  <data key="d6">contains</data>
</edge>
<edge source="WriteIPLImage" target="for_18">
  <data key="d6">contains</data>
</edge>
<edge source="WriteIPLImage" target="for_19">
  <data key="d6">contains</data>
</edge>
<edge source="WriteIPLImage" target="for_20">
  <data key="d6">contains</data>
</edge>
<edge source="WriteIPLImage" target="for_21">
  <data key="d6">contains</data>
</edge>
<edge source="WriteIPLImage" target="while_22">
  <data key="d6">contains</data>
</edge>
<edge source="WriteIPLImage" target="switch_23">
  <data key="d6">contains</data>
</edge>
<edge source="pixels" target="WriteBlob">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="pixels" target="if_7">
  <data key="d6">used_in_body</data>
</edge>
<edge source="pixels" target="if_8">
  <data key="d6">used_in_body</data>
</edge>
<edge source="pixels" target="if_9">
  <data key="d6">used_in_body</data>
</edge>
<edge source="pixels" target="if_10">
  <data key="d6">used_in_body</data>
</edge>
<edge source="pixels" target="if_11">
  <data key="d6">used_in_body</data>
</edge>
<edge source="pixels" target="if_12">
  <data key="d6">used_in_body</data>
</edge>
<edge source="pixels" target="for_18">
  <data key="d6">used_in_body</data>
</edge>
<edge source="pixels" target="for_19">
  <data key="d6">used_in_body</data>
</edge>
<edge source="pixels" target="for_20">
  <data key="d6">used_in_body</data>
</edge>
<edge source="pixels" target="for_21">
  <data key="d6">used_in_body</data>
</edge>
<edge source="y" target="for_18">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="y" target="for_19">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="y" target="for_20">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="y" target="for_21">
  <data key="d6">used_in_condition</data>
</edge>
</graph></graphml>