<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"><key id="d5" for="edge" attr.name="type" attr.type="string"/>
<key id="d4" for="node" attr.name="condition" attr.type="string"/>
<key id="d3" for="node" attr.name="type" attr.type="string"/>
<key id="d2" for="graph" attr.name="severity" attr.type="string"/>
<key id="d1" for="graph" attr.name="cvss" attr.type="string"/>
<key id="d0" for="graph" attr.name="cve" attr.type="string"/>
<graph edgedefault="directed"><data key="d0">CVE-2018-20511</data>
<data key="d1">2.1</data>
<data key="d2">LOW</data>
<node id="ipddp_ioctl">
  <data key="d3">FunctionDefinition</data>
</node>
<node id="cmd">
  <data key="d3">Variable</data>
</node>
<node id="dev">
  <data key="d3">Variable</data>
</node>
<node id="ifr">
  <data key="d3">Variable</data>
</node>
<node id="ipddp_create">
  <data key="d3">FunctionCall</data>
</node>
<node id="__ipddp_find_route">
  <data key="d3">FunctionCall</data>
</node>
<node id="ipddp_delete">
  <data key="d3">FunctionCall</data>
</node>
<node id="spin_lock_bh">
  <data key="d3">FunctionCall</data>
</node>
<node id="spin_unlock_bh">
  <data key="d3">FunctionCall</data>
</node>
<node id="if_0">
  <data key="d3">ControlStructure_if</data>
  <data key="d4">!capable(CAP_NET_ADMIN</data>
</node>
<node id="if_1">
  <data key="d3">ControlStructure_if</data>
  <data key="d4">copy_from_user(&amp;rcp, rt, sizeof(rcp</data>
</node>
<node id="if_2">
  <data key="d3">ControlStructure_if</data>
  <data key="d4">rp</data>
</node>
<node id="if_3">
  <data key="d3">ControlStructure_if</data>
  <data key="d4">rp</data>
</node>
<node id="if_4">
  <data key="d3">ControlStructure_if</data>
  <data key="d4">copy_to_user(rt, &amp;rcp2,
						 sizeof(struct ipddp_route</data>
</node>
<node id="switch_5">
  <data key="d3">ControlStructure_switch</data>
  <data key="d4">cmd</data>
</node>
<edge source="ipddp_ioctl" target="cmd">
  <data key="d5">declares</data>
</edge>
<edge source="ipddp_ioctl" target="dev">
  <data key="d5">declares</data>
</edge>
<edge source="ipddp_ioctl" target="ifr">
  <data key="d5">declares</data>
</edge>
<edge source="ipddp_ioctl" target="ipddp_create">
  <data key="d5">calls</data>
</edge>
<edge source="ipddp_ioctl" target="__ipddp_find_route">
  <data key="d5">calls</data>
</edge>
<edge source="ipddp_ioctl" target="ipddp_delete">
  <data key="d5">calls</data>
</edge>
<edge source="ipddp_ioctl" target="spin_lock_bh">
  <data key="d5">calls</data>
</edge>
<edge source="ipddp_ioctl" target="spin_unlock_bh">
  <data key="d5">calls</data>
</edge>
<edge source="ipddp_ioctl" target="if_0">
  <data key="d5">contains</data>
</edge>
<edge source="ipddp_ioctl" target="if_1">
  <data key="d5">contains</data>
</edge>
<edge source="ipddp_ioctl" target="if_2">
  <data key="d5">contains</data>
</edge>
<edge source="ipddp_ioctl" target="if_3">
  <data key="d5">contains</data>
</edge>
<edge source="ipddp_ioctl" target="if_4">
  <data key="d5">contains</data>
</edge>
<edge source="ipddp_ioctl" target="switch_5">
  <data key="d5">contains</data>
</edge>
<edge source="cmd" target="switch_5">
  <data key="d5">used_in_condition</data>
</edge>
<edge source="cmd" target="ipddp_ioctl">
  <data key="d5">used_as_parameter</data>
</edge>
<edge source="dev" target="ipddp_ioctl">
  <data key="d5">used_as_parameter</data>
</edge>
<edge source="ifr" target="ipddp_ioctl">
  <data key="d5">used_as_parameter</data>
</edge>
</graph></graphml>