<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"><key id="d6" for="edge" attr.name="type" attr.type="string"/>
<key id="d5" for="node" attr.name="condition" attr.type="string"/>
<key id="d4" for="node" attr.name="type" attr.type="string"/>
<key id="d3" for="graph" attr.name="severity" attr.type="string"/>
<key id="d2" for="graph" attr.name="cvss" attr.type="string"/>
<key id="d1" for="graph" attr.name="cve" attr.type="string"/>
<key id="d0" for="graph" attr.name="pointer_arithmetic" attr.type="boolean"/>
<graph edgedefault="directed"><data key="d0">True</data>
<data key="d1">CVE-2015-1790</data>
<data key="d2">5.0</data>
<data key="d3">MEDIUM</data>
<node id="PKCS7_dataDecode">
  <data key="d4">FunctionDefinition</data>
</node>
<node id="ek">
  <data key="d4">Variable</data>
</node>
<node id="eklen">
  <data key="d4">Variable</data>
</node>
<node id="STACK_OF">
  <data key="d4">FunctionCall</data>
</node>
<node id="OPENSSL_malloc">
  <data key="d4">FunctionCall</data>
</node>
<node id="PKCS7err">
  <data key="d4">FunctionCall</data>
</node>
<node id="EVP_CIPHER_CTX_key_length">
  <data key="d4">FunctionCall</data>
</node>
<node id="sk_PKCS7_RECIP_INFO_value">
  <data key="d4">FunctionCall</data>
</node>
<node id="EVP_get_digestbynid">
  <data key="d4">FunctionCall</data>
</node>
<node id="BIO_push">
  <data key="d4">FunctionCall</data>
</node>
<node id="BIO_set_mem_eof_return">
  <data key="d4">FunctionCall</data>
</node>
<node id="BIO_free_all">
  <data key="d4">FunctionCall</data>
</node>
<node id="certificate">
  <data key="d4">FunctionCall</data>
</node>
<node id="OBJ_obj2nid">
  <data key="d4">FunctionCall</data>
</node>
<node id="BIO_new">
  <data key="d4">FunctionCall</data>
</node>
<node id="OPENSSL_clear_free">
  <data key="d4">FunctionCall</data>
</node>
<node id="BIO_get_cipher_ctx">
  <data key="d4">FunctionCall</data>
</node>
<node id="EVP_get_cipherbyobj">
  <data key="d4">FunctionCall</data>
</node>
<node id="PKCS7_get_octet_string">
  <data key="d4">FunctionCall</data>
</node>
<node id="BIO_set_md">
  <data key="d4">FunctionCall</data>
</node>
<node id="ERR_clear_error">
  <data key="d4">FunctionCall</data>
</node>
<node id="sk_X509_ALGOR_value">
  <data key="d4">FunctionCall</data>
</node>
<node id="sk_PKCS7_RECIP_INFO_num">
  <data key="d4">FunctionCall</data>
</node>
<node id="sk_X509_ALGOR_num">
  <data key="d4">FunctionCall</data>
</node>
<node id="if_0">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">p7 == NULL</data>
</node>
<node id="if_1">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">p7-&gt;d.ptr == NULL</data>
</node>
<node id="if_2">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!PKCS7_is_detached(p7</data>
</node>
<node id="if_3">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">evp_cipher == NULL</data>
</node>
<node id="if_4">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">evp_cipher == NULL</data>
</node>
<node id="if_5">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">md_sk != NULL</data>
</node>
<node id="if_6">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">(btmp = BIO_new(BIO_f_md(</data>
</node>
<node id="if_7">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">evp_md == NULL</data>
</node>
<node id="if_8">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">out == NULL</data>
</node>
<node id="if_9">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">evp_cipher != NULL</data>
</node>
<node id="if_10">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">(etmp = BIO_new(BIO_f_cipher(</data>
</node>
<node id="if_11">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">pcert</data>
</node>
<node id="if_12">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!pkcs7_cmp_ri(ri, pcert</data>
</node>
<node id="if_13">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">ri == NULL</data>
</node>
<node id="if_14">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">pcert == NULL</data>
</node>
<node id="if_15">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">pkcs7_decrypt_rinfo(&amp;ek, &amp;eklen, ri, pkey</data>
</node>
<node id="if_16">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">pkcs7_decrypt_rinfo(&amp;ek, &amp;eklen, ri, pkey</data>
</node>
<node id="if_17">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">EVP_CipherInit_ex(evp_ctx, evp_cipher, NULL, NULL, NULL, 0</data>
</node>
<node id="if_18">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">EVP_CIPHER_asn1_to_param(evp_ctx, enc_alg-&gt;parameter</data>
</node>
<node id="if_19">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!tkey</data>
</node>
<node id="if_20">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">EVP_CIPHER_CTX_rand_key(evp_ctx, tkey</data>
</node>
<node id="if_21">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">ek == NULL</data>
</node>
<node id="if_22">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">eklen != EVP_CIPHER_CTX_key_length(evp_ctx</data>
</node>
<node id="if_23">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!EVP_CIPHER_CTX_set_key_length(evp_ctx, eklen</data>
</node>
<node id="if_24">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">EVP_CipherInit_ex(evp_ctx, NULL, NULL, ek, NULL, 0</data>
</node>
<node id="if_25">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">out == NULL</data>
</node>
<node id="if_26">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">PKCS7_is_detached(p7</data>
</node>
<node id="if_27">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">data_body-&gt;length &gt; 0</data>
</node>
<node id="if_28">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">bio == NULL</data>
</node>
<node id="for_29">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">i = 0; i &lt; sk_X509_ALGOR_num(md_sk</data>
</node>
<node id="for_30">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">i = 0; i &lt; sk_PKCS7_RECIP_INFO_num(rsk</data>
</node>
<node id="for_31">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">i = 0; i &lt; sk_PKCS7_RECIP_INFO_num(rsk</data>
</node>
<node id="switch_32">
  <data key="d4">ControlStructure_switch</data>
  <data key="d5">i</data>
</node>
<edge source="PKCS7_dataDecode" target="ek">
  <data key="d6">declares</data>
</edge>
<edge source="PKCS7_dataDecode" target="eklen">
  <data key="d6">declares</data>
</edge>
<edge source="PKCS7_dataDecode" target="STACK_OF">
  <data key="d6">calls</data>
</edge>
<edge source="PKCS7_dataDecode" target="OPENSSL_malloc">
  <data key="d6">calls</data>
</edge>
<edge source="PKCS7_dataDecode" target="PKCS7err">
  <data key="d6">calls</data>
</edge>
<edge source="PKCS7_dataDecode" target="EVP_CIPHER_CTX_key_length">
  <data key="d6">calls</data>
</edge>
<edge source="PKCS7_dataDecode" target="sk_PKCS7_RECIP_INFO_value">
  <data key="d6">calls</data>
</edge>
<edge source="PKCS7_dataDecode" target="EVP_get_digestbynid">
  <data key="d6">calls</data>
</edge>
<edge source="PKCS7_dataDecode" target="BIO_push">
  <data key="d6">calls</data>
</edge>
<edge source="PKCS7_dataDecode" target="BIO_set_mem_eof_return">
  <data key="d6">calls</data>
</edge>
<edge source="PKCS7_dataDecode" target="BIO_free_all">
  <data key="d6">calls</data>
</edge>
<edge source="PKCS7_dataDecode" target="certificate">
  <data key="d6">calls</data>
</edge>
<edge source="PKCS7_dataDecode" target="OBJ_obj2nid">
  <data key="d6">calls</data>
</edge>
<edge source="PKCS7_dataDecode" target="BIO_new">
  <data key="d6">calls</data>
</edge>
<edge source="PKCS7_dataDecode" target="OPENSSL_clear_free">
  <data key="d6">calls</data>
</edge>
<edge source="PKCS7_dataDecode" target="BIO_get_cipher_ctx">
  <data key="d6">calls</data>
</edge>
<edge source="PKCS7_dataDecode" target="EVP_get_cipherbyobj">
  <data key="d6">calls</data>
</edge>
<edge source="PKCS7_dataDecode" target="PKCS7_get_octet_string">
  <data key="d6">calls</data>
</edge>
<edge source="PKCS7_dataDecode" target="BIO_set_md">
  <data key="d6">calls</data>
</edge>
<edge source="PKCS7_dataDecode" target="ERR_clear_error">
  <data key="d6">calls</data>
</edge>
<edge source="PKCS7_dataDecode" target="sk_X509_ALGOR_value">
  <data key="d6">calls</data>
</edge>
<edge source="PKCS7_dataDecode" target="sk_PKCS7_RECIP_INFO_num">
  <data key="d6">calls</data>
</edge>
<edge source="PKCS7_dataDecode" target="sk_X509_ALGOR_num">
  <data key="d6">calls</data>
</edge>
<edge source="PKCS7_dataDecode" target="if_0">
  <data key="d6">contains</data>
</edge>
<edge source="PKCS7_dataDecode" target="if_1">
  <data key="d6">contains</data>
</edge>
<edge source="PKCS7_dataDecode" target="if_2">
  <data key="d6">contains</data>
</edge>
<edge source="PKCS7_dataDecode" target="if_3">
  <data key="d6">contains</data>
</edge>
<edge source="PKCS7_dataDecode" target="if_4">
  <data key="d6">contains</data>
</edge>
<edge source="PKCS7_dataDecode" target="if_5">
  <data key="d6">contains</data>
</edge>
<edge source="PKCS7_dataDecode" target="if_6">
  <data key="d6">contains</data>
</edge>
<edge source="PKCS7_dataDecode" target="if_7">
  <data key="d6">contains</data>
</edge>
<edge source="PKCS7_dataDecode" target="if_8">
  <data key="d6">contains</data>
</edge>
<edge source="PKCS7_dataDecode" target="if_9">
  <data key="d6">contains</data>
</edge>
<edge source="PKCS7_dataDecode" target="if_10">
  <data key="d6">contains</data>
</edge>
<edge source="PKCS7_dataDecode" target="if_11">
  <data key="d6">contains</data>
</edge>
<edge source="PKCS7_dataDecode" target="if_12">
  <data key="d6">contains</data>
</edge>
<edge source="PKCS7_dataDecode" target="if_13">
  <data key="d6">contains</data>
</edge>
<edge source="PKCS7_dataDecode" target="if_14">
  <data key="d6">contains</data>
</edge>
<edge source="PKCS7_dataDecode" target="if_15">
  <data key="d6">contains</data>
</edge>
<edge source="PKCS7_dataDecode" target="if_16">
  <data key="d6">contains</data>
</edge>
<edge source="PKCS7_dataDecode" target="if_17">
  <data key="d6">contains</data>
</edge>
<edge source="PKCS7_dataDecode" target="if_18">
  <data key="d6">contains</data>
</edge>
<edge source="PKCS7_dataDecode" target="if_19">
  <data key="d6">contains</data>
</edge>
<edge source="PKCS7_dataDecode" target="if_20">
  <data key="d6">contains</data>
</edge>
<edge source="PKCS7_dataDecode" target="if_21">
  <data key="d6">contains</data>
</edge>
<edge source="PKCS7_dataDecode" target="if_22">
  <data key="d6">contains</data>
</edge>
<edge source="PKCS7_dataDecode" target="if_23">
  <data key="d6">contains</data>
</edge>
<edge source="PKCS7_dataDecode" target="if_24">
  <data key="d6">contains</data>
</edge>
<edge source="PKCS7_dataDecode" target="if_25">
  <data key="d6">contains</data>
</edge>
<edge source="PKCS7_dataDecode" target="if_26">
  <data key="d6">contains</data>
</edge>
<edge source="PKCS7_dataDecode" target="if_27">
  <data key="d6">contains</data>
</edge>
<edge source="PKCS7_dataDecode" target="if_28">
  <data key="d6">contains</data>
</edge>
<edge source="PKCS7_dataDecode" target="for_29">
  <data key="d6">contains</data>
</edge>
<edge source="PKCS7_dataDecode" target="for_30">
  <data key="d6">contains</data>
</edge>
<edge source="PKCS7_dataDecode" target="for_31">
  <data key="d6">contains</data>
</edge>
<edge source="PKCS7_dataDecode" target="switch_32">
  <data key="d6">contains</data>
</edge>
<edge source="ek" target="if_15">
  <data key="d6">used_in_body</data>
</edge>
<edge source="ek" target="if_16">
  <data key="d6">used_in_body</data>
</edge>
<edge source="ek" target="if_21">
  <data key="d6">used_in_body</data>
</edge>
<edge source="ek" target="if_22">
  <data key="d6">used_in_body</data>
</edge>
<edge source="ek" target="if_23">
  <data key="d6">used_in_body</data>
</edge>
<edge source="ek" target="if_24">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="ek" target="OPENSSL_clear_free">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="ek" target="if_8">
  <data key="d6">used_in_body</data>
</edge>
<edge source="ek" target="if_9">
  <data key="d6">used_in_body</data>
</edge>
<edge source="ek" target="if_14">
  <data key="d6">used_in_body</data>
</edge>
<edge source="ek" target="if_17">
  <data key="d6">used_in_body</data>
</edge>
<edge source="ek" target="if_18">
  <data key="d6">used_in_body</data>
</edge>
<edge source="ek" target="if_19">
  <data key="d6">used_in_body</data>
</edge>
<edge source="ek" target="if_20">
  <data key="d6">used_in_body</data>
</edge>
<edge source="ek" target="for_31">
  <data key="d6">used_in_body</data>
</edge>
<edge source="eklen" target="if_15">
  <data key="d6">used_in_body</data>
</edge>
<edge source="eklen" target="if_16">
  <data key="d6">used_in_body</data>
</edge>
<edge source="eklen" target="if_22">
  <data key="d6">used_in_body</data>
</edge>
<edge source="eklen" target="if_23">
  <data key="d6">used_in_body</data>
</edge>
<edge source="eklen" target="OPENSSL_clear_free">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="eklen" target="if_8">
  <data key="d6">used_in_body</data>
</edge>
<edge source="eklen" target="if_9">
  <data key="d6">used_in_body</data>
</edge>
<edge source="eklen" target="if_14">
  <data key="d6">used_in_body</data>
</edge>
<edge source="eklen" target="if_17">
  <data key="d6">used_in_body</data>
</edge>
<edge source="eklen" target="if_18">
  <data key="d6">used_in_body</data>
</edge>
<edge source="eklen" target="if_19">
  <data key="d6">used_in_body</data>
</edge>
<edge source="eklen" target="if_20">
  <data key="d6">used_in_body</data>
</edge>
<edge source="eklen" target="if_21">
  <data key="d6">used_in_body</data>
</edge>
<edge source="eklen" target="for_31">
  <data key="d6">used_in_body</data>
</edge>
</graph></graphml>