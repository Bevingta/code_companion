<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"><key id="d7" for="edge" attr.name="type" attr.type="string"/>
<key id="d6" for="node" attr.name="condition" attr.type="string"/>
<key id="d5" for="node" attr.name="type" attr.type="string"/>
<key id="d4" for="graph" attr.name="severity" attr.type="string"/>
<key id="d3" for="graph" attr.name="cvss" attr.type="string"/>
<key id="d2" for="graph" attr.name="cve" attr.type="string"/>
<key id="d1" for="graph" attr.name="memory_allocation" attr.type="boolean"/>
<key id="d0" for="graph" attr.name="pointer_arithmetic" attr.type="boolean"/>
<graph edgedefault="directed"><data key="d0">True</data>
<data key="d1">True</data>
<data key="d2">CVE-2014-9496</data>
<data key="d3">2.1</data>
<data key="d4">LOW</data>
<node id="sd2_parse_rsrc_fork">
  <data key="d5">FunctionDefinition</data>
</node>
<node id="calloc">
  <data key="d5">FunctionCall</data>
</node>
<node id="memset">
  <data key="d5">FunctionCall</data>
</node>
<node id="psf_log_printf">
  <data key="d5">FunctionCall</data>
</node>
<node id="read_rsrc_marker">
  <data key="d5">FunctionCall</data>
</node>
<node id="read_rsrc_int">
  <data key="d5">FunctionCall</data>
</node>
<node id="read_rsrc_short">
  <data key="d5">FunctionCall</data>
</node>
<node id="parse_str_rsrc">
  <data key="d5">FunctionCall</data>
</node>
<node id="psf_use_rsrc">
  <data key="d5">FunctionCall</data>
</node>
<node id="psf_fread">
  <data key="d5">FunctionCall</data>
</node>
<node id="psf_get_filelen">
  <data key="d5">FunctionCall</data>
</node>
<node id="if_0">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">rsrc.rsrc_len &gt; SIGNED_SIZEOF (psf-&gt;header</data>
</node>
<node id="if_1">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">rsrc.data_offset == 0x51607 &amp;&amp; rsrc.map_offset == 0x20000</data>
</node>
<node id="if_2">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">rsrc.data_offset &gt; rsrc.rsrc_len</data>
</node>
<node id="if_3">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">rsrc.map_offset &gt; rsrc.rsrc_len</data>
</node>
<node id="if_4">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">rsrc.data_length &gt; rsrc.rsrc_len</data>
</node>
<node id="if_5">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">rsrc.map_length &gt; rsrc.rsrc_len</data>
</node>
<node id="if_6">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">rsrc.data_offset + rsrc.data_length != rsrc.map_offset || rsrc.map_offset + rsrc.map_length != rsrc.rsrc_len</data>
</node>
<node id="if_7">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">rsrc.map_offset + 28 &gt;= rsrc.rsrc_len</data>
</node>
<node id="if_8">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">rsrc.string_offset &gt; rsrc.rsrc_len</data>
</node>
<node id="if_9">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">rsrc.type_count &lt; 1</data>
</node>
<node id="if_10">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">rsrc.item_offset &lt; 0 || rsrc.item_offset &gt; rsrc.rsrc_len</data>
</node>
<node id="if_11">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">marker == STR_MARKER</data>
</node>
<node id="if_12">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">rsrc.need_to_free_rsrc_data</data>
</node>
<node id="for_13">
  <data key="d5">ControlStructure_for</data>
  <data key="d6">k = 0 ; k &lt; rsrc.type_count ; k ++</data>
</node>
<edge source="sd2_parse_rsrc_fork" target="calloc">
  <data key="d7">calls</data>
</edge>
<edge source="sd2_parse_rsrc_fork" target="memset">
  <data key="d7">calls</data>
</edge>
<edge source="sd2_parse_rsrc_fork" target="psf_log_printf">
  <data key="d7">calls</data>
</edge>
<edge source="sd2_parse_rsrc_fork" target="read_rsrc_marker">
  <data key="d7">calls</data>
</edge>
<edge source="sd2_parse_rsrc_fork" target="read_rsrc_int">
  <data key="d7">calls</data>
</edge>
<edge source="sd2_parse_rsrc_fork" target="read_rsrc_short">
  <data key="d7">calls</data>
</edge>
<edge source="sd2_parse_rsrc_fork" target="parse_str_rsrc">
  <data key="d7">calls</data>
</edge>
<edge source="sd2_parse_rsrc_fork" target="psf_use_rsrc">
  <data key="d7">calls</data>
</edge>
<edge source="sd2_parse_rsrc_fork" target="psf_fread">
  <data key="d7">calls</data>
</edge>
<edge source="sd2_parse_rsrc_fork" target="psf_get_filelen">
  <data key="d7">calls</data>
</edge>
<edge source="sd2_parse_rsrc_fork" target="if_0">
  <data key="d7">contains</data>
</edge>
<edge source="sd2_parse_rsrc_fork" target="if_1">
  <data key="d7">contains</data>
</edge>
<edge source="sd2_parse_rsrc_fork" target="if_2">
  <data key="d7">contains</data>
</edge>
<edge source="sd2_parse_rsrc_fork" target="if_3">
  <data key="d7">contains</data>
</edge>
<edge source="sd2_parse_rsrc_fork" target="if_4">
  <data key="d7">contains</data>
</edge>
<edge source="sd2_parse_rsrc_fork" target="if_5">
  <data key="d7">contains</data>
</edge>
<edge source="sd2_parse_rsrc_fork" target="if_6">
  <data key="d7">contains</data>
</edge>
<edge source="sd2_parse_rsrc_fork" target="if_7">
  <data key="d7">contains</data>
</edge>
<edge source="sd2_parse_rsrc_fork" target="if_8">
  <data key="d7">contains</data>
</edge>
<edge source="sd2_parse_rsrc_fork" target="if_9">
  <data key="d7">contains</data>
</edge>
<edge source="sd2_parse_rsrc_fork" target="if_10">
  <data key="d7">contains</data>
</edge>
<edge source="sd2_parse_rsrc_fork" target="if_11">
  <data key="d7">contains</data>
</edge>
<edge source="sd2_parse_rsrc_fork" target="if_12">
  <data key="d7">contains</data>
</edge>
<edge source="sd2_parse_rsrc_fork" target="for_13">
  <data key="d7">contains</data>
</edge>
</graph></graphml>