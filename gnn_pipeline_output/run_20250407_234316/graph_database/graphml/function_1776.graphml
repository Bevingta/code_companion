<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"><key id="d6" for="edge" attr.name="type" attr.type="string"/>
<key id="d5" for="node" attr.name="condition" attr.type="string"/>
<key id="d4" for="node" attr.name="type" attr.type="string"/>
<key id="d3" for="graph" attr.name="severity" attr.type="string"/>
<key id="d2" for="graph" attr.name="cvss" attr.type="string"/>
<key id="d1" for="graph" attr.name="cve" attr.type="string"/>
<key id="d0" for="graph" attr.name="potential_buffer_overflow" attr.type="boolean"/>
<graph edgedefault="directed"><data key="d0">True</data>
<data key="d1">CVE-2014-3157</data>
<data key="d2">7.5</data>
<data key="d3">HIGH</data>
<node id="GetVideoBuffer">
  <data key="d4">FunctionDefinition</data>
</node>
<node id="i">
  <data key="d4">Variable</data>
</node>
<node id="ret">
  <data key="d4">Variable</data>
</node>
<node id="PixelFormatToVideoFormat">
  <data key="d4">FunctionCall</data>
</node>
<node id="size">
  <data key="d4">FunctionCall</data>
</node>
<node id="GetNaturalSize">
  <data key="d4">FunctionCall</data>
</node>
<node id="CreateFrame">
  <data key="d4">FunctionCall</data>
</node>
<node id="DCHECK">
  <data key="d4">FunctionCall</data>
</node>
<node id="swap">
  <data key="d4">FunctionCall</data>
</node>
<node id="natural_size">
  <data key="d4">FunctionCall</data>
</node>
<node id="data">
  <data key="d4">FunctionCall</data>
</node>
<node id="stride">
  <data key="d4">FunctionCall</data>
</node>
<node id="if_0">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">format == VideoFrame::UNKNOWN</data>
</node>
<node id="if_1">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">(ret = av_image_check_size(size.width(</data>
</node>
<node id="if_2">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">codec_context-&gt;sample_aspect_ratio.num &gt; 0</data>
</node>
<node id="if_3">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!VideoFrame::IsValidConfig(format, size, gfx::Rect(size</data>
</node>
<node id="for_4">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">int i = 0; i &lt; 3; i++</data>
</node>
<edge source="GetVideoBuffer" target="i">
  <data key="d6">declares</data>
</edge>
<edge source="GetVideoBuffer" target="ret">
  <data key="d6">declares</data>
</edge>
<edge source="GetVideoBuffer" target="PixelFormatToVideoFormat">
  <data key="d6">calls</data>
</edge>
<edge source="GetVideoBuffer" target="size">
  <data key="d6">calls</data>
</edge>
<edge source="GetVideoBuffer" target="GetNaturalSize">
  <data key="d6">calls</data>
</edge>
<edge source="GetVideoBuffer" target="CreateFrame">
  <data key="d6">calls</data>
</edge>
<edge source="GetVideoBuffer" target="DCHECK">
  <data key="d6">calls</data>
</edge>
<edge source="GetVideoBuffer" target="swap">
  <data key="d6">calls</data>
</edge>
<edge source="GetVideoBuffer" target="natural_size">
  <data key="d6">calls</data>
</edge>
<edge source="GetVideoBuffer" target="data">
  <data key="d6">calls</data>
</edge>
<edge source="GetVideoBuffer" target="stride">
  <data key="d6">calls</data>
</edge>
<edge source="GetVideoBuffer" target="if_0">
  <data key="d6">contains</data>
</edge>
<edge source="GetVideoBuffer" target="if_1">
  <data key="d6">contains</data>
</edge>
<edge source="GetVideoBuffer" target="if_2">
  <data key="d6">contains</data>
</edge>
<edge source="GetVideoBuffer" target="if_3">
  <data key="d6">contains</data>
</edge>
<edge source="GetVideoBuffer" target="for_4">
  <data key="d6">contains</data>
</edge>
<edge source="i" target="if_0">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_1">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_2">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_3">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="for_4">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="ret" target="if_1">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="ret" target="swap">
  <data key="d6">used_as_parameter</data>
</edge>
</graph></graphml>