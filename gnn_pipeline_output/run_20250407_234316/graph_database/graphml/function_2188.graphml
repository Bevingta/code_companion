<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"><key id="d6" for="edge" attr.name="type" attr.type="string"/>
<key id="d5" for="node" attr.name="condition" attr.type="string"/>
<key id="d4" for="node" attr.name="type" attr.type="string"/>
<key id="d3" for="graph" attr.name="severity" attr.type="string"/>
<key id="d2" for="graph" attr.name="cvss" attr.type="string"/>
<key id="d1" for="graph" attr.name="cve" attr.type="string"/>
<key id="d0" for="graph" attr.name="pointer_arithmetic" attr.type="boolean"/>
<graph edgedefault="directed"><data key="d0">True</data>
<data key="d1">CVE-2017-5510</data>
<data key="d2">6.8</data>
<data key="d3">MEDIUM</data>
<node id="WritePSDChannel">
  <data key="d4">FunctionDefinition</data>
</node>
<node id="char">
  <data key="d4">Variable</data>
</node>
<node id="y">
  <data key="d4">Variable</data>
</node>
<node id="pixels">
  <data key="d4">Variable</data>
</node>
<node id="compressed_pixels">
  <data key="d4">Variable</data>
</node>
<node id="i">
  <data key="d4">Variable</data>
</node>
<node id="PSDPackbitsEncodeImage">
  <data key="d4">FunctionCall</data>
</node>
<node id="WriteBlob">
  <data key="d4">FunctionCall</data>
</node>
<node id="deflateEnd">
  <data key="d4">FunctionCall</data>
</node>
<node id="GetVirtualPixels">
  <data key="d4">FunctionCall</data>
</node>
<node id="WriteCompressionStart">
  <data key="d4">FunctionCall</data>
</node>
<node id="DestroyQuantumInfo">
  <data key="d4">FunctionCall</data>
</node>
<node id="WritePSDOffset">
  <data key="d4">FunctionCall</data>
</node>
<node id="RelinquishMagickMemory">
  <data key="d4">FunctionCall</data>
</node>
<node id="IsImageMonochrome">
  <data key="d4">FunctionCall</data>
</node>
<node id="AcquireQuantumInfo">
  <data key="d4">FunctionCall</data>
</node>
<node id="ResetMagickMemory">
  <data key="d4">FunctionCall</data>
</node>
<node id="AcquireQuantumMemory">
  <data key="d4">FunctionCall</data>
</node>
<node id="TellBlob">
  <data key="d4">FunctionCall</data>
</node>
<node id="GetQuantumPixels">
  <data key="d4">FunctionCall</data>
</node>
<node id="ExportQuantumPixels">
  <data key="d4">FunctionCall</data>
</node>
<node id="if_0">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">separate != MagickFalse</data>
</node>
<node id="if_1">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">next_image-&gt;depth &gt; 8</data>
</node>
<node id="if_2">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">quantum_info == (QuantumInfo *</data>
</node>
<node id="if_3">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">next_image-&gt;compression == ZipCompression</data>
</node>
<node id="if_4">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">compressed_pixels == (unsigned char *</data>
</node>
<node id="if_5">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">(image_info-&gt;quality &gt; 0 &amp;&amp; image_info-&gt;quality &lt; 10</data>
</node>
<node id="if_6">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">deflateInit(&amp;stream,level</data>
</node>
<node id="if_7">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">p == (const Quantum *</data>
</node>
<node id="if_8">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">monochrome != MagickFalse</data>
</node>
<node id="if_9">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">next_image-&gt;compression == RLECompression</data>
</node>
<node id="if_10">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">next_image-&gt;compression == ZipCompression</data>
</node>
<node id="if_11">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">y == (ssize_t</data>
</node>
<node id="if_12">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">deflate(&amp;stream,flush</data>
</node>
<node id="if_13">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">length &gt; 0</data>
</node>
<node id="if_14">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">next_image-&gt;compression == ZipCompression</data>
</node>
<node id="for_15">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">y=0; y &lt; (ssize_t</data>
</node>
<node id="for_16">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">i=0; i &lt; (ssize_t</data>
</node>
<node id="while_17">
  <data key="d4">ControlStructure_while</data>
  <data key="d5">stream.avail_out == 0</data>
</node>
<edge source="WritePSDChannel" target="char">
  <data key="d6">declares</data>
</edge>
<edge source="WritePSDChannel" target="y">
  <data key="d6">declares</data>
</edge>
<edge source="WritePSDChannel" target="pixels">
  <data key="d6">declares</data>
</edge>
<edge source="WritePSDChannel" target="compressed_pixels">
  <data key="d6">declares</data>
</edge>
<edge source="WritePSDChannel" target="i">
  <data key="d6">declares</data>
</edge>
<edge source="WritePSDChannel" target="PSDPackbitsEncodeImage">
  <data key="d6">calls</data>
</edge>
<edge source="WritePSDChannel" target="WriteBlob">
  <data key="d6">calls</data>
</edge>
<edge source="WritePSDChannel" target="deflateEnd">
  <data key="d6">calls</data>
</edge>
<edge source="WritePSDChannel" target="GetVirtualPixels">
  <data key="d6">calls</data>
</edge>
<edge source="WritePSDChannel" target="WriteCompressionStart">
  <data key="d6">calls</data>
</edge>
<edge source="WritePSDChannel" target="DestroyQuantumInfo">
  <data key="d6">calls</data>
</edge>
<edge source="WritePSDChannel" target="WritePSDOffset">
  <data key="d6">calls</data>
</edge>
<edge source="WritePSDChannel" target="RelinquishMagickMemory">
  <data key="d6">calls</data>
</edge>
<edge source="WritePSDChannel" target="IsImageMonochrome">
  <data key="d6">calls</data>
</edge>
<edge source="WritePSDChannel" target="AcquireQuantumInfo">
  <data key="d6">calls</data>
</edge>
<edge source="WritePSDChannel" target="ResetMagickMemory">
  <data key="d6">calls</data>
</edge>
<edge source="WritePSDChannel" target="AcquireQuantumMemory">
  <data key="d6">calls</data>
</edge>
<edge source="WritePSDChannel" target="TellBlob">
  <data key="d6">calls</data>
</edge>
<edge source="WritePSDChannel" target="GetQuantumPixels">
  <data key="d6">calls</data>
</edge>
<edge source="WritePSDChannel" target="ExportQuantumPixels">
  <data key="d6">calls</data>
</edge>
<edge source="WritePSDChannel" target="if_0">
  <data key="d6">contains</data>
</edge>
<edge source="WritePSDChannel" target="if_1">
  <data key="d6">contains</data>
</edge>
<edge source="WritePSDChannel" target="if_2">
  <data key="d6">contains</data>
</edge>
<edge source="WritePSDChannel" target="if_3">
  <data key="d6">contains</data>
</edge>
<edge source="WritePSDChannel" target="if_4">
  <data key="d6">contains</data>
</edge>
<edge source="WritePSDChannel" target="if_5">
  <data key="d6">contains</data>
</edge>
<edge source="WritePSDChannel" target="if_6">
  <data key="d6">contains</data>
</edge>
<edge source="WritePSDChannel" target="if_7">
  <data key="d6">contains</data>
</edge>
<edge source="WritePSDChannel" target="if_8">
  <data key="d6">contains</data>
</edge>
<edge source="WritePSDChannel" target="if_9">
  <data key="d6">contains</data>
</edge>
<edge source="WritePSDChannel" target="if_10">
  <data key="d6">contains</data>
</edge>
<edge source="WritePSDChannel" target="if_11">
  <data key="d6">contains</data>
</edge>
<edge source="WritePSDChannel" target="if_12">
  <data key="d6">contains</data>
</edge>
<edge source="WritePSDChannel" target="if_13">
  <data key="d6">contains</data>
</edge>
<edge source="WritePSDChannel" target="if_14">
  <data key="d6">contains</data>
</edge>
<edge source="WritePSDChannel" target="for_15">
  <data key="d6">contains</data>
</edge>
<edge source="WritePSDChannel" target="for_16">
  <data key="d6">contains</data>
</edge>
<edge source="WritePSDChannel" target="while_17">
  <data key="d6">contains</data>
</edge>
<edge source="char" target="if_4">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="char" target="WritePSDChannel">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="char" target="if_1">
  <data key="d6">used_in_body</data>
</edge>
<edge source="char" target="if_2">
  <data key="d6">used_in_body</data>
</edge>
<edge source="char" target="if_3">
  <data key="d6">used_in_body</data>
</edge>
<edge source="char" target="if_12">
  <data key="d6">used_in_body</data>
</edge>
<edge source="char" target="if_13">
  <data key="d6">used_in_body</data>
</edge>
<edge source="char" target="if_14">
  <data key="d6">used_in_body</data>
</edge>
<edge source="char" target="while_17">
  <data key="d6">used_in_body</data>
</edge>
<edge source="y" target="if_5">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="y" target="if_11">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="y" target="for_15">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="pixels" target="if_4">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="pixels" target="WritePSDChannel">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="pixels" target="PSDPackbitsEncodeImage">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="pixels" target="WriteBlob">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="pixels" target="RelinquishMagickMemory">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="pixels" target="AcquireQuantumMemory">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="pixels" target="if_7">
  <data key="d6">used_in_body</data>
</edge>
<edge source="pixels" target="if_8">
  <data key="d6">used_in_body</data>
</edge>
<edge source="pixels" target="if_9">
  <data key="d6">used_in_body</data>
</edge>
<edge source="pixels" target="if_10">
  <data key="d6">used_in_body</data>
</edge>
<edge source="pixels" target="for_15">
  <data key="d6">used_in_body</data>
</edge>
<edge source="pixels" target="for_16">
  <data key="d6">used_in_body</data>
</edge>
<edge source="compressed_pixels" target="if_4">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="compressed_pixels" target="WriteBlob">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="compressed_pixels" target="RelinquishMagickMemory">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="compressed_pixels" target="AcquireQuantumMemory">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="compressed_pixels" target="if_1">
  <data key="d6">used_in_body</data>
</edge>
<edge source="compressed_pixels" target="if_2">
  <data key="d6">used_in_body</data>
</edge>
<edge source="compressed_pixels" target="if_3">
  <data key="d6">used_in_body</data>
</edge>
<edge source="compressed_pixels" target="if_10">
  <data key="d6">used_in_body</data>
</edge>
<edge source="compressed_pixels" target="if_11">
  <data key="d6">used_in_body</data>
</edge>
<edge source="compressed_pixels" target="if_12">
  <data key="d6">used_in_body</data>
</edge>
<edge source="compressed_pixels" target="if_13">
  <data key="d6">used_in_body</data>
</edge>
<edge source="compressed_pixels" target="if_14">
  <data key="d6">used_in_body</data>
</edge>
<edge source="compressed_pixels" target="for_15">
  <data key="d6">used_in_body</data>
</edge>
<edge source="compressed_pixels" target="while_17">
  <data key="d6">used_in_body</data>
</edge>
<edge source="i" target="if_0">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_1">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_2">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_3">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_4">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_5">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_6">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_8">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_9">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_10">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_11">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="if_14">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="for_15">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="for_16">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="i" target="while_17">
  <data key="d6">used_in_condition</data>
</edge>
</graph></graphml>