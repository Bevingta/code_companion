<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"><key id="d6" for="edge" attr.name="type" attr.type="string"/>
<key id="d5" for="node" attr.name="condition" attr.type="string"/>
<key id="d4" for="node" attr.name="type" attr.type="string"/>
<key id="d3" for="graph" attr.name="severity" attr.type="string"/>
<key id="d2" for="graph" attr.name="cvss" attr.type="string"/>
<key id="d1" for="graph" attr.name="cve" attr.type="string"/>
<key id="d0" for="graph" attr.name="pointer_arithmetic" attr.type="boolean"/>
<graph edgedefault="directed"><data key="d0">True</data>
<data key="d1">CVE-2017-9143</data>
<data key="d2">4.3</data>
<data key="d3">MEDIUM</data>
<node id="ReadARTImage">
  <data key="d4">FunctionDefinition</data>
</node>
<node id="pixels">
  <data key="d4">Variable</data>
</node>
<node id="length">
  <data key="d4">Variable</data>
</node>
<node id="ImportQuantumPixels">
  <data key="d4">FunctionCall</data>
</node>
<node id="SetQuantumImageType">
  <data key="d4">FunctionCall</data>
</node>
<node id="assert">
  <data key="d4">FunctionCall</data>
</node>
<node id="CloseBlob">
  <data key="d4">FunctionCall</data>
</node>
<node id="DestroyQuantumInfo">
  <data key="d4">FunctionCall</data>
</node>
<node id="SetImageExtent">
  <data key="d4">FunctionCall</data>
</node>
<node id="SetImageColorspace">
  <data key="d4">FunctionCall</data>
</node>
<node id="ReadBlobStream">
  <data key="d4">FunctionCall</data>
</node>
<node id="AcquireQuantumInfo">
  <data key="d4">FunctionCall</data>
</node>
<node id="InheritException">
  <data key="d4">FunctionCall</data>
</node>
<node id="GetQuantumExtent">
  <data key="d4">FunctionCall</data>
</node>
<node id="AcquireImage">
  <data key="d4">FunctionCall</data>
</node>
<node id="SetImageProgress">
  <data key="d4">FunctionCall</data>
</node>
<node id="ReadBlobLSBShort">
  <data key="d4">FunctionCall</data>
</node>
<node id="OpenBlob">
  <data key="d4">FunctionCall</data>
</node>
<node id="DestroyImageList">
  <data key="d4">FunctionCall</data>
</node>
<node id="QueueAuthenticPixels">
  <data key="d4">FunctionCall</data>
</node>
<node id="if_0">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">image_info-&gt;debug != MagickFalse</data>
</node>
<node id="if_1">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">status == MagickFalse</data>
</node>
<node id="if_2">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">(image-&gt;columns == 0</data>
</node>
<node id="if_3">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">AcquireImageColormap(image,2</data>
</node>
<node id="if_4">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">image_info-&gt;ping != MagickFalse</data>
</node>
<node id="if_5">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">status == MagickFalse</data>
</node>
<node id="if_6">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">quantum_info == (QuantumInfo *</data>
</node>
<node id="if_7">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">q == (PixelPacket *</data>
</node>
<node id="if_8">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">count != (ssize_t</data>
</node>
<node id="if_9">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">SyncAuthenticPixels(image,exception</data>
</node>
<node id="if_10">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">status == MagickFalse</data>
</node>
<node id="if_11">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">EOFBlob(image</data>
</node>
<node id="for_12">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">y=0; y &lt; (ssize_t</data>
</node>
<edge source="ReadARTImage" target="pixels">
  <data key="d6">declares</data>
</edge>
<edge source="ReadARTImage" target="length">
  <data key="d6">declares</data>
</edge>
<edge source="ReadARTImage" target="ImportQuantumPixels">
  <data key="d6">calls</data>
</edge>
<edge source="ReadARTImage" target="SetQuantumImageType">
  <data key="d6">calls</data>
</edge>
<edge source="ReadARTImage" target="assert">
  <data key="d6">calls</data>
</edge>
<edge source="ReadARTImage" target="CloseBlob">
  <data key="d6">calls</data>
</edge>
<edge source="ReadARTImage" target="DestroyQuantumInfo">
  <data key="d6">calls</data>
</edge>
<edge source="ReadARTImage" target="SetImageExtent">
  <data key="d6">calls</data>
</edge>
<edge source="ReadARTImage" target="SetImageColorspace">
  <data key="d6">calls</data>
</edge>
<edge source="ReadARTImage" target="ReadBlobStream">
  <data key="d6">calls</data>
</edge>
<edge source="ReadARTImage" target="AcquireQuantumInfo">
  <data key="d6">calls</data>
</edge>
<edge source="ReadARTImage" target="InheritException">
  <data key="d6">calls</data>
</edge>
<edge source="ReadARTImage" target="GetQuantumExtent">
  <data key="d6">calls</data>
</edge>
<edge source="ReadARTImage" target="AcquireImage">
  <data key="d6">calls</data>
</edge>
<edge source="ReadARTImage" target="SetImageProgress">
  <data key="d6">calls</data>
</edge>
<edge source="ReadARTImage" target="ReadBlobLSBShort">
  <data key="d6">calls</data>
</edge>
<edge source="ReadARTImage" target="OpenBlob">
  <data key="d6">calls</data>
</edge>
<edge source="ReadARTImage" target="DestroyImageList">
  <data key="d6">calls</data>
</edge>
<edge source="ReadARTImage" target="QueueAuthenticPixels">
  <data key="d6">calls</data>
</edge>
<edge source="ReadARTImage" target="if_0">
  <data key="d6">contains</data>
</edge>
<edge source="ReadARTImage" target="if_1">
  <data key="d6">contains</data>
</edge>
<edge source="ReadARTImage" target="if_2">
  <data key="d6">contains</data>
</edge>
<edge source="ReadARTImage" target="if_3">
  <data key="d6">contains</data>
</edge>
<edge source="ReadARTImage" target="if_4">
  <data key="d6">contains</data>
</edge>
<edge source="ReadARTImage" target="if_5">
  <data key="d6">contains</data>
</edge>
<edge source="ReadARTImage" target="if_6">
  <data key="d6">contains</data>
</edge>
<edge source="ReadARTImage" target="if_7">
  <data key="d6">contains</data>
</edge>
<edge source="ReadARTImage" target="if_8">
  <data key="d6">contains</data>
</edge>
<edge source="ReadARTImage" target="if_9">
  <data key="d6">contains</data>
</edge>
<edge source="ReadARTImage" target="if_10">
  <data key="d6">contains</data>
</edge>
<edge source="ReadARTImage" target="if_11">
  <data key="d6">contains</data>
</edge>
<edge source="ReadARTImage" target="for_12">
  <data key="d6">contains</data>
</edge>
<edge source="pixels" target="if_6">
  <data key="d6">used_in_body</data>
</edge>
<edge source="pixels" target="for_12">
  <data key="d6">used_in_body</data>
</edge>
<edge source="length" target="ReadBlobStream">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="length" target="if_6">
  <data key="d6">used_in_body</data>
</edge>
<edge source="length" target="for_12">
  <data key="d6">used_in_body</data>
</edge>
</graph></graphml>