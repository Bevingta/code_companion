<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"><key id="d7" for="edge" attr.name="type" attr.type="string"/>
<key id="d6" for="node" attr.name="condition" attr.type="string"/>
<key id="d5" for="node" attr.name="type" attr.type="string"/>
<key id="d4" for="graph" attr.name="severity" attr.type="string"/>
<key id="d3" for="graph" attr.name="cvss" attr.type="string"/>
<key id="d2" for="graph" attr.name="cve" attr.type="string"/>
<key id="d1" for="graph" attr.name="format_string_vulnerability" attr.type="boolean"/>
<key id="d0" for="graph" attr.name="potential_buffer_overflow" attr.type="boolean"/>
<graph edgedefault="directed"><data key="d0">True</data>
<data key="d1">True</data>
<data key="d2">CVE-2016-10030</data>
<data key="d3">7.6</data>
<data key="d4">HIGH</data>
<node id="_prolog_error">
  <data key="d5">FunctionDefinition</data>
</node>
<node id="fd">
  <data key="d5">Variable</data>
</node>
<node id="tmp_name">
  <data key="d5">Variable</data>
</node>
<node id="req">
  <data key="d5">Variable</data>
</node>
<node id="fmt_char">
  <data key="d5">Variable</data>
</node>
<node id="rc">
  <data key="d5">Variable</data>
</node>
<node id="safe_write">
  <data key="d5">FunctionCall</data>
</node>
<node id="error">
  <data key="d5">FunctionCall</data>
</node>
<node id="snprintf">
  <data key="d5">FunctionCall</data>
</node>
<node id="close">
  <data key="d5">FunctionCall</data>
</node>
<node id="strncpy">
  <data key="d5">FunctionCall</data>
</node>
<node id="if_0">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">req-&gt;std_err || req-&gt;std_out</data>
</node>
<node id="if_1">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">req-&gt;std_err</data>
</node>
<node id="if_2">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">(fmt_char = strchr(err_name, (int</data>
</node>
<node id="if_3">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">err_name_ptr[0] == '/'</data>
</node>
<node id="if_4">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">req-&gt;work_dir</data>
</node>
<node id="if_5">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">(fd = open(path_name, (O_CREAT|O_APPEND|O_WRONLY</data>
</node>
<node id="if_6">
  <data key="d5">ControlStructure_if</data>
  <data key="d6">fchown(fd, (uid_t</data>
</node>
<edge source="_prolog_error" target="fd">
  <data key="d7">declares</data>
</edge>
<edge source="_prolog_error" target="tmp_name">
  <data key="d7">declares</data>
</edge>
<edge source="_prolog_error" target="req">
  <data key="d7">declares</data>
</edge>
<edge source="_prolog_error" target="fmt_char">
  <data key="d7">declares</data>
</edge>
<edge source="_prolog_error" target="rc">
  <data key="d7">declares</data>
</edge>
<edge source="_prolog_error" target="safe_write">
  <data key="d7">calls</data>
</edge>
<edge source="_prolog_error" target="error">
  <data key="d7">calls</data>
</edge>
<edge source="_prolog_error" target="snprintf">
  <data key="d7">calls</data>
</edge>
<edge source="_prolog_error" target="close">
  <data key="d7">calls</data>
</edge>
<edge source="_prolog_error" target="strncpy">
  <data key="d7">calls</data>
</edge>
<edge source="_prolog_error" target="if_0">
  <data key="d7">contains</data>
</edge>
<edge source="_prolog_error" target="if_1">
  <data key="d7">contains</data>
</edge>
<edge source="_prolog_error" target="if_2">
  <data key="d7">contains</data>
</edge>
<edge source="_prolog_error" target="if_3">
  <data key="d7">contains</data>
</edge>
<edge source="_prolog_error" target="if_4">
  <data key="d7">contains</data>
</edge>
<edge source="_prolog_error" target="if_5">
  <data key="d7">contains</data>
</edge>
<edge source="_prolog_error" target="if_6">
  <data key="d7">contains</data>
</edge>
<edge source="fd" target="if_5">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="fd" target="if_6">
  <data key="d7">used_in_body</data>
</edge>
<edge source="fd" target="safe_write">
  <data key="d7">used_as_parameter</data>
</edge>
<edge source="fd" target="close">
  <data key="d7">used_as_parameter</data>
</edge>
<edge source="tmp_name" target="snprintf">
  <data key="d7">used_as_parameter</data>
</edge>
<edge source="tmp_name" target="strncpy">
  <data key="d7">used_as_parameter</data>
</edge>
<edge source="tmp_name" target="if_0">
  <data key="d7">used_in_body</data>
</edge>
<edge source="tmp_name" target="if_1">
  <data key="d7">used_in_body</data>
</edge>
<edge source="tmp_name" target="if_2">
  <data key="d7">used_in_body</data>
</edge>
<edge source="req" target="if_0">
  <data key="d7">used_in_body</data>
</edge>
<edge source="req" target="if_1">
  <data key="d7">used_in_body</data>
</edge>
<edge source="req" target="if_4">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="req" target="error">
  <data key="d7">used_as_parameter</data>
</edge>
<edge source="req" target="snprintf">
  <data key="d7">used_as_parameter</data>
</edge>
<edge source="req" target="_prolog_error">
  <data key="d7">used_as_parameter</data>
</edge>
<edge source="req" target="strncpy">
  <data key="d7">used_as_parameter</data>
</edge>
<edge source="req" target="if_2">
  <data key="d7">used_in_body</data>
</edge>
<edge source="req" target="if_6">
  <data key="d7">used_in_body</data>
</edge>
<edge source="fmt_char" target="if_2">
  <data key="d7">used_in_body</data>
</edge>
<edge source="fmt_char" target="if_0">
  <data key="d7">used_in_body</data>
</edge>
<edge source="fmt_char" target="if_1">
  <data key="d7">used_in_body</data>
</edge>
<edge source="rc" target="if_2">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="rc" target="error">
  <data key="d7">used_as_parameter</data>
</edge>
<edge source="rc" target="_prolog_error">
  <data key="d7">used_as_parameter</data>
</edge>
</graph></graphml>