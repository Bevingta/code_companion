<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"><key id="d7" for="edge" attr.name="type" attr.type="string"/>
<key id="d6" for="node" attr.name="condition" attr.type="string"/>
<key id="d5" for="node" attr.name="type" attr.type="string"/>
<key id="d4" for="graph" attr.name="severity" attr.type="string"/>
<key id="d3" for="graph" attr.name="cvss" attr.type="string"/>
<key id="d2" for="graph" attr.name="cve" attr.type="string"/>
<key id="d1" for="graph" attr.name="memory_allocation" attr.type="boolean"/>
<key id="d0" for="graph" attr.name="potential_buffer_overflow" attr.type="boolean"/>
<graph edgedefault="directed"><data key="d0">True</data>
<data key="d1">True</data>
<data key="d2">CVE-2018-7730</data>
<data key="d3">4.3</data>
<data key="d4">MEDIUM</data>
<node id="ParseFileResources">
  <data key="d5">FunctionDefinition</data>
</node>
<node id="nameBuffer">
  <data key="d5">Variable</data>
</node>
<node id="kMinPSIRSize">
  <data key="d5">Variable</data>
</node>
<node id="DeleteExistingInfo">
  <data key="d5">FunctionCall</data>
</node>
<node id="ReadUns16_BE">
  <data key="d5">FunctionCall</data>
</node>
<node id="insert">
  <data key="d5">FunctionCall</data>
</node>
<node id="ReadAll">
  <data key="d5">FunctionCall</data>
</node>
<node id="find">
  <data key="d5">FunctionCall</data>
</node>
<node id="ReadUns32_BE">
  <data key="d5">FunctionCall</data>
</node>
<node id="ReadUns8">
  <data key="d5">FunctionCall</data>
</node>
<node id="malloc">
  <data key="d5">FunctionCall</data>
</node>
<node id="Offset">
  <data key="d5">FunctionCall</data>
</node>
<node id="Seek">
  <data key="d5">FunctionCall</data>
</node>
<node id="newInfo">
  <data key="d5">FunctionCall</data>
</node>
<node id="memcpy">
  <data key="d5">FunctionCall</data>
</node>
<node id="if_0">
  <data key="d5">ControlStructure_if</data>
  <data key="d6"> length == 0 </data>
</node>
<node id="if_1">
  <data key="d5">ControlStructure_if</data>
  <data key="d6"> ! XIO::CheckFileSpace ( fileRef, kMinPSIRSize </data>
</node>
<node id="if_2">
  <data key="d5">ControlStructure_if</data>
  <data key="d6"> ! XIO::CheckFileSpace ( fileRef, paddedLen+4 </data>
</node>
<node id="if_3">
  <data key="d5">ControlStructure_if</data>
  <data key="d6"> ! XIO::CheckFileSpace ( fileRef, dataTotal </data>
</node>
<node id="if_4">
  <data key="d5">ControlStructure_if</data>
  <data key="d6"> rsrcPos == this-&gt;imgRsrcs.end(</data>
</node>
<node id="if_5">
  <data key="d5">ControlStructure_if</data>
  <data key="d6"> (rsrcPos-&gt;second.dataLen == 0</data>
</node>
<node id="if_6">
  <data key="d5">ControlStructure_if</data>
  <data key="d6"> nameLen &gt; 0 </data>
</node>
<node id="if_7">
  <data key="d5">ControlStructure_if</data>
  <data key="d6"> rsrcPtr-&gt;rsrcName == 0 </data>
</node>
<node id="if_8">
  <data key="d5">ControlStructure_if</data>
  <data key="d6"> ! IsMetadataImgRsrc ( id </data>
</node>
<node id="if_9">
  <data key="d5">ControlStructure_if</data>
  <data key="d6"> rsrcPtr-&gt;dataPtr == 0 </data>
</node>
<node id="while_10">
  <data key="d5">ControlStructure_while</data>
  <data key="d6"> fileRef-&gt;Offset(</data>
</node>
<edge source="ParseFileResources" target="nameBuffer">
  <data key="d7">declares</data>
</edge>
<edge source="ParseFileResources" target="kMinPSIRSize">
  <data key="d7">declares</data>
</edge>
<edge source="ParseFileResources" target="DeleteExistingInfo">
  <data key="d7">calls</data>
</edge>
<edge source="ParseFileResources" target="ReadUns16_BE">
  <data key="d7">calls</data>
</edge>
<edge source="ParseFileResources" target="insert">
  <data key="d7">calls</data>
</edge>
<edge source="ParseFileResources" target="ReadAll">
  <data key="d7">calls</data>
</edge>
<edge source="ParseFileResources" target="find">
  <data key="d7">calls</data>
</edge>
<edge source="ParseFileResources" target="ReadUns32_BE">
  <data key="d7">calls</data>
</edge>
<edge source="ParseFileResources" target="ReadUns8">
  <data key="d7">calls</data>
</edge>
<edge source="ParseFileResources" target="malloc">
  <data key="d7">calls</data>
</edge>
<edge source="ParseFileResources" target="Offset">
  <data key="d7">calls</data>
</edge>
<edge source="ParseFileResources" target="Seek">
  <data key="d7">calls</data>
</edge>
<edge source="ParseFileResources" target="newInfo">
  <data key="d7">calls</data>
</edge>
<edge source="ParseFileResources" target="memcpy">
  <data key="d7">calls</data>
</edge>
<edge source="ParseFileResources" target="if_0">
  <data key="d7">contains</data>
</edge>
<edge source="ParseFileResources" target="if_1">
  <data key="d7">contains</data>
</edge>
<edge source="ParseFileResources" target="if_2">
  <data key="d7">contains</data>
</edge>
<edge source="ParseFileResources" target="if_3">
  <data key="d7">contains</data>
</edge>
<edge source="ParseFileResources" target="if_4">
  <data key="d7">contains</data>
</edge>
<edge source="ParseFileResources" target="if_5">
  <data key="d7">contains</data>
</edge>
<edge source="ParseFileResources" target="if_6">
  <data key="d7">contains</data>
</edge>
<edge source="ParseFileResources" target="if_7">
  <data key="d7">contains</data>
</edge>
<edge source="ParseFileResources" target="if_8">
  <data key="d7">contains</data>
</edge>
<edge source="ParseFileResources" target="if_9">
  <data key="d7">contains</data>
</edge>
<edge source="ParseFileResources" target="while_10">
  <data key="d7">contains</data>
</edge>
<edge source="nameBuffer" target="ReadAll">
  <data key="d7">used_as_parameter</data>
</edge>
<edge source="nameBuffer" target="if_0">
  <data key="d7">used_in_body</data>
</edge>
<edge source="nameBuffer" target="if_6">
  <data key="d7">used_in_body</data>
</edge>
<edge source="nameBuffer" target="while_10">
  <data key="d7">used_in_body</data>
</edge>
<edge source="kMinPSIRSize" target="if_1">
  <data key="d7">used_in_condition</data>
</edge>
<edge source="kMinPSIRSize" target="if_0">
  <data key="d7">used_in_body</data>
</edge>
<edge source="kMinPSIRSize" target="while_10">
  <data key="d7">used_in_body</data>
</edge>
</graph></graphml>