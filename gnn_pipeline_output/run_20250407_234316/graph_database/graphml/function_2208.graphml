<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"><key id="d6" for="edge" attr.name="type" attr.type="string"/>
<key id="d5" for="node" attr.name="condition" attr.type="string"/>
<key id="d4" for="node" attr.name="type" attr.type="string"/>
<key id="d3" for="graph" attr.name="severity" attr.type="string"/>
<key id="d2" for="graph" attr.name="cvss" attr.type="string"/>
<key id="d1" for="graph" attr.name="cve" attr.type="string"/>
<key id="d0" for="graph" attr.name="pointer_arithmetic" attr.type="boolean"/>
<graph edgedefault="directed"><data key="d0">True</data>
<data key="d1">CVE-2018-1999014</data>
<data key="d2">4.3</data>
<data key="d3">MEDIUM</data>
<node id="mxf_parse_structural_metadata">
  <data key="d4">FunctionDefinition</data>
</node>
<node id="coded_width">
  <data key="d4">Variable</data>
</node>
<node id="type">
  <data key="d4">Variable</data>
</node>
<node id="flags">
  <data key="d4">Variable</data>
</node>
<node id="mxf_resolve_strong_ref">
  <data key="d4">FunctionCall</data>
</node>
<node id="mxf_get_wrapping_kind">
  <data key="d4">FunctionCall</data>
</node>
<node id="mxf_parse_package_comments">
  <data key="d4">FunctionCall</data>
</node>
<node id="av_dict_set_int">
  <data key="d4">FunctionCall</data>
</node>
<node id="packages">
  <data key="d4">FunctionCall</data>
</node>
<node id="memcpy">
  <data key="d4">FunctionCall</data>
</node>
<node id="avpriv_request_sample">
  <data key="d4">FunctionCall</data>
</node>
<node id="avformat_new_stream">
  <data key="d4">FunctionCall</data>
</node>
<node id="mxf_parse_physical_source_package">
  <data key="d4">FunctionCall</data>
</node>
<node id="avcodec_get_type">
  <data key="d4">FunctionCall</data>
</node>
<node id="avpriv_set_pts_info">
  <data key="d4">FunctionCall</data>
</node>
<node id="mxf_add_timecode_metadata">
  <data key="d4">FunctionCall</data>
</node>
<node id="mxf_is_intra_only">
  <data key="d4">FunctionCall</data>
</node>
<node id="av_log">
  <data key="d4">FunctionCall</data>
</node>
<node id="mxf_get_codec_ul">
  <data key="d4">FunctionCall</data>
</node>
<node id="ff_generate_avci_extradata">
  <data key="d4">FunctionCall</data>
</node>
<node id="mxf_resolve_multidescriptor">
  <data key="d4">FunctionCall</data>
</node>
<node id="mxf_resolve_sourceclip">
  <data key="d4">FunctionCall</data>
</node>
<node id="mxf_resolve_source_package">
  <data key="d4">FunctionCall</data>
</node>
<node id="mxf_add_umid_metadata">
  <data key="d4">FunctionCall</data>
</node>
<node id="PRINT_KEY">
  <data key="d4">FunctionCall</data>
</node>
<node id="AVERROR">
  <data key="d4">FunctionCall</data>
</node>
<node id="if_0">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">material_package</data>
</node>
<node id="if_1">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!material_package</data>
</node>
<node id="if_2">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">material_package-&gt;name &amp;&amp; material_package-&gt;name[0]</data>
</node>
<node id="if_3">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!(material_track = mxf_resolve_strong_ref(mxf, &amp;material_package-&gt;tracks_refs[i], Track</data>
</node>
<node id="if_4">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">(component = mxf_resolve_strong_ref(mxf, &amp;material_track-&gt;sequence_ref, TimecodeComponent</data>
</node>
<node id="if_5">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">av_timecode_init(&amp;tc, mxf_tc-&gt;rate, flags, mxf_tc-&gt;start_frame, mxf-&gt;fc</data>
</node>
<node id="if_6">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!(material_track-&gt;sequence = mxf_resolve_strong_ref(mxf, &amp;material_track-&gt;sequence_ref, Sequence</data>
</node>
<node id="if_7">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!component</data>
</node>
<node id="if_8">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">av_timecode_init(&amp;tc, mxf_tc-&gt;rate, flags, mxf_tc-&gt;start_frame, mxf-&gt;fc</data>
</node>
<node id="if_9">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">material_track-&gt;sequence-&gt;structural_components_count &gt; 1</data>
</node>
<node id="if_10">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!component</data>
</node>
<node id="if_11">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!source_package</data>
</node>
<node id="if_12">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!(temp_track = mxf_resolve_strong_ref(mxf, &amp;source_package-&gt;tracks_refs[k], Track</data>
</node>
<node id="if_13">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">temp_track-&gt;track_id == component-&gt;source_track_id</data>
</node>
<node id="if_14">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!source_track</data>
</node>
<node id="if_15">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!(essence_data = mxf_resolve_strong_ref(mxf, &amp;mxf-&gt;essence_container_data_refs[k], EssenceContainerData</data>
</node>
<node id="if_16">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!memcmp(component-&gt;source_package_ul, essence_data-&gt;package_ul, sizeof(UID</data>
</node>
<node id="if_17">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">source_track &amp;&amp; component</data>
</node>
<node id="if_18">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!source_track || !component || !source_package</data>
</node>
<node id="if_19">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">(ret = mxf_add_metadata_stream(mxf, material_track</data>
</node>
<node id="if_20">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!(source_track-&gt;sequence = mxf_resolve_strong_ref(mxf, &amp;source_track-&gt;sequence_ref, Sequence</data>
</node>
<node id="if_21">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">memcmp(material_track-&gt;sequence-&gt;data_definition_ul, source_track-&gt;sequence-&gt;data_definition_ul, 16</data>
</node>
<node id="if_22">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!st</data>
</node>
<node id="if_23">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">descriptor &amp;&amp; descriptor-&gt;duration != AV_NOPTS_VALUE</data>
</node>
<node id="if_24">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">st-&gt;duration == -1</data>
</node>
<node id="if_25">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">material_track-&gt;edit_rate.num &lt;= 0 ||
            material_track-&gt;edit_rate.den &lt;= 0</data>
</node>
<node id="if_26">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!descriptor</data>
</node>
<node id="if_27">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">source_track-&gt;wrapping == UnknownWrapped</data>
</node>
<node id="if_28">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">IS_KLV_KEY(essence_container_ul, mxf_encrypted_essence_container</data>
</node>
<node id="if_29">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">metadata-&gt;type == CryptoContext</data>
</node>
<node id="if_30">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">st-&gt;codecpar-&gt;codec_id == AV_CODEC_ID_NONE</data>
</node>
<node id="if_31">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!(k+1 &amp; 19</data>
</node>
<node id="if_32">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">source_package-&gt;name &amp;&amp; source_package-&gt;name[0]</data>
</node>
<node id="if_33">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">material_track-&gt;name &amp;&amp; material_track-&gt;name[0]</data>
</node>
<node id="if_34">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">st-&gt;codecpar-&gt;codec_type == AVMEDIA_TYPE_VIDEO</data>
</node>
<node id="if_35">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">st-&gt;codecpar-&gt;codec_id == AV_CODEC_ID_NONE</data>
</node>
<node id="if_36">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">(descriptor-&gt;video_line_map[0] &gt; 0</data>
</node>
<node id="if_37">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">(descriptor-&gt;video_line_map[0] + descriptor-&gt;video_line_map[1]</data>
</node>
<node id="if_38">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">st-&gt;codecpar-&gt;codec_id == AV_CODEC_ID_RAWVIDEO</data>
</node>
<node id="if_39">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">st-&gt;codecpar-&gt;format == AV_PIX_FMT_NONE</data>
</node>
<node id="if_40">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">st-&gt;codecpar-&gt;format== AV_PIX_FMT_NONE</data>
</node>
<node id="if_41">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!st-&gt;codecpar-&gt;codec_tag</data>
</node>
<node id="if_42">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">descriptor-&gt;horiz_subsampling == 2 &amp;&amp;
                                descriptor-&gt;vert_subsampling == 1 &amp;&amp;
                                descriptor-&gt;component_depth == 8</data>
</node>
<node id="if_43">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">material_track-&gt;sequence-&gt;origin</data>
</node>
<node id="if_44">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">source_track-&gt;sequence-&gt;origin</data>
</node>
<node id="if_45">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">descriptor-&gt;aspect_ratio.num &amp;&amp; descriptor-&gt;aspect_ratio.den</data>
</node>
<node id="if_46">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">st-&gt;codecpar-&gt;codec_type == AVMEDIA_TYPE_AUDIO</data>
</node>
<node id="if_47">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">st-&gt;codecpar-&gt;codec_id == AV_CODEC_ID_NONE || (st-&gt;codecpar-&gt;codec_id == AV_CODEC_ID_PCM_ALAW &amp;&amp; (enum AVCodecID</data>
</node>
<node id="if_48">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">descriptor-&gt;sample_rate.den &gt; 0</data>
</node>
<node id="if_49">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">st-&gt;duration != AV_NOPTS_VALUE</data>
</node>
<node id="if_50">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">st-&gt;codecpar-&gt;codec_id == AV_CODEC_ID_PCM_S16LE</data>
</node>
<node id="if_51">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">descriptor-&gt;bits_per_sample &gt; 16 &amp;&amp; descriptor-&gt;bits_per_sample &lt;= 24</data>
</node>
<node id="if_52">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">descriptor-&gt;bits_per_sample == 32</data>
</node>
<node id="if_53">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">st-&gt;codecpar-&gt;codec_id == AV_CODEC_ID_PCM_S16BE</data>
</node>
<node id="if_54">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">descriptor-&gt;bits_per_sample &gt; 16 &amp;&amp; descriptor-&gt;bits_per_sample &lt;= 24</data>
</node>
<node id="if_55">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">descriptor-&gt;bits_per_sample == 32</data>
</node>
<node id="if_56">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">st-&gt;codecpar-&gt;codec_id == AV_CODEC_ID_MP2</data>
</node>
<node id="if_57">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">st-&gt;codecpar-&gt;codec_type == AVMEDIA_TYPE_DATA</data>
</node>
<node id="if_58">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">st-&gt;codecpar-&gt;codec_id == AV_CODEC_ID_NONE</data>
</node>
<node id="if_59">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">type == AVMEDIA_TYPE_SUBTITLE</data>
</node>
<node id="if_60">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">container_ul-&gt;desc</data>
</node>
<node id="if_61">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">descriptor-&gt;extradata</data>
</node>
<node id="if_62">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">!ff_alloc_extradata(st-&gt;codecpar, descriptor-&gt;extradata_size</data>
</node>
<node id="if_63">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">st-&gt;codecpar-&gt;codec_id == AV_CODEC_ID_H264</data>
</node>
<node id="if_64">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">coded_width</data>
</node>
<node id="if_65">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">ret &lt; 0</data>
</node>
<node id="if_66">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">st-&gt;codecpar-&gt;codec_type != AVMEDIA_TYPE_DATA &amp;&amp; source_track-&gt;wrapping != FrameWrapped</data>
</node>
<node id="for_67">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">i = 0; i &lt; mxf-&gt;packages_count; i++</data>
</node>
<node id="for_68">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">i = 0; i &lt; material_package-&gt;tracks_count; i++</data>
</node>
<node id="for_69">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">j = 0; j &lt; material_track-&gt;sequence-&gt;structural_components_count; j++</data>
</node>
<node id="for_70">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">j = 0; j &lt; material_track-&gt;sequence-&gt;structural_components_count; j++</data>
</node>
<node id="for_71">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">k = 0; k &lt; source_package-&gt;tracks_count; k++</data>
</node>
<node id="for_72">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">k = 0; k &lt; mxf-&gt;essence_container_data_count; k++</data>
</node>
<node id="for_73">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">k = 0; k &lt; mxf-&gt;metadata_sets_count; k++</data>
</node>
<node id="for_74">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">k = 0; k &lt; 16; k++</data>
</node>
<node id="switch_75">
  <data key="d4">ControlStructure_switch</data>
  <data key="d5">descriptor-&gt;frame_layout</data>
</node>
<node id="switch_76">
  <data key="d4">ControlStructure_switch</data>
  <data key="d5">descriptor-&gt;field_dominance</data>
</node>
<node id="switch_77">
  <data key="d4">ControlStructure_switch</data>
  <data key="d5">descriptor-&gt;field_dominance</data>
</node>
<edge source="mxf_parse_structural_metadata" target="coded_width">
  <data key="d6">declares</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="type">
  <data key="d6">declares</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="flags">
  <data key="d6">declares</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="mxf_resolve_strong_ref">
  <data key="d6">calls</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="mxf_get_wrapping_kind">
  <data key="d6">calls</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="mxf_parse_package_comments">
  <data key="d6">calls</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="av_dict_set_int">
  <data key="d6">calls</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="packages">
  <data key="d6">calls</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="memcpy">
  <data key="d6">calls</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="avpriv_request_sample">
  <data key="d6">calls</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="avformat_new_stream">
  <data key="d6">calls</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="mxf_parse_physical_source_package">
  <data key="d6">calls</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="avcodec_get_type">
  <data key="d6">calls</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="avpriv_set_pts_info">
  <data key="d6">calls</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="mxf_add_timecode_metadata">
  <data key="d6">calls</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="mxf_is_intra_only">
  <data key="d6">calls</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="av_log">
  <data key="d6">calls</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="mxf_get_codec_ul">
  <data key="d6">calls</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="ff_generate_avci_extradata">
  <data key="d6">calls</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="mxf_resolve_multidescriptor">
  <data key="d6">calls</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="mxf_resolve_sourceclip">
  <data key="d6">calls</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="mxf_resolve_source_package">
  <data key="d6">calls</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="mxf_add_umid_metadata">
  <data key="d6">calls</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="PRINT_KEY">
  <data key="d6">calls</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="AVERROR">
  <data key="d6">calls</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="if_0">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="if_1">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="if_2">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="if_3">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="if_4">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="if_5">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="if_6">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="if_7">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="if_8">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="if_9">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="if_10">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="if_11">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="if_12">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="if_13">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="if_14">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="if_15">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="if_16">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="if_17">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="if_18">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="if_19">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="if_20">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="if_21">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="if_22">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="if_23">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="if_24">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="if_25">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="if_26">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="if_27">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="if_28">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="if_29">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="if_30">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="if_31">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="if_32">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="if_33">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="if_34">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="if_35">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="if_36">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="if_37">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="if_38">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="if_39">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="if_40">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="if_41">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="if_42">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="if_43">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="if_44">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="if_45">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="if_46">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="if_47">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="if_48">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="if_49">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="if_50">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="if_51">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="if_52">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="if_53">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="if_54">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="if_55">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="if_56">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="if_57">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="if_58">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="if_59">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="if_60">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="if_61">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="if_62">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="if_63">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="if_64">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="if_65">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="if_66">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="for_67">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="for_68">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="for_69">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="for_70">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="for_71">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="for_72">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="for_73">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="for_74">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="switch_75">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="switch_76">
  <data key="d6">contains</data>
</edge>
<edge source="mxf_parse_structural_metadata" target="switch_77">
  <data key="d6">contains</data>
</edge>
<edge source="coded_width" target="if_64">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="coded_width" target="mxf_get_codec_ul">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="coded_width" target="if_2">
  <data key="d6">used_in_body</data>
</edge>
<edge source="coded_width" target="if_63">
  <data key="d6">used_in_body</data>
</edge>
<edge source="coded_width" target="for_68">
  <data key="d6">used_in_body</data>
</edge>
<edge source="type" target="if_29">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="type" target="if_34">
  <data key="d6">used_in_body</data>
</edge>
<edge source="type" target="if_46">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="type" target="if_57">
  <data key="d6">used_in_body</data>
</edge>
<edge source="type" target="if_59">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="type" target="if_66">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="type" target="av_log">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="type" target="if_2">
  <data key="d6">used_in_body</data>
</edge>
<edge source="type" target="if_27">
  <data key="d6">used_in_body</data>
</edge>
<edge source="type" target="if_28">
  <data key="d6">used_in_body</data>
</edge>
<edge source="type" target="if_31">
  <data key="d6">used_in_body</data>
</edge>
<edge source="type" target="if_32">
  <data key="d6">used_in_body</data>
</edge>
<edge source="type" target="if_33">
  <data key="d6">used_in_body</data>
</edge>
<edge source="type" target="if_35">
  <data key="d6">used_in_body</data>
</edge>
<edge source="type" target="for_68">
  <data key="d6">used_in_body</data>
</edge>
<edge source="type" target="for_73">
  <data key="d6">used_in_body</data>
</edge>
<edge source="type" target="switch_75">
  <data key="d6">used_in_body</data>
</edge>
<edge source="flags" target="if_5">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="flags" target="if_8">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="flags" target="if_2">
  <data key="d6">used_in_body</data>
</edge>
<edge source="flags" target="if_4">
  <data key="d6">used_in_body</data>
</edge>
<edge source="flags" target="for_68">
  <data key="d6">used_in_body</data>
</edge>
<edge source="flags" target="for_69">
  <data key="d6">used_in_body</data>
</edge>
</graph></graphml>