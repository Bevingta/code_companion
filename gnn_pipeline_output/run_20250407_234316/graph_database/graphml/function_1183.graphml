<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"><key id="d6" for="edge" attr.name="type" attr.type="string"/>
<key id="d5" for="node" attr.name="condition" attr.type="string"/>
<key id="d4" for="node" attr.name="type" attr.type="string"/>
<key id="d3" for="graph" attr.name="severity" attr.type="string"/>
<key id="d2" for="graph" attr.name="cvss" attr.type="string"/>
<key id="d1" for="graph" attr.name="cve" attr.type="string"/>
<key id="d0" for="graph" attr.name="pointer_arithmetic" attr.type="boolean"/>
<graph edgedefault="directed"><data key="d0">True</data>
<data key="d1">CVE-2016-6823</data>
<data key="d2">5.0</data>
<data key="d3">MEDIUM</data>
<node id="WriteBMPImage">
  <data key="d4">FunctionDefinition</data>
</node>
<node id="bmp_colormap">
  <data key="d4">Variable</data>
</node>
<node id="q">
  <data key="d4">Variable</data>
</node>
<node id="intent">
  <data key="d4">Variable</data>
</node>
<node id="y">
  <data key="d4">Variable</data>
</node>
<node id="offset">
  <data key="d4">Variable</data>
</node>
<node id="extra_size">
  <data key="d4">Variable</data>
</node>
<node id="option">
  <data key="d4">Variable</data>
</node>
<node id="GetVirtualMemoryBlob">
  <data key="d4">FunctionCall</data>
</node>
<node id="RelinquishMagickMemory">
  <data key="d4">FunctionCall</data>
</node>
<node id="CloseBlob">
  <data key="d4">FunctionCall</data>
</node>
<node id="EncodeImage">
  <data key="d4">FunctionCall</data>
</node>
<node id="GetImageProfile">
  <data key="d4">FunctionCall</data>
</node>
<node id="AcquireQuantumMemory">
  <data key="d4">FunctionCall</data>
</node>
<node id="GetPixelIndex">
  <data key="d4">FunctionCall</data>
</node>
<node id="ThrowWriterException">
  <data key="d4">FunctionCall</data>
</node>
<node id="assert">
  <data key="d4">FunctionCall</data>
</node>
<node id="else">
  <data key="d4">FunctionCall</data>
</node>
<node id="WriteBlobLSBSignedLong">
  <data key="d4">FunctionCall</data>
</node>
<node id="WriteBlobLSBShort">
  <data key="d4">FunctionCall</data>
</node>
<node id="WriteBlobLSBSignedShort">
  <data key="d4">FunctionCall</data>
</node>
<node id="RelinquishVirtualMemory">
  <data key="d4">FunctionCall</data>
</node>
<node id="GetVirtualPixels">
  <data key="d4">FunctionCall</data>
</node>
<node id="SetImageProgress">
  <data key="d4">FunctionCall</data>
</node>
<node id="SyncNextImageInList">
  <data key="d4">FunctionCall</data>
</node>
<node id="GetImageOption">
  <data key="d4">FunctionCall</data>
</node>
<node id="GetPixelChannels">
  <data key="d4">FunctionCall</data>
</node>
<node id="ResetMagickMemory">
  <data key="d4">FunctionCall</data>
</node>
<node id="LogMagickEvent">
  <data key="d4">FunctionCall</data>
</node>
<node id="MagickMin">
  <data key="d4">FunctionCall</data>
</node>
<node id="AcquireVirtualMemory">
  <data key="d4">FunctionCall</data>
</node>
<node id="ScaleQuantumToChar">
  <data key="d4">FunctionCall</data>
</node>
<node id="TransformImageColorspace">
  <data key="d4">FunctionCall</data>
</node>
<node id="OpenBlob">
  <data key="d4">FunctionCall</data>
</node>
<node id="WriteBlob">
  <data key="d4">FunctionCall</data>
</node>
<node id="WriteBlobLSBLong">
  <data key="d4">FunctionCall</data>
</node>
<node id="if_0">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">image-&gt;debug != MagickFalse</data>
</node>
<node id="if_1">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">status == MagickFalse</data>
</node>
<node id="if_2">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">LocaleCompare(image_info-&gt;magick,"BMP2"</data>
</node>
<node id="if_3">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">LocaleCompare(image_info-&gt;magick,"BMP3"</data>
</node>
<node id="if_4">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">option != (char *</data>
</node>
<node id="if_5">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">LocaleCompare(option,"bmp2"</data>
</node>
<node id="if_6">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">LocaleCompare(option,"bmp3"</data>
</node>
<node id="if_7">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">LocaleCompare(option,"bmp4"</data>
</node>
<node id="if_8">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">type &gt; 2</data>
</node>
<node id="if_9">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">(image-&gt;storage_class == PseudoClass</data>
</node>
<node id="if_10">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">image-&gt;storage_class != DirectClass</data>
</node>
<node id="if_11">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">image-&gt;colors &lt;= 2</data>
</node>
<node id="if_12">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">image-&gt;colors &lt;= 16</data>
</node>
<node id="if_13">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">image-&gt;colors &lt;= 256</data>
</node>
<node id="if_14">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">image_info-&gt;compression == RLECompression</data>
</node>
<node id="if_15">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">image-&gt;alpha_trait != UndefinedPixelTrait</data>
</node>
<node id="if_16">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">(size_t</data>
</node>
<node id="if_17">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">type &gt; 2</data>
</node>
<node id="if_18">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">image-&gt;storage_class == DirectClass</data>
</node>
<node id="if_19">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">(type == 3</data>
</node>
<node id="if_20">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">IsStringTrue(option</data>
</node>
<node id="if_21">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">type == 2</data>
</node>
<node id="if_22">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">(type == 3</data>
</node>
<node id="if_23">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">(image-&gt;rendering_intent != UndefinedIntent</data>
</node>
<node id="if_24">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">pixel_info == (MemoryInfo *</data>
</node>
<node id="if_25">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">p == (const Quantum *</data>
</node>
<node id="if_26">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">bit == 8</data>
</node>
<node id="if_27">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">bit != 0</data>
</node>
<node id="if_28">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">image-&gt;previous == (Image *</data>
</node>
<node id="if_29">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">status == MagickFalse</data>
</node>
<node id="if_30">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">p == (const Quantum *</data>
</node>
<node id="if_31">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">nibble == 2</data>
</node>
<node id="if_32">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">nibble != 0</data>
</node>
<node id="if_33">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">image-&gt;previous == (Image *</data>
</node>
<node id="if_34">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">status == MagickFalse</data>
</node>
<node id="if_35">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">p == (const Quantum *</data>
</node>
<node id="if_36">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">image-&gt;previous == (Image *</data>
</node>
<node id="if_37">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">status == MagickFalse</data>
</node>
<node id="if_38">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">p == (const Quantum *</data>
</node>
<node id="if_39">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">image-&gt;previous == (Image *</data>
</node>
<node id="if_40">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">status == MagickFalse</data>
</node>
<node id="if_41">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">p == (const Quantum *</data>
</node>
<node id="if_42">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">image-&gt;previous == (Image *</data>
</node>
<node id="if_43">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">status == MagickFalse</data>
</node>
<node id="if_44">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">(type &gt; 2</data>
</node>
<node id="if_45">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">image_info-&gt;compression != NoCompression</data>
</node>
<node id="if_46">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">rle_info == (MemoryInfo *</data>
</node>
<node id="if_47">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">image-&gt;debug != MagickFalse</data>
</node>
<node id="if_48">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">image-&gt;storage_class == DirectClass</data>
</node>
<node id="if_49">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">image-&gt;alpha_trait != UndefinedPixelTrait</data>
</node>
<node id="if_50">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">bmp_info.number_colors == 0</data>
</node>
<node id="if_51">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">type == 2</data>
</node>
<node id="if_52">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">(type &gt; 3</data>
</node>
<node id="if_53">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">(image-&gt;rendering_intent != UndefinedIntent</data>
</node>
<node id="if_54">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">image-&gt;storage_class == PseudoClass</data>
</node>
<node id="if_55">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">image-&gt;debug != MagickFalse</data>
</node>
<node id="if_56">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">bmp_colormap == (unsigned char *</data>
</node>
<node id="if_57">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">type &gt; 2</data>
</node>
<node id="if_58">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">type &gt; 2</data>
</node>
<node id="if_59">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">type &lt;= 2</data>
</node>
<node id="if_60">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">image-&gt;debug != MagickFalse</data>
</node>
<node id="if_61">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">GetNextImageInList(image</data>
</node>
<node id="if_62">
  <data key="d4">ControlStructure_if</data>
  <data key="d5">status == MagickFalse</data>
</node>
<node id="for_63">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">y=0; y &lt; (ssize_t</data>
</node>
<node id="for_64">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">x=0; x &lt; (ssize_t</data>
</node>
<node id="for_65">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">x=offset; x &lt; (ssize_t</data>
</node>
<node id="for_66">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">y=0; y &lt; (ssize_t</data>
</node>
<node id="for_67">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">x=0; x &lt; (ssize_t</data>
</node>
<node id="for_68">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">x=offset; x &lt; (ssize_t</data>
</node>
<node id="for_69">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">y=0; y &lt; (ssize_t</data>
</node>
<node id="for_70">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">x=0; x &lt; (ssize_t</data>
</node>
<node id="for_71">
  <data key="d4">ControlStructure_for</data>
  <data key="d5"> ; x &lt; (ssize_t</data>
</node>
<node id="for_72">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">y=0; y &lt; (ssize_t</data>
</node>
<node id="for_73">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">x=0; x &lt; (ssize_t</data>
</node>
<node id="for_74">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">x=3L*(ssize_t</data>
</node>
<node id="for_75">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">y=0; y &lt; (ssize_t</data>
</node>
<node id="for_76">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">x=0; x &lt; (ssize_t</data>
</node>
<node id="for_77">
  <data key="d4">ControlStructure_for</data>
  <data key="d5">i=0; i &lt; (ssize_t</data>
</node>
<node id="for_78">
  <data key="d4">ControlStructure_for</data>
  <data key="d5"> ; i &lt; (ssize_t</data>
</node>
<node id="while_79">
  <data key="d4">ControlStructure_while</data>
  <data key="d5">image_info-&gt;adjoin != MagickFalse</data>
</node>
<node id="switch_80">
  <data key="d4">ControlStructure_switch</data>
  <data key="d5">image-&gt;units</data>
</node>
<node id="switch_81">
  <data key="d4">ControlStructure_switch</data>
  <data key="d5">bmp_info.bits_per_pixel</data>
</node>
<node id="switch_82">
  <data key="d4">ControlStructure_switch</data>
  <data key="d5">(int</data>
</node>
<node id="switch_83">
  <data key="d4">ControlStructure_switch</data>
  <data key="d5">(int</data>
</node>
<edge source="WriteBMPImage" target="bmp_colormap">
  <data key="d6">declares</data>
</edge>
<edge source="WriteBMPImage" target="q">
  <data key="d6">declares</data>
</edge>
<edge source="WriteBMPImage" target="intent">
  <data key="d6">declares</data>
</edge>
<edge source="WriteBMPImage" target="y">
  <data key="d6">declares</data>
</edge>
<edge source="WriteBMPImage" target="offset">
  <data key="d6">declares</data>
</edge>
<edge source="WriteBMPImage" target="extra_size">
  <data key="d6">declares</data>
</edge>
<edge source="WriteBMPImage" target="option">
  <data key="d6">declares</data>
</edge>
<edge source="WriteBMPImage" target="GetVirtualMemoryBlob">
  <data key="d6">calls</data>
</edge>
<edge source="WriteBMPImage" target="RelinquishMagickMemory">
  <data key="d6">calls</data>
</edge>
<edge source="WriteBMPImage" target="CloseBlob">
  <data key="d6">calls</data>
</edge>
<edge source="WriteBMPImage" target="EncodeImage">
  <data key="d6">calls</data>
</edge>
<edge source="WriteBMPImage" target="GetImageProfile">
  <data key="d6">calls</data>
</edge>
<edge source="WriteBMPImage" target="AcquireQuantumMemory">
  <data key="d6">calls</data>
</edge>
<edge source="WriteBMPImage" target="GetPixelIndex">
  <data key="d6">calls</data>
</edge>
<edge source="WriteBMPImage" target="ThrowWriterException">
  <data key="d6">calls</data>
</edge>
<edge source="WriteBMPImage" target="assert">
  <data key="d6">calls</data>
</edge>
<edge source="WriteBMPImage" target="else">
  <data key="d6">calls</data>
</edge>
<edge source="WriteBMPImage" target="WriteBlobLSBSignedLong">
  <data key="d6">calls</data>
</edge>
<edge source="WriteBMPImage" target="WriteBlobLSBShort">
  <data key="d6">calls</data>
</edge>
<edge source="WriteBMPImage" target="WriteBlobLSBSignedShort">
  <data key="d6">calls</data>
</edge>
<edge source="WriteBMPImage" target="RelinquishVirtualMemory">
  <data key="d6">calls</data>
</edge>
<edge source="WriteBMPImage" target="GetVirtualPixels">
  <data key="d6">calls</data>
</edge>
<edge source="WriteBMPImage" target="SetImageProgress">
  <data key="d6">calls</data>
</edge>
<edge source="WriteBMPImage" target="SyncNextImageInList">
  <data key="d6">calls</data>
</edge>
<edge source="WriteBMPImage" target="GetImageOption">
  <data key="d6">calls</data>
</edge>
<edge source="WriteBMPImage" target="GetPixelChannels">
  <data key="d6">calls</data>
</edge>
<edge source="WriteBMPImage" target="ResetMagickMemory">
  <data key="d6">calls</data>
</edge>
<edge source="WriteBMPImage" target="LogMagickEvent">
  <data key="d6">calls</data>
</edge>
<edge source="WriteBMPImage" target="MagickMin">
  <data key="d6">calls</data>
</edge>
<edge source="WriteBMPImage" target="AcquireVirtualMemory">
  <data key="d6">calls</data>
</edge>
<edge source="WriteBMPImage" target="ScaleQuantumToChar">
  <data key="d6">calls</data>
</edge>
<edge source="WriteBMPImage" target="TransformImageColorspace">
  <data key="d6">calls</data>
</edge>
<edge source="WriteBMPImage" target="OpenBlob">
  <data key="d6">calls</data>
</edge>
<edge source="WriteBMPImage" target="WriteBlob">
  <data key="d6">calls</data>
</edge>
<edge source="WriteBMPImage" target="WriteBlobLSBLong">
  <data key="d6">calls</data>
</edge>
<edge source="WriteBMPImage" target="if_0">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="if_1">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="if_2">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="if_3">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="if_4">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="if_5">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="if_6">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="if_7">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="if_8">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="if_9">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="if_10">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="if_11">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="if_12">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="if_13">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="if_14">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="if_15">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="if_16">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="if_17">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="if_18">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="if_19">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="if_20">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="if_21">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="if_22">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="if_23">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="if_24">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="if_25">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="if_26">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="if_27">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="if_28">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="if_29">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="if_30">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="if_31">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="if_32">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="if_33">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="if_34">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="if_35">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="if_36">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="if_37">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="if_38">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="if_39">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="if_40">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="if_41">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="if_42">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="if_43">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="if_44">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="if_45">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="if_46">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="if_47">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="if_48">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="if_49">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="if_50">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="if_51">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="if_52">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="if_53">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="if_54">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="if_55">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="if_56">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="if_57">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="if_58">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="if_59">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="if_60">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="if_61">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="if_62">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="for_63">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="for_64">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="for_65">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="for_66">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="for_67">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="for_68">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="for_69">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="for_70">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="for_71">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="for_72">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="for_73">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="for_74">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="for_75">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="for_76">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="for_77">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="for_78">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="while_79">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="switch_80">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="switch_81">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="switch_82">
  <data key="d6">contains</data>
</edge>
<edge source="WriteBMPImage" target="switch_83">
  <data key="d6">contains</data>
</edge>
<edge source="bmp_colormap" target="if_56">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="bmp_colormap" target="RelinquishMagickMemory">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="bmp_colormap" target="if_5">
  <data key="d6">used_in_body</data>
</edge>
<edge source="bmp_colormap" target="if_6">
  <data key="d6">used_in_body</data>
</edge>
<edge source="bmp_colormap" target="if_7">
  <data key="d6">used_in_body</data>
</edge>
<edge source="bmp_colormap" target="if_54">
  <data key="d6">used_in_body</data>
</edge>
<edge source="intent" target="if_23">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="intent" target="if_53">
  <data key="d6">used_in_body</data>
</edge>
<edge source="intent" target="if_5">
  <data key="d6">used_in_body</data>
</edge>
<edge source="intent" target="if_6">
  <data key="d6">used_in_body</data>
</edge>
<edge source="intent" target="if_7">
  <data key="d6">used_in_body</data>
</edge>
<edge source="intent" target="if_52">
  <data key="d6">used_in_body</data>
</edge>
<edge source="intent" target="switch_83">
  <data key="d6">used_in_body</data>
</edge>
<edge source="y" target="if_8">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="y" target="if_17">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="y" target="if_19">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="y" target="if_21">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="y" target="if_22">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="y" target="if_24">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="y" target="if_44">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="y" target="if_46">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="y" target="if_51">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="y" target="if_52">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="y" target="if_57">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="y" target="if_58">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="y" target="if_59">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="y" target="for_63">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="y" target="for_66">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="y" target="for_69">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="y" target="for_72">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="y" target="for_75">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="offset" target="for_65">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="offset" target="for_68">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="offset" target="WriteBlobLSBLong">
  <data key="d6">used_as_parameter</data>
</edge>
<edge source="offset" target="if_5">
  <data key="d6">used_in_body</data>
</edge>
<edge source="offset" target="if_6">
  <data key="d6">used_in_body</data>
</edge>
<edge source="offset" target="if_7">
  <data key="d6">used_in_body</data>
</edge>
<edge source="offset" target="if_24">
  <data key="d6">used_in_body</data>
</edge>
<edge source="offset" target="if_29">
  <data key="d6">used_in_body</data>
</edge>
<edge source="offset" target="for_63">
  <data key="d6">used_in_body</data>
</edge>
<edge source="offset" target="for_66">
  <data key="d6">used_in_body</data>
</edge>
<edge source="offset" target="switch_81">
  <data key="d6">used_in_body</data>
</edge>
<edge source="extra_size" target="if_5">
  <data key="d6">used_in_body</data>
</edge>
<edge source="extra_size" target="if_6">
  <data key="d6">used_in_body</data>
</edge>
<edge source="extra_size" target="if_7">
  <data key="d6">used_in_body</data>
</edge>
<edge source="extra_size" target="if_23">
  <data key="d6">used_in_body</data>
</edge>
<edge source="option" target="if_4">
  <data key="d6">used_in_body</data>
</edge>
<edge source="option" target="if_5">
  <data key="d6">used_in_body</data>
</edge>
<edge source="option" target="if_6">
  <data key="d6">used_in_body</data>
</edge>
<edge source="option" target="if_7">
  <data key="d6">used_in_body</data>
</edge>
<edge source="option" target="if_20">
  <data key="d6">used_in_condition</data>
</edge>
<edge source="option" target="if_0">
  <data key="d6">used_in_body</data>
</edge>
<edge source="option" target="if_1">
  <data key="d6">used_in_body</data>
</edge>
<edge source="option" target="if_2">
  <data key="d6">used_in_body</data>
</edge>
<edge source="option" target="if_3">
  <data key="d6">used_in_body</data>
</edge>
<edge source="option" target="if_18">
  <data key="d6">used_in_body</data>
</edge>
<edge source="option" target="if_19">
  <data key="d6">used_in_body</data>
</edge>
</graph></graphml>