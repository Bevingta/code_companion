<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"><key id="d5" for="edge" attr.name="type" attr.type="string"/>
<key id="d4" for="node" attr.name="condition" attr.type="string"/>
<key id="d3" for="node" attr.name="type" attr.type="string"/>
<key id="d2" for="graph" attr.name="severity" attr.type="string"/>
<key id="d1" for="graph" attr.name="cvss" attr.type="string"/>
<key id="d0" for="graph" attr.name="cve" attr.type="string"/>
<graph edgedefault="directed"><data key="d0">CVE-2014-3160</data>
<data key="d1">6.8</data>
<data key="d2">MEDIUM</data>
<node id="canRequest">
  <data key="d3">FunctionDefinition</data>
</node>
<node id="printAccessDeniedMessage">
  <data key="d3">FunctionCall</data>
</node>
<node id="get">
  <data key="d3">FunctionCall</data>
</node>
<node id="WTF_LOG">
  <data key="d3">FunctionCall</data>
</node>
<node id="ASSERT">
  <data key="d3">FunctionCall</data>
</node>
<node id="frame">
  <data key="d3">FunctionCall</data>
</node>
<node id="if_0">
  <data key="d3">ControlStructure_if</data>
  <data key="d4">!securityOrigin &amp;&amp; document(</data>
</node>
<node id="if_1">
  <data key="d3">ControlStructure_if</data>
  <data key="d4">securityOrigin &amp;&amp; !securityOrigin-&gt;canDisplay(url</data>
</node>
<node id="if_2">
  <data key="d3">ControlStructure_if</data>
  <data key="d4">!forPreload</data>
</node>
<node id="if_3">
  <data key="d3">ControlStructure_if</data>
  <data key="d4">originRestriction == FetchRequest::RestrictToSameOrigin &amp;&amp; !securityOrigin-&gt;canRequest(url</data>
</node>
<node id="if_4">
  <data key="d3">ControlStructure_if</data>
  <data key="d4">!securityOrigin-&gt;canRequest(url</data>
</node>
<node id="if_5">
  <data key="d3">ControlStructure_if</data>
  <data key="d4">!shouldBypassMainWorldContentSecurityPolicy &amp;&amp; !m_document-&gt;contentSecurityPolicy(</data>
</node>
<node id="if_6">
  <data key="d3">ControlStructure_if</data>
  <data key="d4">!shouldBypassMainWorldContentSecurityPolicy &amp;&amp; !m_document-&gt;contentSecurityPolicy(</data>
</node>
<node id="if_7">
  <data key="d3">ControlStructure_if</data>
  <data key="d4">frame(</data>
</node>
<node id="if_8">
  <data key="d3">ControlStructure_if</data>
  <data key="d4">!frame(</data>
</node>
<node id="if_9">
  <data key="d3">ControlStructure_if</data>
  <data key="d4">!shouldBypassMainWorldContentSecurityPolicy &amp;&amp; !m_document-&gt;contentSecurityPolicy(</data>
</node>
<node id="if_10">
  <data key="d3">ControlStructure_if</data>
  <data key="d4">!shouldBypassMainWorldContentSecurityPolicy &amp;&amp; !m_document-&gt;contentSecurityPolicy(</data>
</node>
<node id="if_11">
  <data key="d3">ControlStructure_if</data>
  <data key="d4">!shouldBypassMainWorldContentSecurityPolicy &amp;&amp; !m_document-&gt;contentSecurityPolicy(</data>
</node>
<node id="if_12">
  <data key="d3">ControlStructure_if</data>
  <data key="d4">!shouldBypassMainWorldContentSecurityPolicy &amp;&amp; !m_document-&gt;contentSecurityPolicy(</data>
</node>
<node id="if_13">
  <data key="d3">ControlStructure_if</data>
  <data key="d4">!checkInsecureContent(type, url, options.mixedContentBlockingTreatment</data>
</node>
<node id="switch_14">
  <data key="d3">ControlStructure_switch</data>
  <data key="d4">type</data>
</node>
<node id="switch_15">
  <data key="d3">ControlStructure_switch</data>
  <data key="d4">type</data>
</node>
<edge source="canRequest" target="printAccessDeniedMessage">
  <data key="d5">calls</data>
</edge>
<edge source="canRequest" target="get">
  <data key="d5">calls</data>
</edge>
<edge source="canRequest" target="WTF_LOG">
  <data key="d5">calls</data>
</edge>
<edge source="canRequest" target="ASSERT">
  <data key="d5">calls</data>
</edge>
<edge source="canRequest" target="frame">
  <data key="d5">calls</data>
</edge>
<edge source="canRequest" target="if_0">
  <data key="d5">contains</data>
</edge>
<edge source="canRequest" target="if_1">
  <data key="d5">contains</data>
</edge>
<edge source="canRequest" target="if_2">
  <data key="d5">contains</data>
</edge>
<edge source="canRequest" target="if_3">
  <data key="d5">contains</data>
</edge>
<edge source="canRequest" target="if_4">
  <data key="d5">contains</data>
</edge>
<edge source="canRequest" target="if_5">
  <data key="d5">contains</data>
</edge>
<edge source="canRequest" target="if_6">
  <data key="d5">contains</data>
</edge>
<edge source="canRequest" target="if_7">
  <data key="d5">contains</data>
</edge>
<edge source="canRequest" target="if_8">
  <data key="d5">contains</data>
</edge>
<edge source="canRequest" target="if_9">
  <data key="d5">contains</data>
</edge>
<edge source="canRequest" target="if_10">
  <data key="d5">contains</data>
</edge>
<edge source="canRequest" target="if_11">
  <data key="d5">contains</data>
</edge>
<edge source="canRequest" target="if_12">
  <data key="d5">contains</data>
</edge>
<edge source="canRequest" target="if_13">
  <data key="d5">contains</data>
</edge>
<edge source="canRequest" target="switch_14">
  <data key="d5">contains</data>
</edge>
<edge source="canRequest" target="switch_15">
  <data key="d5">contains</data>
</edge>
</graph></graphml>